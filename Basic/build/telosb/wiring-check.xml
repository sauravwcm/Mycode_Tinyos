<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="11:BasicAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x102b934d0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x102b909a0"/></to>
    </wire>
    <wire loc="72:../../tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x102b909a0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x102d5c590"/></to>
    </wire>
    <wire loc="12:BasicAppC.nc">
      <from><interface-ref name="Timer0" scoped="" ref="0x102d817f0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x1031cc370"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x1031cc370"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x103006610"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="13:BasicAppC.nc">
      <from><interface-ref name="Timer1" scoped="" ref="0x102d7ec70"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x1031c6c90"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x1031c6c90"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x103006610"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="14:BasicAppC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x102d92a80"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x102d69da0"/></to>
    </wire>
    <wire loc="51:../../tos/system/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x102d69da0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x102daa710"/></to>
    </wire>
    <wire loc="53:../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x102b91020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x10302d3e0"/></to>
    </wire>
    <wire loc="67:../../tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x102d5cc00"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x1027133a0"/></to>
    </wire>
    <wire loc="53:../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x1027133a0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x102b6b420"/></to>
    </wire>
    <wire loc="68:../../tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x102d746c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x102baa020"/></to>
    </wire>
    <wire loc="48:../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x102baa020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x102ba7280"/></to>
    </wire>
    <wire loc="71:../../tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x102d74dc0"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x102b91020"/></to>
    </wire>
    <wire loc="49:../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x102ba7990"/></from>
      <to><interface-ref name="MoteClockInit" scoped="" ref="0x102ba8640"/></to>
    </wire>
    <wire loc="46:../../tos/platforms/telosb/MoteClockC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x102ba8640"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x102bc4580"/></to>
    </wire>
    <wire loc="50:../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x102ba60c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x102ba03f0"/></to>
    </wire>
    <wire loc="56:../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="LedsInit" scoped="" ref="0x102ba67a0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x102dcd020"/></to>
    </wire>
    <wire loc="46:../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x102bc4580"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x102be87e0"/></to>
    </wire>
    <wire loc="47:../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="Msp430ClockInit" scoped="" ref="0x102bd9ae0"/></from>
      <to><interface-ref name="Msp430ClockInit" scoped="" ref="0x102be7020"/></to>
    </wire>
    <wire loc="48:../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x102a8f510"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x102be6360"/></to>
    </wire>
    <wire loc="113:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA2" scoped="" ref="0x102c235a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x102cf26d0"/></to>
    </wire>
    <wire loc="126:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB0" scoped="" ref="0x102c31020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x102cebb30"/></to>
    </wire>
    <wire loc="108:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA1" scoped="" ref="0x102c1a700"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x102cd5160"/></to>
    </wire>
    <wire loc="149:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB3" scoped="" ref="0x102c3ea20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x102cf5cb0"/></to>
    </wire>
    <wire loc="107:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA1" scoped="" ref="0x102c21aa0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x102cd6480"/></to>
    </wire>
    <wire loc="148:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB3" scoped="" ref="0x102c44020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x102cf5020"/></to>
    </wire>
    <wire loc="170:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB6" scoped="" ref="0x102c3ba20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x102d26cb0"/></to>
    </wire>
    <wire loc="154:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB4" scoped="" ref="0x102c2b5a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x102d13220"/></to>
    </wire>
    <wire loc="99:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA0" scoped="" ref="0x102c24b10"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x102c9d9d0"/></to>
    </wire>
    <wire loc="135:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB1" scoped="" ref="0x102c40a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x102d042f0"/></to>
    </wire>
    <wire loc="134:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB1" scoped="" ref="0x102c463e0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x102d05610"/></to>
    </wire>
    <wire loc="133:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB1" scoped="" ref="0x102c305a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x102ce2220"/></to>
    </wire>
    <wire loc="115:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA2" scoped="" ref="0x102c39700"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x102cf07a0"/></to>
    </wire>
    <wire loc="156:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB4" scoped="" ref="0x102c3da20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x102d112f0"/></to>
    </wire>
    <wire loc="140:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB2" scoped="" ref="0x102c2fbe0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x102cff6d0"/></to>
    </wire>
    <wire loc="114:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA2" scoped="" ref="0x102c20890"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x102cf1ac0"/></to>
    </wire>
    <wire loc="93:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerA" scoped="" ref="0x102c14060"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x102c89540"/></to>
    </wire>
    <wire loc="155:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB4" scoped="" ref="0x102c44da0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x102d12610"/></to>
    </wire>
    <wire loc="106:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA1" scoped="" ref="0x102c0a0c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x102cd7020"/></to>
    </wire>
    <wire loc="161:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB5" scoped="" ref="0x102c2aa50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x102d0b6d0"/></to>
    </wire>
    <wire loc="101:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA0" scoped="" ref="0x102c34690"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x102cdda90"/></to>
    </wire>
    <wire loc="142:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB2" scoped="" ref="0x102c3fa20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x102cfd7a0"/></to>
    </wire>
    <wire loc="100:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA0" scoped="" ref="0x102c1ccf0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x102cdede0"/></to>
    </wire>
    <wire loc="141:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB2" scoped="" ref="0x102c451f0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x102cfeac0"/></to>
    </wire>
    <wire loc="163:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB5" scoped="" ref="0x102c3ca20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x102d097a0"/></to>
    </wire>
    <wire loc="147:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB3" scoped="" ref="0x102c2c0c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x102cf7b30"/></to>
    </wire>
    <wire loc="120:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerB" scoped="" ref="0x102c336c0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x102c813e0"/></to>
    </wire>
    <wire loc="162:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB5" scoped="" ref="0x102c43b80"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x102d0aac0"/></to>
    </wire>
    <wire loc="128:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB0" scoped="" ref="0x102c41a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x102ce9cb0"/></to>
    </wire>
    <wire loc="169:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB6" scoped="" ref="0x102c42a20"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x102d26020"/></to>
    </wire>
    <wire loc="127:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB0" scoped="" ref="0x102c47570"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x102ce9020"/></to>
    </wire>
    <wire loc="168:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB6" scoped="" ref="0x102c48020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x102d28b30"/></to>
    </wire>
    <wire loc="94:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x102c87450"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x102c88d80"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="95:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x102c87aa0"/></from>
      <to><interface-ref name="VectorTimerA0" scoped="" ref="0x102d21a90"/></to>
    </wire>
    <wire loc="96:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x102c86120"/></from>
      <to><interface-ref name="VectorTimerA1" scoped="" ref="0x102d1d260"/></to>
    </wire>
    <wire loc="102:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x102cdc930"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x102c89540"/></to>
    </wire>
    <wire loc="103:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x102cda020"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x102c88d80"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="109:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x102cd4020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x102c89540"/></to>
    </wire>
    <wire loc="110:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x102cd27a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x102c88d80"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="116:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x102cef610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x102c89540"/></to>
    </wire>
    <wire loc="117:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x102ceec50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x102c88d80"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="121:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x102c7f2f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x102c80bf0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="122:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x102c7f940"/></from>
      <to><interface-ref name="VectorTimerB0" scoped="" ref="0x102d1d9f0"/></to>
    </wire>
    <wire loc="123:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x102c7e020"/></from>
      <to><interface-ref name="VectorTimerB1" scoped="" ref="0x102d1c240"/></to>
    </wire>
    <wire loc="129:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x102ce8b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x102c813e0"/></to>
    </wire>
    <wire loc="130:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x102ce62f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x102c80bf0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x102d03160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x102c813e0"/></to>
    </wire>
    <wire loc="137:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x102d027a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x102c80bf0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x102cfc610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x102c813e0"/></to>
    </wire>
    <wire loc="144:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x102cfbc50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x102c80bf0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x102cf4b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x102c813e0"/></to>
    </wire>
    <wire loc="151:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x102d162f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x102c80bf0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x102d10160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x102c813e0"/></to>
    </wire>
    <wire loc="158:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x102d0f7a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x102c80bf0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x102d08610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x102c813e0"/></to>
    </wire>
    <wire loc="165:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x102d07c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x102c80bf0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x102d25b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x102c813e0"/></to>
    </wire>
    <wire loc="172:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x102d232f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x102c80bf0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x10269f1d0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x102b6a320"/></to>
    </wire>
    <wire loc="55:../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x102b66990"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x102773760"/></to>
    </wire>
    <wire loc="53:../../tos/system/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x102dcd020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x102daa110"/></to>
    </wire>
    <wire loc="54:../../tos/system/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x102da2ce0"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x102dab960"/></to>
    </wire>
    <wire loc="58:../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x102dab960"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x102fd8020"/></to>
    </wire>
    <wire loc="55:../../tos/system/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x102da6020"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x102dd0b60"/></to>
    </wire>
    <wire loc="61:../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x102dd0b60"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x102ff3b90"/></to>
    </wire>
    <wire loc="56:../../tos/system/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x102da1340"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x102dcfe70"/></to>
    </wire>
    <wire loc="64:../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x102dcfe70"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x102fee710"/></to>
    </wire>
    <wire loc="59:../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x102ff62f0"/></from>
      <to><interface-ref name="Port54" scoped="" ref="0x102e13200"/></to>
    </wire>
    <wire loc="486:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port54" scoped="" ref="0x102e13200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f3e740"/></to>
    </wire>
    <wire loc="62:../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x102ff2de0"/></from>
      <to><interface-ref name="Port55" scoped="" ref="0x102e39200"/></to>
    </wire>
    <wire loc="487:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port55" scoped="" ref="0x102e39200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f39100"/></to>
    </wire>
    <wire loc="65:../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x102fed930"/></from>
      <to><interface-ref name="Port56" scoped="" ref="0x102e37200"/></to>
    </wire>
    <wire loc="488:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port56" scoped="" ref="0x102e37200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f61d10"/></to>
    </wire>
    <wire loc="442:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x102dde020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102ea8100"/></to>
    </wire>
    <wire loc="455:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x102df0020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102ecdd10"/></to>
    </wire>
    <wire loc="531:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SDA" scoped="" ref="0x102e47560"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102eead10"/></to>
    </wire>
    <wire loc="551:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC6" scoped="" ref="0x102e73570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f67100"/></to>
    </wire>
    <wire loc="532:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI0" scoped="" ref="0x102e45580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102ee4740"/></to>
    </wire>
    <wire loc="460:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port30" scoped="" ref="0x102dec020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102eee100"/></to>
    </wire>
    <wire loc="473:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port42" scoped="" ref="0x102e00200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f16e00"/></to>
    </wire>
    <wire loc="497:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port64" scoped="" ref="0x102e2b200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f71d10"/></to>
    </wire>
    <wire loc="535:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD0" scoped="" ref="0x102e3f580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f07d10"/></to>
    </wire>
    <wire loc="545:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC0" scoped="" ref="0x102e56570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f57100"/></to>
    </wire>
    <wire loc="557:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSIN" scoped="" ref="0x102e6b580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f91d10"/></to>
    </wire>
    <wire loc="445:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x102dd8020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102ec4100"/></to>
    </wire>
    <wire loc="536:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD0" scoped="" ref="0x102e3d580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f02740"/></to>
    </wire>
    <wire loc="450:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x102dfb020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102ebb740"/></to>
    </wire>
    <wire loc="463:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port33" scoped="" ref="0x102e0e020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f0b100"/></to>
    </wire>
    <wire loc="476:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port45" scoped="" ref="0x102e22200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f34d10"/></to>
    </wire>
    <wire loc="489:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port57" scoped="" ref="0x102e35200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f5c740"/></to>
    </wire>
    <wire loc="500:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port67" scoped="" ref="0x102e4d200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f91d10"/></to>
    </wire>
    <wire loc="440:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x102de2020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102eb2d10"/></to>
    </wire>
    <wire loc="453:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x102df5020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102ed6860"/></to>
    </wire>
    <wire loc="466:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port36" scoped="" ref="0x102e08020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102efd100"/></to>
    </wire>
    <wire loc="530:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO0" scoped="" ref="0x102e49580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102eead10"/></to>
    </wire>
    <wire loc="548:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC3" scoped="" ref="0x102e50570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f75100"/></to>
    </wire>
    <wire loc="555:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC1" scoped="" ref="0x102e6d570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f91d10"/></to>
    </wire>
    <wire loc="541:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK1" scoped="" ref="0x102e5d580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f43d10"/></to>
    </wire>
    <wire loc="471:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port40" scoped="" ref="0x102e04020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f20a60"/></to>
    </wire>
    <wire loc="484:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port52" scoped="" ref="0x102e18200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f47100"/></to>
    </wire>
    <wire loc="495:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port62" scoped="" ref="0x102e2f200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f7a740"/></to>
    </wire>
    <wire loc="549:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC4" scoped="" ref="0x102e4e570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f71d10"/></to>
    </wire>
    <wire loc="538:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE1" scoped="" ref="0x102e3b570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f26d10"/></to>
    </wire>
    <wire loc="443:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x102ddc020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102ea4d10"/></to>
    </wire>
    <wire loc="456:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x102dee020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102ef3740"/></to>
    </wire>
    <wire loc="493:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port60" scoped="" ref="0x102e33200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f57100"/></to>
    </wire>
    <wire loc="461:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port31" scoped="" ref="0x102dea020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102eead10"/></to>
    </wire>
    <wire loc="474:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port43" scoped="" ref="0x102dfe200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f11740"/></to>
    </wire>
    <wire loc="498:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port65" scoped="" ref="0x102e29200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f6c740"/></to>
    </wire>
    <wire loc="540:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI1" scoped="" ref="0x102e5f580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f47100"/></to>
    </wire>
    <wire loc="438:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x102dc90a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102e926d0"/></to>
    </wire>
    <wire loc="451:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x102df9020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102edf100"/></to>
    </wire>
    <wire loc="464:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port34" scoped="" ref="0x102e0c020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f07d10"/></to>
    </wire>
    <wire loc="477:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port46" scoped="" ref="0x102e20200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f2f740"/></to>
    </wire>
    <wire loc="542:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD1" scoped="" ref="0x102e5a580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102efd100"/></to>
    </wire>
    <wire loc="546:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC1" scoped="" ref="0x102e54570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f52d10"/></to>
    </wire>
    <wire loc="552:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC7" scoped="" ref="0x102e71570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f91d10"/></to>
    </wire>
    <wire loc="482:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port50" scoped="" ref="0x102e1c200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f26d10"/></to>
    </wire>
    <wire loc="543:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD1" scoped="" ref="0x102e58580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102ef9d10"/></to>
    </wire>
    <wire loc="441:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x102de0020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102ead740"/></to>
    </wire>
    <wire loc="454:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x102df2020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102ed1270"/></to>
    </wire>
    <wire loc="467:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port37" scoped="" ref="0x102e06020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102ef9d10"/></to>
    </wire>
    <wire loc="539:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO1" scoped="" ref="0x102e61580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f4c740"/></to>
    </wire>
    <wire loc="550:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC5" scoped="" ref="0x102e75570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f6c740"/></to>
    </wire>
    <wire loc="472:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port41" scoped="" ref="0x102e02200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f1a460"/></to>
    </wire>
    <wire loc="485:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port53" scoped="" ref="0x102e16200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f43d10"/></to>
    </wire>
    <wire loc="496:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port63" scoped="" ref="0x102e2d200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f75100"/></to>
    </wire>
    <wire loc="444:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x102dda020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102ec9740"/></to>
    </wire>
    <wire loc="494:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port61" scoped="" ref="0x102e31200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f52d10"/></to>
    </wire>
    <wire loc="449:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x102dfd020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102ec0d10"/></to>
    </wire>
    <wire loc="462:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port32" scoped="" ref="0x102e10020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102ee4740"/></to>
    </wire>
    <wire loc="475:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port44" scoped="" ref="0x102e24200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f0c100"/></to>
    </wire>
    <wire loc="499:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port66" scoped="" ref="0x102e27200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f67100"/></to>
    </wire>
    <wire loc="439:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x102de4020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102e8d100"/></to>
    </wire>
    <wire loc="452:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x102df7020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102edbd10"/></to>
    </wire>
    <wire loc="465:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port35" scoped="" ref="0x102e0a020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f02740"/></to>
    </wire>
    <wire loc="478:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port47" scoped="" ref="0x102e1e200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f2a100"/></to>
    </wire>
    <wire loc="534:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SCL" scoped="" ref="0x102e41560"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f0b100"/></to>
    </wire>
    <wire loc="547:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC2" scoped="" ref="0x102e52570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f7a740"/></to>
    </wire>
    <wire loc="533:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK0" scoped="" ref="0x102e43580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f0b100"/></to>
    </wire>
    <wire loc="483:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port51" scoped="" ref="0x102e1a200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f4c740"/></to>
    </wire>
    <wire loc="554:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC0" scoped="" ref="0x102e6f570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f67100"/></to>
    </wire>
    <wire loc="558:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSOUT" scoped="" ref="0x102e69580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102f5c740"/></to>
    </wire>
    <wire loc="529:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE0" scoped="" ref="0x102e4b1f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x102eee100"/></to>
    </wire>
    <wire loc="54:../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x103006610"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x10302c1d0"/></to>
    </wire>
    <wire loc="58:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x10302c1d0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x103181150"/></to>
    </wire>
    <wire loc="57:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x10302d3e0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x103129020"/></to>
    </wire>
    <wire loc="59:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x103023a80"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x1031a8790"/></to>
    </wire>
    <wire loc="52:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x103129020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x10368cc40"/></to>
    </wire>
    <wire loc="61:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x1031b1640"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x1031312f0"/></to>
    </wire>
    <wire loc="62:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x103160850"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x103129870"/></to>
    </wire>
    <wire loc="53:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x103129870"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x103685890"/></to>
    </wire>
    <wire loc="63:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x1031a7a60"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x1030a38c0"/></to>
    </wire>
    <wire loc="50:../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x1030a38c0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x1030b8cf0"/></to>
    </wire>
    <wire loc="51:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x10368cc40"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x1036b9660"/></to>
    </wire>
    <wire loc="55:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x10367d0a0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x10368a4f0"/></to>
    </wire>
    <wire loc="52:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x10368a4f0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x1036b8020"/></to>
    </wire>
    <wire loc="56:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x103681c00"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x1030a38c0"/></to>
    </wire>
    <wire loc="54:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x1036b4190"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x1036be340"/></to>
    </wire>
    <wire loc="49:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x1036be340"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x1030358b0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x1036b3770"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x1036bda80"/></to>
    </wire>
    <wire loc="50:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x1036bda80"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x103032560"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x1036b2a80"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x1036bcda0"/></to>
    </wire>
    <wire loc="51:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x1036bcda0"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x10305f020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="58:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x1030358b0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x102c336c0"/></to>
    </wire>
    <wire loc="59:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x103032560"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB0" scoped="" ref="0x102c31020"/></to>
    </wire>
    <wire loc="60:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x10305f020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB0" scoped="" ref="0x102c47570"/></to>
    </wire>
    <wire loc="66:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x1030358b0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x102c336c0"/></to>
    </wire>
    <wire loc="67:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x103032560"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB2" scoped="" ref="0x102c2fbe0"/></to>
    </wire>
    <wire loc="68:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x10305f020"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB2" scoped="" ref="0x102c451f0"/></to>
    </wire>
    <wire loc="70:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x1030358b0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x102c336c0"/></to>
    </wire>
    <wire loc="71:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x103032560"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB3" scoped="" ref="0x102c2c0c0"/></to>
    </wire>
    <wire loc="72:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x10305f020"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB3" scoped="" ref="0x102c44020"/></to>
    </wire>
    <wire loc="74:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x1030358b0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x102c336c0"/></to>
    </wire>
    <wire loc="75:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x103032560"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB4" scoped="" ref="0x102c2b5a0"/></to>
    </wire>
    <wire loc="76:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x10305f020"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB4" scoped="" ref="0x102c44da0"/></to>
    </wire>
    <wire loc="78:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x1030358b0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x102c336c0"/></to>
    </wire>
    <wire loc="79:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x103032560"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB5" scoped="" ref="0x102c2aa50"/></to>
    </wire>
    <wire loc="80:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x10305f020"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB5" scoped="" ref="0x102c43b80"/></to>
    </wire>
    <wire loc="82:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x1030358b0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x102c336c0"/></to>
    </wire>
    <wire loc="83:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x103032560"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB6" scoped="" ref="0x102c48020"/></to>
    </wire>
    <wire loc="84:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x10305f020"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB6" scoped="" ref="0x102c42a20"/></to>
    </wire>
    <wire loc="52:../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x1030cd0f0"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x1030a18e0"/></to>
    </wire>
    <wire loc="50:../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Counter32khz" scoped="" ref="0x1030a18e0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x10309bb80"/></to>
    </wire>
    <wire loc="51:../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x1030bec50"/></from>
      <to><interface-ref name="TimerB" scoped="" ref="0x102c336c0"/></to>
    </wire>
    <wire loc="74:../../tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x10315c9c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x10269f1d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x1031aca00"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x10269f1d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
  </wiring>
  <components>
    <component qname="MainC" loc="56:../../tos/system/MainC.nc">
      <documentation loc="45:../../tos/system/MainC.nc">
        <short>&#10; MainC is the system interface the TinyOS boot sequence.</short>
        <long>&#10; MainC is the system interface the TinyOS boot sequence. It wires the&#10; boot sequence implementation to the scheduler and hardware resources.&#10;&#10; @author Philip Levis&#10; @date   August 6 2005&#10; @see    TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="40:../../tos/platforms/telosa/PlatformC.nc">
      <documentation loc="34:../../tos/platforms/telosa/PlatformC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre and Cory Sharp&#10; @version $Revision: 1.6 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="3:../../tos/platforms/telosa/PlatformP.nc" safe="">
      <module/>
    </component>
    <component qname="MotePlatformC" loc="1:../../tos/platforms/telosb/MotePlatformC.nc" safe="">
      <module/>
    </component>
    <component qname="MoteClockC" loc="37:../../tos/platforms/telosb/MoteClockC.nc">
      <documentation loc="33:../../tos/platforms/telosb/MoteClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockC" loc="37:../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430ClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockP" loc="43:../../tos/chips/msp430/timer/Msp430ClockP.nc" safe="">
      <module/>
    </component>
    <component qname="Msp430TimerC" loc="37:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA" loc="39(Msp430TimerC.Msp430TimerA):../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:302">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:368">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:352">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB" loc="39(Msp430TimerC.Msp430TimerB):../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:286">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:400">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:384">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA0" loc="39(Msp430TimerC.Msp430TimerA0):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:354">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:370">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA1" loc="39(Msp430TimerC.Msp430TimerA1):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:356">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:372">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA2" loc="39(Msp430TimerC.Msp430TimerA2):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:358">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:374">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB0" loc="39(Msp430TimerC.Msp430TimerB0):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:386">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:402">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB1" loc="39(Msp430TimerC.Msp430TimerB1):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:388">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:404">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB2" loc="39(Msp430TimerC.Msp430TimerB2):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:390">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:406">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB3" loc="39(Msp430TimerC.Msp430TimerB3):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:392">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:408">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB4" loc="39(Msp430TimerC.Msp430TimerB4):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:394">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:410">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB5" loc="39(Msp430TimerC.Msp430TimerB5):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:396">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:412">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB6" loc="39(Msp430TimerC.Msp430TimerB6):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:398">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:414">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerCommonP" loc="2:../../tos/chips/msp430/timer/Msp430TimerCommonP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="49:../../tos/chips/msp430/McuSleepC.nc" safe="">
      <documentation loc="33:../../tos/chips/msp430/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430. Code for low power calculation copied from older&#10; msp430hardware.h by Vlado Handziski, Joe Polastre, and Cory Sharp.&#10;&#10;&#10; @author Philip Levis&#10; @author Vlado Handziski&#10; @author Joe Polastre&#10; @author Cory Sharp&#10; @date   October 26, 2005&#10; @see  Please refer to TEP 112 for more information about this component and its&#10;          intended use.&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MoteClockP" loc="38:../../tos/platforms/telosb/MoteClockP.nc">
      <documentation loc="33:../../tos/platforms/telosb/MoteClockP.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="56:../../tos/system/RealMainP.nc" safe="">
      <documentation loc="49:../../tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:../../tos/system/TinySchedulerC.nc">
      <documentation loc="34:../../tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:../../tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="BasicC" loc="1:BasicC.nc">
      <module/>
    </component>
    <component qname="LedsC" loc="45:../../tos/system/LedsC.nc">
      <documentation loc="34:../../tos/system/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="44:../../tos/system/LedsP.nc" safe="">
      <documentation loc="35:../../tos/system/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="40:../../tos/platforms/telosa/PlatformLedsC.nc">
      <documentation loc="34:../../tos/platforms/telosa/PlatformLedsC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC" loc="45:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <documentation loc="35:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
        <short>&#10; HPL for the TI MSP430 family of microprocessors.</short>
        <long>&#10; HPL for the TI MSP430 family of microprocessors. This provides an&#10; abstraction for general-purpose I/O.&#10;&#10; @author Joe Polastre&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC.P10" loc="39(HplMsp430GeneralIOC.P10):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P11" loc="39(HplMsp430GeneralIOC.P11):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P12" loc="39(HplMsp430GeneralIOC.P12):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P13" loc="39(HplMsp430GeneralIOC.P13):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P14" loc="39(HplMsp430GeneralIOC.P14):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P15" loc="39(HplMsp430GeneralIOC.P15):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P16" loc="39(HplMsp430GeneralIOC.P16):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P17" loc="39(HplMsp430GeneralIOC.P17):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P20" loc="39(HplMsp430GeneralIOC.P20):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P21" loc="39(HplMsp430GeneralIOC.P21):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P22" loc="39(HplMsp430GeneralIOC.P22):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P23" loc="39(HplMsp430GeneralIOC.P23):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P24" loc="39(HplMsp430GeneralIOC.P24):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P25" loc="39(HplMsp430GeneralIOC.P25):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P26" loc="39(HplMsp430GeneralIOC.P26):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P27" loc="39(HplMsp430GeneralIOC.P27):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P30" loc="39(HplMsp430GeneralIOC.P30):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P31" loc="39(HplMsp430GeneralIOC.P31):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P32" loc="39(HplMsp430GeneralIOC.P32):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P33" loc="39(HplMsp430GeneralIOC.P33):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P34" loc="39(HplMsp430GeneralIOC.P34):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P35" loc="39(HplMsp430GeneralIOC.P35):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P36" loc="39(HplMsp430GeneralIOC.P36):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P37" loc="39(HplMsp430GeneralIOC.P37):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P40" loc="39(HplMsp430GeneralIOC.P40):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P41" loc="39(HplMsp430GeneralIOC.P41):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P42" loc="39(HplMsp430GeneralIOC.P42):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P43" loc="39(HplMsp430GeneralIOC.P43):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P44" loc="39(HplMsp430GeneralIOC.P44):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P45" loc="39(HplMsp430GeneralIOC.P45):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P46" loc="39(HplMsp430GeneralIOC.P46):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P47" loc="39(HplMsp430GeneralIOC.P47):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P50" loc="39(HplMsp430GeneralIOC.P50):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P51" loc="39(HplMsp430GeneralIOC.P51):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P52" loc="39(HplMsp430GeneralIOC.P52):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P53" loc="39(HplMsp430GeneralIOC.P53):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P54" loc="39(HplMsp430GeneralIOC.P54):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P55" loc="39(HplMsp430GeneralIOC.P55):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P56" loc="39(HplMsp430GeneralIOC.P56):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P57" loc="39(HplMsp430GeneralIOC.P57):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P60" loc="39(HplMsp430GeneralIOC.P60):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P61" loc="39(HplMsp430GeneralIOC.P61):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P62" loc="39(HplMsp430GeneralIOC.P62):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P63" loc="39(HplMsp430GeneralIOC.P63):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P64" loc="39(HplMsp430GeneralIOC.P64):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P65" loc="39(HplMsp430GeneralIOC.P65):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P66" loc="39(HplMsp430GeneralIOC.P66):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P67" loc="39(HplMsp430GeneralIOC.P67):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led0Impl" loc="42(PlatformLedsC.Led0Impl):../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led1Impl" loc="42(PlatformLedsC.Led1Impl):../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led2Impl" loc="42(PlatformLedsC.Led2Impl):../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="BasicAppC.Timer0" loc="44(BasicAppC.Timer0):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:../../tos/system/TimerMilliP.nc">
      <documentation loc="34:../../tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="43:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
        <short>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.</short>
        <long>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.  TimerMilliC in tos/system/ uses this component to&#10; allocate new timers.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C" loc="41(HilTimerMilliC.AlarmMilli32C):../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmMilli32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom" loc="41(HilTimerMilliC.AlarmMilli32C.AlarmFrom):../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer" loc="37(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer):../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzMapC" loc="48:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <documentation loc="34:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
        <short>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.</short>
        <long>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.  &#10;&#10; Platforms based on the MSP430 are * encouraged to copy in and&#10; override this file, presenting only the * hardware timers that are&#10; available for allocation on that platform.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm" loc="43(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm):../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x102d650c0"/>
            <typename><typedef-ref name="T32khz" ref="0x102d65430"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C" loc="41:../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/CounterMilli32C.nc">
        <short>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.</short>
        <long>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC" loc="41:../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
        <short>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.</short>
        <long>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC.Counter" loc="42(Msp430Counter32khzC.Counter):../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x102d650c0"/>
            <typename><typedef-ref name="T32khz" ref="0x102d65430"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C.Transform" loc="54(CounterMilli32C.Transform):../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x102d668c0"/>
            <typename><typedef-ref name="TMilli" ref="0x102d66c30"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x10247c920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x102d650c0"/>
            <typename><typedef-ref name="T32khz" ref="0x102d65430"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x10247c520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x10247c920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.Transform" loc="51(HilTimerMilliC.AlarmMilli32C.Transform):../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x102d668c0"/>
            <typename><typedef-ref name="TMilli" ref="0x102d66c30"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x10247c920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x102d650c0"/>
            <typename><typedef-ref name="T32khz" ref="0x102d65430"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x10247c520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):../../tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x102d668c0"/>
            <typename><typedef-ref name="TMilli" ref="0x102d66c30"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="46(HilTimerMilliC.VirtualizeTimerC):../../tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x102d668c0"/>
            <typename><typedef-ref name="TMilli" ref="0x102d66c30"/></typename>
          </type-tag>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x102d668c0"/>
            <typename><typedef-ref name="TMilli" ref="0x102d66c30"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="BasicAppC.Timer1" loc="44(BasicAppC.Timer1):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430TimerP" loc="39:../../tos/chips/msp430/timer/Msp430TimerP.nc" abstract="" safe="">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxIV_addr" ref="0x102c56890" loc="40:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x10247c520"/></typename>
          </type-int>
        </constant>
        <constant name="TxR_addr" ref="0x102c56c30" loc="41:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x10247c520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCTL_addr" ref="0x102c55020" loc="42:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x10247c520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIFG" ref="0x102c553a0" loc="43:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x10247c520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCLR" ref="0x102c55720" loc="44:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x10247c520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIE" ref="0x102c55a90" loc="45:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x10247c520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL0" ref="0x102c55e20" loc="46:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x10247c520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL1" ref="0x102c53200" loc="47:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x10247c520"/></typename>
          </type-int>
        </constant>
        <constant name="isClockSourceAsync" ref="0x102c535d0" loc="48:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10270c090"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430TimerCapComP" loc="39:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc" abstract="" safe="">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxCCTLx_addr" ref="0x102c7de70" loc="40:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x10247c520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCCRx_addr" ref="0x102c9c270" loc="41:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x10247c520"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOP" loc="39:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc" abstract="" safe="">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_in_addr" ref="0x102e649f0" loc="40:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_out_addr" ref="0x102e64da0" loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_dir_addr" ref="0x102e631a0" loc="42:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_sel_addr" ref="0x102e63550" loc="43:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="pin" ref="0x102e638c0" loc="44:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10247c160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430GpioC" loc="42:../../tos/chips/msp430/pins/Msp430GpioC.nc" abstract="" safe="">
      <documentation loc="33:../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:../../tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmMilli32C" loc="41:../../tos/chips/msp430/timer/AlarmMilli32C.nc" abstract="">
      <documentation loc="33:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Alarm32khz16C" loc="41:../../tos/chips/msp430/timer/Alarm32khz16C.nc" abstract="">
      <documentation loc="33:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzC" loc="37:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc" abstract="">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430AlarmC" loc="43:../../tos/chips/msp430/timer/Msp430AlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x103078cb0" loc="43:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
          <component-ref qname="Msp430AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x103078cb0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430CounterC" loc="42:../../tos/chips/msp430/timer/Msp430CounterC.nc" abstract="" safe="">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x10309ca30" loc="42:../../tos/chips/msp430/timer/Msp430CounterC.nc">
          <component-ref qname="Msp430CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x10309ca30"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:../../tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x1030b7570" loc="55:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x1030b7570"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x1030b7d40" loc="56:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x1030b7d40"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x1030b6160" loc="57:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x1030b6160"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x1030b6940" loc="58:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x1030b6940"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x1030b6d10" loc="59:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10247c160"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x1030b5540" loc="60:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x1030b5540"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformAlarmC" loc="51:../../tos/lib/timer/TransformAlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x1030a86d0" loc="52:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x1030a86d0"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x1030f8020" loc="53:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x1030f8020"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x1030f8410" loc="54:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x1030f8410"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x1030f8bf0" loc="55:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x1030f8bf0"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x1030f7020" loc="56:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10247c160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:../../tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x103125cc0" loc="46:../../tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x103125cc0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:../../tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x103157230" loc="46:../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x103157230"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x103157560" loc="46:../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:../../tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x1031aadd0" loc="46:../../tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x1031aadd0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="SoftwareInit" ref="0x102b91020" loc="58:../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x102b91020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x102b913a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x102b909a0" loc="57:../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x102b909a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x102b90d20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x102baa020" loc="42:../../tos/platforms/telosa/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x102baa020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x102baa3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x102ba60c0" loc="6:../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteInit" scoped="" ref="0x102ba60c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x102ba6440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x102ba7280" loc="4:../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x102ba7280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x102ba7600"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteClockInit" ref="0x102ba7990" loc="5:../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x102ba7990"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x102ba7d10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LedsInit" ref="0x102ba67a0" loc="7:../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LedsInit" scoped="" ref="0x102ba67a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x102ba6b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x102ba03f0" loc="2:../../tos/platforms/telosb/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x102ba03f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x102ba0770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MoteClockInit" ref="0x102ba8640" loc="39:../../tos/platforms/telosb/MoteClockC.nc">
      <component-ref qname="MoteClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x102ba8640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x102ba89c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x102bd9ae0" loc="40:../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x102bd9ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x102bc1980"/>
        <function-ref name="initTimerB" scoped="" ref="0x102bc1020"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x102bc11b0"/>
        <function-ref name="initTimerA" scoped="" ref="0x102bc1340"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x102bd9e60"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x102bc14d0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x102bc1660"/>
        <function-ref name="initClocks" scoped="" ref="0x102bc17f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x102bc4580" loc="39:../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x102bc4580"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x102bc4900"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x102be7020" loc="46:../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x102be7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x102be6020"/>
        <function-ref name="initTimerB" scoped="" ref="0x102be7530"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x102be76c0"/>
        <function-ref name="initTimerA" scoped="" ref="0x102be7850"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x102be73a0"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x102be79e0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x102be7b70"/>
        <function-ref name="initClocks" scoped="" ref="0x102be7d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x102be6360" loc="47:../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x102be6360"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x102be66e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x102be87e0" loc="45:../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x102be87e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x102be8b60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA2" ref="0x102c235a0" loc="42:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA2" scoped="" ref="0x102c235a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x102c23920"/>
        <function-ref name="getControl" scoped="" ref="0x102c23ab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x102c23c40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x102c23dd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x102c22020"/>
        <function-ref name="disableEvents" scoped="" ref="0x102c221b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x102c22340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x102c224d0"/>
        <function-ref name="setControl" scoped="" ref="0x102c22660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB0" ref="0x102c31020" loc="51:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB0" scoped="" ref="0x102c31020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x102c313a0"/>
        <function-ref name="getControl" scoped="" ref="0x102c31530"/>
        <function-ref name="enableEvents" scoped="" ref="0x102c316c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x102c31850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x102c319e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x102c31b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x102c31d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x102c30020"/>
        <function-ref name="setControl" scoped="" ref="0x102c301b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA1" ref="0x102c1a700" loc="47:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA1" scoped="" ref="0x102c1a700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102c1aa80"/>
        <function-ref name="setSynchronous" scoped="" ref="0x102c1ac10"/>
        <function-ref name="captured" scoped="" ref="0x102c1ada0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x102c39020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x102c391b0"/>
        <function-ref name="setEdge" scoped="" ref="0x102c39340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB3" ref="0x102c3ea20" loc="68:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB3" scoped="" ref="0x102c3ea20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102c3eda0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x102c3d020"/>
        <function-ref name="captured" scoped="" ref="0x102c3d1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x102c3d340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x102c3d4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x102c3d660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA1" ref="0x102c21aa0" loc="44:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA1" scoped="" ref="0x102c21aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102c21e20"/>
        <function-ref name="setEvent" scoped="" ref="0x102c20020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x102c201b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x102c20340"/>
        <function-ref name="fired" scoped="" ref="0x102c204d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB3" ref="0x102c44020" loc="61:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB3" scoped="" ref="0x102c44020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102c443a0"/>
        <function-ref name="setEvent" scoped="" ref="0x102c44530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x102c446c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x102c44850"/>
        <function-ref name="fired" scoped="" ref="0x102c449e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB6" ref="0x102c3ba20" loc="71:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB6" scoped="" ref="0x102c3ba20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102c3bda0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x102c3a020"/>
        <function-ref name="captured" scoped="" ref="0x102c3a1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x102c3a340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x102c3a4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x102c3a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB4" ref="0x102c2b5a0" loc="55:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB4" scoped="" ref="0x102c2b5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x102c2b920"/>
        <function-ref name="getControl" scoped="" ref="0x102c2bab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x102c2bc40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x102c2bdd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x102c2a020"/>
        <function-ref name="disableEvents" scoped="" ref="0x102c2a1b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x102c2a340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x102c2a4d0"/>
        <function-ref name="setControl" scoped="" ref="0x102c2a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA0" ref="0x102c24b10" loc="40:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA0" scoped="" ref="0x102c24b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x102c0b020"/>
        <function-ref name="getControl" scoped="" ref="0x102c0b1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x102c0b340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x102c0b4d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x102c0b660"/>
        <function-ref name="disableEvents" scoped="" ref="0x102c0b7f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x102c0b980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x102c0bb10"/>
        <function-ref name="setControl" scoped="" ref="0x102c0bca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB1" ref="0x102c40a20" loc="66:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB1" scoped="" ref="0x102c40a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102c40da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x102c3f020"/>
        <function-ref name="captured" scoped="" ref="0x102c3f1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x102c3f340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x102c3f4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x102c3f660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB1" ref="0x102c463e0" loc="59:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB1" scoped="" ref="0x102c463e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102c46760"/>
        <function-ref name="setEvent" scoped="" ref="0x102c468f0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x102c46a80"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x102c46c10"/>
        <function-ref name="fired" scoped="" ref="0x102c46da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB1" ref="0x102c305a0" loc="52:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB1" scoped="" ref="0x102c305a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x102c30a20"/>
        <function-ref name="getControl" scoped="" ref="0x102c30bb0"/>
        <function-ref name="enableEvents" scoped="" ref="0x102c30d40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x102c2f020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x102c2f1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x102c2f340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x102c2f4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x102c2f660"/>
        <function-ref name="setControl" scoped="" ref="0x102c2f7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA2" ref="0x102c39700" loc="48:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA2" scoped="" ref="0x102c39700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102c39a80"/>
        <function-ref name="setSynchronous" scoped="" ref="0x102c39c10"/>
        <function-ref name="captured" scoped="" ref="0x102c39da0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x102c33020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x102c331b0"/>
        <function-ref name="setEdge" scoped="" ref="0x102c33340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB4" ref="0x102c3da20" loc="69:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB4" scoped="" ref="0x102c3da20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102c3dda0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x102c3c020"/>
        <function-ref name="captured" scoped="" ref="0x102c3c1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x102c3c340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x102c3c4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x102c3c660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB2" ref="0x102c2fbe0" loc="53:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB2" scoped="" ref="0x102c2fbe0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x102c2e020"/>
        <function-ref name="getControl" scoped="" ref="0x102c2e1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x102c2e340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x102c2e4d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x102c2e660"/>
        <function-ref name="disableEvents" scoped="" ref="0x102c2e7f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x102c2e980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x102c2eb10"/>
        <function-ref name="setControl" scoped="" ref="0x102c2eca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA2" ref="0x102c20890" loc="45:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA2" scoped="" ref="0x102c20890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102c20c10"/>
        <function-ref name="setEvent" scoped="" ref="0x102c20da0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x102c1b020"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x102c1b1b0"/>
        <function-ref name="fired" scoped="" ref="0x102c1b340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerA" ref="0x102c14060" loc="39:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerA" scoped="" ref="0x102c14060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x102c143e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x102c14570"/>
        <function-ref name="enableEvents" scoped="" ref="0x102c14700"/>
        <function-ref name="get" scoped="" ref="0x102c14890"/>
        <function-ref name="disableEvents" scoped="" ref="0x102c14a20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x102c14bb0"/>
        <function-ref name="getMode" scoped="" ref="0x102c14d40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x102c13020"/>
        <function-ref name="overflow" scoped="" ref="0x102c131b0"/>
        <function-ref name="setMode" scoped="" ref="0x102c13340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x102c134d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB4" ref="0x102c44da0" loc="62:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB4" scoped="" ref="0x102c44da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102c43180"/>
        <function-ref name="setEvent" scoped="" ref="0x102c43310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x102c434a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x102c43630"/>
        <function-ref name="fired" scoped="" ref="0x102c437c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA1" ref="0x102c0a0c0" loc="41:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA1" scoped="" ref="0x102c0a0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x102c0a440"/>
        <function-ref name="getControl" scoped="" ref="0x102c0a5d0"/>
        <function-ref name="enableEvents" scoped="" ref="0x102c0a760"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x102c0a8f0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x102c0aa80"/>
        <function-ref name="disableEvents" scoped="" ref="0x102c0ac10"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x102c0ada0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x102c23020"/>
        <function-ref name="setControl" scoped="" ref="0x102c231b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB5" ref="0x102c2aa50" loc="56:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB5" scoped="" ref="0x102c2aa50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x102c2add0"/>
        <function-ref name="getControl" scoped="" ref="0x102c49020"/>
        <function-ref name="enableEvents" scoped="" ref="0x102c491b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x102c49340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x102c494d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x102c49660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x102c497f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x102c49980"/>
        <function-ref name="setControl" scoped="" ref="0x102c49b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA0" ref="0x102c34690" loc="46:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA0" scoped="" ref="0x102c34690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102c34a10"/>
        <function-ref name="setSynchronous" scoped="" ref="0x102c34ba0"/>
        <function-ref name="captured" scoped="" ref="0x102c34d30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x102c1a020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x102c1a1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x102c1a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB2" ref="0x102c3fa20" loc="67:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB2" scoped="" ref="0x102c3fa20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102c3fda0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x102c3e020"/>
        <function-ref name="captured" scoped="" ref="0x102c3e1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x102c3e340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x102c3e4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x102c3e660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA0" ref="0x102c1ccf0" loc="43:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA0" scoped="" ref="0x102c1ccf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102c210a0"/>
        <function-ref name="setEvent" scoped="" ref="0x102c21230"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x102c213c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x102c21550"/>
        <function-ref name="fired" scoped="" ref="0x102c216e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB2" ref="0x102c451f0" loc="60:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB2" scoped="" ref="0x102c451f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102c45570"/>
        <function-ref name="setEvent" scoped="" ref="0x102c45700"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x102c45890"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x102c45a20"/>
        <function-ref name="fired" scoped="" ref="0x102c45bb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB5" ref="0x102c3ca20" loc="70:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB5" scoped="" ref="0x102c3ca20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102c3cda0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x102c3b020"/>
        <function-ref name="captured" scoped="" ref="0x102c3b1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x102c3b340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x102c3b4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x102c3b660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB3" ref="0x102c2c0c0" loc="54:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB3" scoped="" ref="0x102c2c0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x102c2c440"/>
        <function-ref name="getControl" scoped="" ref="0x102c2c5d0"/>
        <function-ref name="enableEvents" scoped="" ref="0x102c2c760"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x102c2c8f0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x102c2ca80"/>
        <function-ref name="disableEvents" scoped="" ref="0x102c2cc10"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x102c2cda0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x102c2b020"/>
        <function-ref name="setControl" scoped="" ref="0x102c2b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerB" ref="0x102c336c0" loc="50:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerB" scoped="" ref="0x102c336c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x102c33a40"/>
        <function-ref name="setClockSource" scoped="" ref="0x102c33bd0"/>
        <function-ref name="enableEvents" scoped="" ref="0x102c33d60"/>
        <function-ref name="get" scoped="" ref="0x102c32020"/>
        <function-ref name="disableEvents" scoped="" ref="0x102c321b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x102c32340"/>
        <function-ref name="getMode" scoped="" ref="0x102c324d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x102c32660"/>
        <function-ref name="overflow" scoped="" ref="0x102c327f0"/>
        <function-ref name="setMode" scoped="" ref="0x102c32980"/>
        <function-ref name="setInputDivider" scoped="" ref="0x102c32b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB5" ref="0x102c43b80" loc="63:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB5" scoped="" ref="0x102c43b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102c42020"/>
        <function-ref name="setEvent" scoped="" ref="0x102c421b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x102c42340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x102c424d0"/>
        <function-ref name="fired" scoped="" ref="0x102c42660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB0" ref="0x102c41a20" loc="65:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB0" scoped="" ref="0x102c41a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102c41da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x102c40020"/>
        <function-ref name="captured" scoped="" ref="0x102c401b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x102c40340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x102c404d0"/>
        <function-ref name="setEdge" scoped="" ref="0x102c40660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB6" ref="0x102c42a20" loc="64:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB6" scoped="" ref="0x102c42a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102c41020"/>
        <function-ref name="setEvent" scoped="" ref="0x102c411b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x102c41340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x102c414d0"/>
        <function-ref name="fired" scoped="" ref="0x102c41660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB0" ref="0x102c47570" loc="58:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB0" scoped="" ref="0x102c47570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102c478f0"/>
        <function-ref name="setEvent" scoped="" ref="0x102c47a80"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x102c47c10"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x102c47da0"/>
        <function-ref name="fired" scoped="" ref="0x102c46020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB6" ref="0x102c48020" loc="57:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB6" scoped="" ref="0x102c48020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x102c483a0"/>
        <function-ref name="getControl" scoped="" ref="0x102c48530"/>
        <function-ref name="enableEvents" scoped="" ref="0x102c486c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x102c48850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x102c489e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x102c48b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x102c48d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x102c47020"/>
        <function-ref name="setControl" scoped="" ref="0x102c471b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x102c87aa0" loc="53:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x102c87aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x102c87e20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x102c87450" loc="52:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x102c87450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x102c877d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x102c86120" loc="54:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x102c86120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x102c864a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x102c88d80" loc="51:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x102c88d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10247c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x102c87180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x102c89540" loc="50:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x102c89540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x102c898c0"/>
        <function-ref name="setClockSource" scoped="" ref="0x102c89a50"/>
        <function-ref name="enableEvents" scoped="" ref="0x102c89be0"/>
        <function-ref name="get" scoped="" ref="0x102c89d70"/>
        <function-ref name="disableEvents" scoped="" ref="0x102c88020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x102c881b0"/>
        <function-ref name="getMode" scoped="" ref="0x102c88340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x102c884d0"/>
        <function-ref name="overflow" scoped="" ref="0x102c88660"/>
        <function-ref name="setMode" scoped="" ref="0x102c887f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x102c88980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x102c7f940" loc="53:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x102c7f940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x102c7fcc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x102c7f2f0" loc="52:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x102c7f2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x102c7f670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x102c7e020" loc="54:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x102c7e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x102c7e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x102c80bf0" loc="51:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x102c80bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10247c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x102c7f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x102c813e0" loc="50:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x102c813e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x102c81760"/>
        <function-ref name="setClockSource" scoped="" ref="0x102c818f0"/>
        <function-ref name="enableEvents" scoped="" ref="0x102c81a80"/>
        <function-ref name="get" scoped="" ref="0x102c81c10"/>
        <function-ref name="disableEvents" scoped="" ref="0x102c81da0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x102c80020"/>
        <function-ref name="getMode" scoped="" ref="0x102c801b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x102c80340"/>
        <function-ref name="overflow" scoped="" ref="0x102c804d0"/>
        <function-ref name="setMode" scoped="" ref="0x102c80660"/>
        <function-ref name="setInputDivider" scoped="" ref="0x102c807f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x102cdda90" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x102cdda90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102cdde10"/>
        <function-ref name="setSynchronous" scoped="" ref="0x102cdc020"/>
        <function-ref name="captured" scoped="" ref="0x102cdc1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x102cdc340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x102cdc4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x102cdc660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x102c9d9d0" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x102c9d9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x102c9dd50"/>
        <function-ref name="getControl" scoped="" ref="0x102cde020"/>
        <function-ref name="enableEvents" scoped="" ref="0x102cde1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x102cde340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x102cde4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x102cde660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x102cde7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x102cde980"/>
        <function-ref name="setControl" scoped="" ref="0x102cdeb10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x102cda020" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x102cda020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x102cda3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x102cdede0" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x102cdede0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102cdd180"/>
        <function-ref name="setEvent" scoped="" ref="0x102cdd310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x102cdd4a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x102cdd630"/>
        <function-ref name="fired" scoped="" ref="0x102cdd7c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x102cdc930" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x102cdc930"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x102cdccb0"/>
        <function-ref name="setClockSource" scoped="" ref="0x102cdce40"/>
        <function-ref name="enableEvents" scoped="" ref="0x102cdb020"/>
        <function-ref name="get" scoped="" ref="0x102cdb1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x102cdb340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x102cdb4d0"/>
        <function-ref name="getMode" scoped="" ref="0x102cdb660"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x102cdb7f0"/>
        <function-ref name="overflow" scoped="" ref="0x102cdb980"/>
        <function-ref name="setMode" scoped="" ref="0x102cdbb10"/>
        <function-ref name="setInputDivider" scoped="" ref="0x102cdbca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x102cd5160" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x102cd5160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102cd54e0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x102cd5670"/>
        <function-ref name="captured" scoped="" ref="0x102cd5800"/>
        <function-ref name="clearOverflow" scoped="" ref="0x102cd5990"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x102cd5b20"/>
        <function-ref name="setEdge" scoped="" ref="0x102cd5cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x102cd7020" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x102cd7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x102cd73a0"/>
        <function-ref name="getControl" scoped="" ref="0x102cd7530"/>
        <function-ref name="enableEvents" scoped="" ref="0x102cd76c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x102cd7850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x102cd79e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x102cd7b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x102cd7d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x102cd6020"/>
        <function-ref name="setControl" scoped="" ref="0x102cd61b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x102cd27a0" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x102cd27a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x102cd2b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x102cd6480" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x102cd6480"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102cd6800"/>
        <function-ref name="setEvent" scoped="" ref="0x102cd6990"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x102cd6b20"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x102cd6cb0"/>
        <function-ref name="fired" scoped="" ref="0x102cd6e40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x102cd4020" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x102cd4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x102cd43a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x102cd4530"/>
        <function-ref name="enableEvents" scoped="" ref="0x102cd46c0"/>
        <function-ref name="get" scoped="" ref="0x102cd4850"/>
        <function-ref name="disableEvents" scoped="" ref="0x102cd49e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x102cd4b70"/>
        <function-ref name="getMode" scoped="" ref="0x102cd4d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x102cd2020"/>
        <function-ref name="overflow" scoped="" ref="0x102cd21b0"/>
        <function-ref name="setMode" scoped="" ref="0x102cd2340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x102cd24d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x102cf07a0" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x102cf07a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102cf0b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x102cf0cb0"/>
        <function-ref name="captured" scoped="" ref="0x102cf0e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x102cef020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x102cef1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x102cef340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x102cf26d0" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x102cf26d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x102cf2a50"/>
        <function-ref name="getControl" scoped="" ref="0x102cf2be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x102cf2d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x102cf1020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x102cf11b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x102cf1340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x102cf14d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x102cf1660"/>
        <function-ref name="setControl" scoped="" ref="0x102cf17f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x102ceec50" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x102ceec50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x102ced020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x102cf1ac0" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x102cf1ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102cf1e40"/>
        <function-ref name="setEvent" scoped="" ref="0x102cf0020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x102cf01b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x102cf0340"/>
        <function-ref name="fired" scoped="" ref="0x102cf04d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x102cef610" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x102cef610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x102cef990"/>
        <function-ref name="setClockSource" scoped="" ref="0x102cefb20"/>
        <function-ref name="enableEvents" scoped="" ref="0x102cefcb0"/>
        <function-ref name="get" scoped="" ref="0x102cefe40"/>
        <function-ref name="disableEvents" scoped="" ref="0x102cee020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x102cee1b0"/>
        <function-ref name="getMode" scoped="" ref="0x102cee340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x102cee4d0"/>
        <function-ref name="overflow" scoped="" ref="0x102cee660"/>
        <function-ref name="setMode" scoped="" ref="0x102cee7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x102cee980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x102ce9cb0" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x102ce9cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102ce80a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x102ce8230"/>
        <function-ref name="captured" scoped="" ref="0x102ce83c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x102ce8550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x102ce86e0"/>
        <function-ref name="setEdge" scoped="" ref="0x102ce8870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x102cebb30" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x102cebb30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x102cea020"/>
        <function-ref name="getControl" scoped="" ref="0x102cea1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x102cea340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x102cea4d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x102cea660"/>
        <function-ref name="disableEvents" scoped="" ref="0x102cea7f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x102cea980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x102ceab10"/>
        <function-ref name="setControl" scoped="" ref="0x102ceaca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x102ce62f0" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x102ce62f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x102ce6670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x102ce9020" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x102ce9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102ce93a0"/>
        <function-ref name="setEvent" scoped="" ref="0x102ce9530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x102ce96c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x102ce9850"/>
        <function-ref name="fired" scoped="" ref="0x102ce99e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x102ce8b40" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x102ce8b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x102ce7020"/>
        <function-ref name="setClockSource" scoped="" ref="0x102ce71b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x102ce7340"/>
        <function-ref name="get" scoped="" ref="0x102ce74d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x102ce7660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x102ce77f0"/>
        <function-ref name="getMode" scoped="" ref="0x102ce7980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x102ce7b10"/>
        <function-ref name="overflow" scoped="" ref="0x102ce7ca0"/>
        <function-ref name="setMode" scoped="" ref="0x102ce7e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x102ce6020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x102d042f0" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x102d042f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102d04670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x102d04800"/>
        <function-ref name="captured" scoped="" ref="0x102d04990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x102d04b20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x102d04cb0"/>
        <function-ref name="setEdge" scoped="" ref="0x102d04e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x102ce2220" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x102ce2220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x102ce25a0"/>
        <function-ref name="getControl" scoped="" ref="0x102ce2730"/>
        <function-ref name="enableEvents" scoped="" ref="0x102ce28c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x102ce2a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x102ce2be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x102ce2d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x102d05020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x102d051b0"/>
        <function-ref name="setControl" scoped="" ref="0x102d05340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x102d027a0" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x102d027a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x102d02b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x102d05610" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x102d05610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102d05990"/>
        <function-ref name="setEvent" scoped="" ref="0x102d05b20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x102d05cb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x102d05e40"/>
        <function-ref name="fired" scoped="" ref="0x102d04020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x102d03160" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x102d03160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x102d034e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x102d03670"/>
        <function-ref name="enableEvents" scoped="" ref="0x102d03800"/>
        <function-ref name="get" scoped="" ref="0x102d03990"/>
        <function-ref name="disableEvents" scoped="" ref="0x102d03b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x102d03cb0"/>
        <function-ref name="getMode" scoped="" ref="0x102d03e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x102d02020"/>
        <function-ref name="overflow" scoped="" ref="0x102d021b0"/>
        <function-ref name="setMode" scoped="" ref="0x102d02340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x102d024d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x102cfd7a0" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x102cfd7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102cfdb20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x102cfdcb0"/>
        <function-ref name="captured" scoped="" ref="0x102cfde40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x102cfc020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x102cfc1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x102cfc340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x102cff6d0" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x102cff6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x102cffa50"/>
        <function-ref name="getControl" scoped="" ref="0x102cffbe0"/>
        <function-ref name="enableEvents" scoped="" ref="0x102cffd70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x102cfe020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x102cfe1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x102cfe340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x102cfe4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x102cfe660"/>
        <function-ref name="setControl" scoped="" ref="0x102cfe7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x102cfbc50" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x102cfbc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x102cf9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x102cfeac0" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x102cfeac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102cfee40"/>
        <function-ref name="setEvent" scoped="" ref="0x102cfd020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x102cfd1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x102cfd340"/>
        <function-ref name="fired" scoped="" ref="0x102cfd4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x102cfc610" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x102cfc610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x102cfc990"/>
        <function-ref name="setClockSource" scoped="" ref="0x102cfcb20"/>
        <function-ref name="enableEvents" scoped="" ref="0x102cfccb0"/>
        <function-ref name="get" scoped="" ref="0x102cfce40"/>
        <function-ref name="disableEvents" scoped="" ref="0x102cfb020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x102cfb1b0"/>
        <function-ref name="getMode" scoped="" ref="0x102cfb340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x102cfb4d0"/>
        <function-ref name="overflow" scoped="" ref="0x102cfb660"/>
        <function-ref name="setMode" scoped="" ref="0x102cfb7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x102cfb980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x102cf5cb0" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x102cf5cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102cf40a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x102cf4230"/>
        <function-ref name="captured" scoped="" ref="0x102cf43c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x102cf4550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x102cf46e0"/>
        <function-ref name="setEdge" scoped="" ref="0x102cf4870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x102cf7b30" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x102cf7b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x102cf6020"/>
        <function-ref name="getControl" scoped="" ref="0x102cf61b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x102cf6340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x102cf64d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x102cf6660"/>
        <function-ref name="disableEvents" scoped="" ref="0x102cf67f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x102cf6980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x102cf6b10"/>
        <function-ref name="setControl" scoped="" ref="0x102cf6ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x102d162f0" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x102d162f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x102d16670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x102cf5020" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x102cf5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102cf53a0"/>
        <function-ref name="setEvent" scoped="" ref="0x102cf5530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x102cf56c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x102cf5850"/>
        <function-ref name="fired" scoped="" ref="0x102cf59e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x102cf4b40" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x102cf4b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x102d17020"/>
        <function-ref name="setClockSource" scoped="" ref="0x102d171b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x102d17340"/>
        <function-ref name="get" scoped="" ref="0x102d174d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x102d17660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x102d177f0"/>
        <function-ref name="getMode" scoped="" ref="0x102d17980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x102d17b10"/>
        <function-ref name="overflow" scoped="" ref="0x102d17ca0"/>
        <function-ref name="setMode" scoped="" ref="0x102d17e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x102d16020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x102d112f0" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x102d112f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102d11670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x102d11800"/>
        <function-ref name="captured" scoped="" ref="0x102d11990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x102d11b20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x102d11cb0"/>
        <function-ref name="setEdge" scoped="" ref="0x102d11e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x102d13220" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x102d13220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x102d135a0"/>
        <function-ref name="getControl" scoped="" ref="0x102d13730"/>
        <function-ref name="enableEvents" scoped="" ref="0x102d138c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x102d13a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x102d13be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x102d13d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x102d12020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x102d121b0"/>
        <function-ref name="setControl" scoped="" ref="0x102d12340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x102d0f7a0" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x102d0f7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x102d0fb20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x102d12610" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x102d12610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102d12990"/>
        <function-ref name="setEvent" scoped="" ref="0x102d12b20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x102d12cb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x102d12e40"/>
        <function-ref name="fired" scoped="" ref="0x102d11020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x102d10160" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x102d10160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x102d104e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x102d10670"/>
        <function-ref name="enableEvents" scoped="" ref="0x102d10800"/>
        <function-ref name="get" scoped="" ref="0x102d10990"/>
        <function-ref name="disableEvents" scoped="" ref="0x102d10b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x102d10cb0"/>
        <function-ref name="getMode" scoped="" ref="0x102d10e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x102d0f020"/>
        <function-ref name="overflow" scoped="" ref="0x102d0f1b0"/>
        <function-ref name="setMode" scoped="" ref="0x102d0f340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x102d0f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x102d097a0" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x102d097a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102d09b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x102d09cb0"/>
        <function-ref name="captured" scoped="" ref="0x102d09e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x102d08020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x102d081b0"/>
        <function-ref name="setEdge" scoped="" ref="0x102d08340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x102d0b6d0" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x102d0b6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x102d0ba50"/>
        <function-ref name="getControl" scoped="" ref="0x102d0bbe0"/>
        <function-ref name="enableEvents" scoped="" ref="0x102d0bd70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x102d0a020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x102d0a1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x102d0a340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x102d0a4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x102d0a660"/>
        <function-ref name="setControl" scoped="" ref="0x102d0a7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x102d07c50" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x102d07c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x102d06020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x102d0aac0" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x102d0aac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102d0ae40"/>
        <function-ref name="setEvent" scoped="" ref="0x102d09020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x102d091b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x102d09340"/>
        <function-ref name="fired" scoped="" ref="0x102d094d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x102d08610" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x102d08610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x102d08990"/>
        <function-ref name="setClockSource" scoped="" ref="0x102d08b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x102d08cb0"/>
        <function-ref name="get" scoped="" ref="0x102d08e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x102d07020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x102d071b0"/>
        <function-ref name="getMode" scoped="" ref="0x102d07340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x102d074d0"/>
        <function-ref name="overflow" scoped="" ref="0x102d07660"/>
        <function-ref name="setMode" scoped="" ref="0x102d077f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x102d07980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x102d26cb0" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x102d26cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102d250a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x102d25230"/>
        <function-ref name="captured" scoped="" ref="0x102d253c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x102d25550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x102d256e0"/>
        <function-ref name="setEdge" scoped="" ref="0x102d25870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x102d28b30" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x102d28b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x102d27020"/>
        <function-ref name="getControl" scoped="" ref="0x102d271b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x102d27340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x102d274d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x102d27660"/>
        <function-ref name="disableEvents" scoped="" ref="0x102d277f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x102d27980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x102d27b10"/>
        <function-ref name="setControl" scoped="" ref="0x102d27ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x102d232f0" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x102d232f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x102d23670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x102d26020" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x102d26020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x102d263a0"/>
        <function-ref name="setEvent" scoped="" ref="0x102d26530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x102d266c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x102d26850"/>
        <function-ref name="fired" scoped="" ref="0x102d269e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x102d25b40" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x102d25b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x102d24020"/>
        <function-ref name="setClockSource" scoped="" ref="0x102d241b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x102d24340"/>
        <function-ref name="get" scoped="" ref="0x102d244d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x102d24660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x102d247f0"/>
        <function-ref name="getMode" scoped="" ref="0x102d24980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x102d24b10"/>
        <function-ref name="overflow" scoped="" ref="0x102d24ca0"/>
        <function-ref name="setMode" scoped="" ref="0x102d24e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x102d23020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB1" ref="0x102d1c240" loc="7:../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB1" scoped="" ref="0x102d1c240"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x102d1c5c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA0" ref="0x102d21a90" loc="4:../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA0" scoped="" ref="0x102d21a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x102d21e10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA1" ref="0x102d1d260" loc="5:../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA1" scoped="" ref="0x102d1d260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x102d1d5e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB0" ref="0x102d1d9f0" loc="6:../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB0" scoped="" ref="0x102d1d9f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x102d1dd70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x102a8f510" loc="55:../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x102a8f510"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x102a8f890"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x102773760" loc="51:../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x102773760"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x102773ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x102818cc0" loc="52:../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerState" scoped="" ref="0x102818cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x1028ad0a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430ClockInit" ref="0x102bc2b40" loc="39:../../tos/platforms/telosb/MoteClockP.nc">
      <component-ref qname="MoteClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x102bc2b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x102d5bb10"/>
        <function-ref name="initTimerB" scoped="" ref="0x102d5b1b0"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x102d5b340"/>
        <function-ref name="initTimerA" scoped="" ref="0x102d5b4d0"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x102d5b020"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x102d5b660"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x102d5b7f0"/>
        <function-ref name="initClocks" scoped="" ref="0x102d5b980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x102d74dc0" loc="60:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x102d74dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x102d73180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x102d5c590" loc="57:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x102d5c590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x102d5c910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x102d746c0" loc="59:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PlatformInit" scoped="" ref="0x102d746c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x102d74a40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x102d5cc00" loc="58:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x102d5cc00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x102d74020"/>
        <function-ref name="taskLoop" scoped="" ref="0x102d741b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x102d74340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x10269f1d0" loc="48:../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x10269f1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10247c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x10269f550"/>
        <function-ref name="runTask" scoped="" ref="0x10269f6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x1027133a0" loc="47:../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x1027133a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x102713720"/>
        <function-ref name="taskLoop" scoped="" ref="0x1027138b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x102713a40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x102b6a320" loc="56:../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x102b6a320"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10247c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x102b6a6a0"/>
        <function-ref name="runTask" scoped="" ref="0x102b6a830"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x102b66990" loc="57:../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x102b66990"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x102b66d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x102b6b420" loc="55:../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x102b6b420"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x102b6b7a0"/>
        <function-ref name="taskLoop" scoped="" ref="0x102b6b930"/>
        <function-ref name="runNextTask" scoped="" ref="0x102b6bac0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer0" ref="0x102d817f0" loc="6:BasicC.nc">
      <component-ref qname="BasicC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer0" scoped="" ref="0x102d817f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x102d668c0"/>
            <typename><typedef-ref name="TMilli" ref="0x102d66c30"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x102d7fcf0"/>
        <function-ref name="fired" scoped="" ref="0x102d67300"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x102d7f0d0"/>
        <function-ref name="isOneShot" scoped="" ref="0x102d67c00"/>
        <function-ref name="getdt" scoped="" ref="0x102d7e660"/>
        <function-ref name="gett0" scoped="" ref="0x102d7e1e0"/>
        <function-ref name="isRunning" scoped="" ref="0x102d67780"/>
        <function-ref name="startPeriodic" scoped="" ref="0x102d68480"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x102d7f6e0"/>
        <function-ref name="startOneShot" scoped="" ref="0x102d68950"/>
        <function-ref name="stop" scoped="" ref="0x102d68e20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x102b934d0" loc="5:BasicC.nc">
      <component-ref qname="BasicC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x102b934d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x102b93850"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer1" ref="0x102d7ec70" loc="7:BasicC.nc">
      <component-ref qname="BasicC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer1" scoped="" ref="0x102d7ec70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x102d668c0"/>
            <typename><typedef-ref name="TMilli" ref="0x102d66c30"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x102d79170"/>
        <function-ref name="fired" scoped="" ref="0x102d7c720"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x102d7a510"/>
        <function-ref name="isOneShot" scoped="" ref="0x102d7a090"/>
        <function-ref name="getdt" scoped="" ref="0x102d79a70"/>
        <function-ref name="gett0" scoped="" ref="0x102d795f0"/>
        <function-ref name="isRunning" scoped="" ref="0x102d7cba0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x102d7d8a0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x102d7ab20"/>
        <function-ref name="startOneShot" scoped="" ref="0x102d7dd70"/>
        <function-ref name="stop" scoped="" ref="0x102d7c2a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x102d92a80" loc="8:BasicC.nc">
      <component-ref qname="BasicC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x102d92a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x102d92e00"/>
        <function-ref name="led0Toggle" scoped="" ref="0x102d9d020"/>
        <function-ref name="led1On" scoped="" ref="0x102d9d1b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x102d9d340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x102d9d4d0"/>
        <function-ref name="get" scoped="" ref="0x102d9d660"/>
        <function-ref name="led1Off" scoped="" ref="0x102d9d7f0"/>
        <function-ref name="led2Off" scoped="" ref="0x102d9de30"/>
        <function-ref name="set" scoped="" ref="0x102d9d980"/>
        <function-ref name="led0On" scoped="" ref="0x102d9db10"/>
        <function-ref name="led2On" scoped="" ref="0x102d9dca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x102d69da0" loc="46:../../tos/system/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x102d69da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x102daf180"/>
        <function-ref name="led0Toggle" scoped="" ref="0x102daf310"/>
        <function-ref name="led1On" scoped="" ref="0x102daf4a0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x102daf630"/>
        <function-ref name="led2Toggle" scoped="" ref="0x102daf7c0"/>
        <function-ref name="get" scoped="" ref="0x102daf950"/>
        <function-ref name="led1Off" scoped="" ref="0x102dafae0"/>
        <function-ref name="led2Off" scoped="" ref="0x102dae1b0"/>
        <function-ref name="set" scoped="" ref="0x102dafc70"/>
        <function-ref name="led0On" scoped="" ref="0x102dafe00"/>
        <function-ref name="led2On" scoped="" ref="0x102dae020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x102da2ce0" loc="50:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x102da2ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102da70a0"/>
        <function-ref name="isInput" scoped="" ref="0x102da7230"/>
        <function-ref name="toggle" scoped="" ref="0x102da73c0"/>
        <function-ref name="isOutput" scoped="" ref="0x102da7550"/>
        <function-ref name="get" scoped="" ref="0x102da76e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102da7870"/>
        <function-ref name="set" scoped="" ref="0x102da7a00"/>
        <function-ref name="clr" scoped="" ref="0x102da7b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x102daa110" loc="46:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x102daa110"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x102daa490"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x102da6020" loc="51:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x102da6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102da63a0"/>
        <function-ref name="isInput" scoped="" ref="0x102da6530"/>
        <function-ref name="toggle" scoped="" ref="0x102da66c0"/>
        <function-ref name="isOutput" scoped="" ref="0x102da6850"/>
        <function-ref name="get" scoped="" ref="0x102da69e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102da6b70"/>
        <function-ref name="set" scoped="" ref="0x102da6d00"/>
        <function-ref name="clr" scoped="" ref="0x102da1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x102daa710" loc="47:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x102daa710"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x102daaa90"/>
        <function-ref name="led0Toggle" scoped="" ref="0x102daac20"/>
        <function-ref name="led1On" scoped="" ref="0x102daadb0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x102da9020"/>
        <function-ref name="led2Toggle" scoped="" ref="0x102da91b0"/>
        <function-ref name="get" scoped="" ref="0x102da9340"/>
        <function-ref name="led1Off" scoped="" ref="0x102da94d0"/>
        <function-ref name="led2Off" scoped="" ref="0x102da9b10"/>
        <function-ref name="set" scoped="" ref="0x102da9660"/>
        <function-ref name="led0On" scoped="" ref="0x102da97f0"/>
        <function-ref name="led2On" scoped="" ref="0x102da9980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x102da1340" loc="52:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x102da1340"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102da16c0"/>
        <function-ref name="isInput" scoped="" ref="0x102da1850"/>
        <function-ref name="toggle" scoped="" ref="0x102da19e0"/>
        <function-ref name="isOutput" scoped="" ref="0x102da1b70"/>
        <function-ref name="get" scoped="" ref="0x102da1d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x102da0020"/>
        <function-ref name="set" scoped="" ref="0x102da01b0"/>
        <function-ref name="clr" scoped="" ref="0x102da0340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x102dab960" loc="41:../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x102dab960"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102dabce0"/>
        <function-ref name="isInput" scoped="" ref="0x102dabe70"/>
        <function-ref name="toggle" scoped="" ref="0x102dd0030"/>
        <function-ref name="isOutput" scoped="" ref="0x102dd01c0"/>
        <function-ref name="get" scoped="" ref="0x102dd0350"/>
        <function-ref name="makeOutput" scoped="" ref="0x102dd04e0"/>
        <function-ref name="set" scoped="" ref="0x102dd0670"/>
        <function-ref name="clr" scoped="" ref="0x102dd0800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x102dd0b60" loc="42:../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x102dd0b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102dcf020"/>
        <function-ref name="isInput" scoped="" ref="0x102dcf1b0"/>
        <function-ref name="toggle" scoped="" ref="0x102dcf340"/>
        <function-ref name="isOutput" scoped="" ref="0x102dcf4d0"/>
        <function-ref name="get" scoped="" ref="0x102dcf660"/>
        <function-ref name="makeOutput" scoped="" ref="0x102dcf7f0"/>
        <function-ref name="set" scoped="" ref="0x102dcf980"/>
        <function-ref name="clr" scoped="" ref="0x102dcfb10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x102dcd020" loc="44:../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x102dcd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x102dcd3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x102dcfe70" loc="43:../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x102dcfe70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102dce220"/>
        <function-ref name="isInput" scoped="" ref="0x102dce3b0"/>
        <function-ref name="toggle" scoped="" ref="0x102dce540"/>
        <function-ref name="isOutput" scoped="" ref="0x102dce6d0"/>
        <function-ref name="get" scoped="" ref="0x102dce860"/>
        <function-ref name="makeOutput" scoped="" ref="0x102dce9f0"/>
        <function-ref name="set" scoped="" ref="0x102dceb80"/>
        <function-ref name="clr" scoped="" ref="0x102dced10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x102dde020" loc="53:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x102dde020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102dde3a0"/>
        <function-ref name="isInput" scoped="" ref="0x102dde530"/>
        <function-ref name="setResistor" scoped="" ref="0x102dde6c0"/>
        <function-ref name="toggle" scoped="" ref="0x102dde850"/>
        <function-ref name="isOutput" scoped="" ref="0x102dde9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x102ddeb70"/>
        <function-ref name="makeOutput" scoped="" ref="0x102dded00"/>
        <function-ref name="get" scoped="" ref="0x102ddd020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102ddd1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x102ddd340"/>
        <function-ref name="set" scoped="" ref="0x102ddd4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102ddd660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102ddd7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102ddda80"/>
        <function-ref name="clr" scoped="" ref="0x102dddc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x102df0020" loc="66:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x102df0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102df03a0"/>
        <function-ref name="isInput" scoped="" ref="0x102df0530"/>
        <function-ref name="setResistor" scoped="" ref="0x102df06c0"/>
        <function-ref name="toggle" scoped="" ref="0x102df0850"/>
        <function-ref name="isOutput" scoped="" ref="0x102df09e0"/>
        <function-ref name="getResistor" scoped="" ref="0x102df0b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x102df0d00"/>
        <function-ref name="get" scoped="" ref="0x102def020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102def1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x102def340"/>
        <function-ref name="set" scoped="" ref="0x102def4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102def660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102def7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102defa80"/>
        <function-ref name="clr" scoped="" ref="0x102defc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SDA" ref="0x102e47560" loc="145:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SDA" scoped="" ref="0x102e47560"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e478e0"/>
        <function-ref name="isInput" scoped="" ref="0x102e47a70"/>
        <function-ref name="setResistor" scoped="" ref="0x102e47c00"/>
        <function-ref name="toggle" scoped="" ref="0x102e47d90"/>
        <function-ref name="isOutput" scoped="" ref="0x102e46020"/>
        <function-ref name="getResistor" scoped="" ref="0x102e461b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e46340"/>
        <function-ref name="get" scoped="" ref="0x102e464d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e46660"/>
        <function-ref name="getRaw" scoped="" ref="0x102e467f0"/>
        <function-ref name="set" scoped="" ref="0x102e46980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e46b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e46ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e45020"/>
        <function-ref name="clr" scoped="" ref="0x102e451b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC6" ref="0x102e73570" loc="165:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC6" scoped="" ref="0x102e73570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e738f0"/>
        <function-ref name="isInput" scoped="" ref="0x102e73a80"/>
        <function-ref name="setResistor" scoped="" ref="0x102e73c10"/>
        <function-ref name="toggle" scoped="" ref="0x102e73da0"/>
        <function-ref name="isOutput" scoped="" ref="0x102e72020"/>
        <function-ref name="getResistor" scoped="" ref="0x102e721b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e72340"/>
        <function-ref name="get" scoped="" ref="0x102e724d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e72660"/>
        <function-ref name="getRaw" scoped="" ref="0x102e727f0"/>
        <function-ref name="set" scoped="" ref="0x102e72980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e72b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e72ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e71020"/>
        <function-ref name="clr" scoped="" ref="0x102e711b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI0" ref="0x102e45580" loc="146:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI0" scoped="" ref="0x102e45580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e45900"/>
        <function-ref name="isInput" scoped="" ref="0x102e45a90"/>
        <function-ref name="setResistor" scoped="" ref="0x102e45c20"/>
        <function-ref name="toggle" scoped="" ref="0x102e45db0"/>
        <function-ref name="isOutput" scoped="" ref="0x102e44020"/>
        <function-ref name="getResistor" scoped="" ref="0x102e441b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e44340"/>
        <function-ref name="get" scoped="" ref="0x102e444d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e44660"/>
        <function-ref name="getRaw" scoped="" ref="0x102e447f0"/>
        <function-ref name="set" scoped="" ref="0x102e44980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e44b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e44ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e43020"/>
        <function-ref name="clr" scoped="" ref="0x102e431b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port30" ref="0x102dec020" loc="71:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port30" scoped="" ref="0x102dec020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102dec3a0"/>
        <function-ref name="isInput" scoped="" ref="0x102dec530"/>
        <function-ref name="setResistor" scoped="" ref="0x102dec6c0"/>
        <function-ref name="toggle" scoped="" ref="0x102dec850"/>
        <function-ref name="isOutput" scoped="" ref="0x102dec9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x102decb70"/>
        <function-ref name="makeOutput" scoped="" ref="0x102decd00"/>
        <function-ref name="get" scoped="" ref="0x102deb020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102deb1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x102deb340"/>
        <function-ref name="set" scoped="" ref="0x102deb4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102deb660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102deb7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102deba80"/>
        <function-ref name="clr" scoped="" ref="0x102debc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port42" ref="0x102e00200" loc="84:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port42" scoped="" ref="0x102e00200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e00580"/>
        <function-ref name="isInput" scoped="" ref="0x102e00710"/>
        <function-ref name="setResistor" scoped="" ref="0x102e008a0"/>
        <function-ref name="toggle" scoped="" ref="0x102e00a30"/>
        <function-ref name="isOutput" scoped="" ref="0x102e00bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x102e00d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x102dff020"/>
        <function-ref name="get" scoped="" ref="0x102dff1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102dff340"/>
        <function-ref name="getRaw" scoped="" ref="0x102dff4d0"/>
        <function-ref name="set" scoped="" ref="0x102dff660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102dff7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102dff980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102dffc10"/>
        <function-ref name="clr" scoped="" ref="0x102dffda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port54" ref="0x102e13200" loc="97:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port54" scoped="" ref="0x102e13200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e13580"/>
        <function-ref name="isInput" scoped="" ref="0x102e13710"/>
        <function-ref name="setResistor" scoped="" ref="0x102e138a0"/>
        <function-ref name="toggle" scoped="" ref="0x102e13a30"/>
        <function-ref name="isOutput" scoped="" ref="0x102e13bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x102e13d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e12020"/>
        <function-ref name="get" scoped="" ref="0x102e121b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e12340"/>
        <function-ref name="getRaw" scoped="" ref="0x102e124d0"/>
        <function-ref name="set" scoped="" ref="0x102e12660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e127f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e12980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e12c10"/>
        <function-ref name="clr" scoped="" ref="0x102e12da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port64" ref="0x102e2b200" loc="108:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port64" scoped="" ref="0x102e2b200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e2b580"/>
        <function-ref name="isInput" scoped="" ref="0x102e2b710"/>
        <function-ref name="setResistor" scoped="" ref="0x102e2b8a0"/>
        <function-ref name="toggle" scoped="" ref="0x102e2ba30"/>
        <function-ref name="isOutput" scoped="" ref="0x102e2bbc0"/>
        <function-ref name="getResistor" scoped="" ref="0x102e2bd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e2a020"/>
        <function-ref name="get" scoped="" ref="0x102e2a1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e2a340"/>
        <function-ref name="getRaw" scoped="" ref="0x102e2a4d0"/>
        <function-ref name="set" scoped="" ref="0x102e2a660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e2a7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e2a980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e2ac10"/>
        <function-ref name="clr" scoped="" ref="0x102e2ada0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD0" ref="0x102e3f580" loc="149:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD0" scoped="" ref="0x102e3f580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e3f900"/>
        <function-ref name="isInput" scoped="" ref="0x102e3fa90"/>
        <function-ref name="setResistor" scoped="" ref="0x102e3fc20"/>
        <function-ref name="toggle" scoped="" ref="0x102e3fdb0"/>
        <function-ref name="isOutput" scoped="" ref="0x102e3e020"/>
        <function-ref name="getResistor" scoped="" ref="0x102e3e1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e3e340"/>
        <function-ref name="get" scoped="" ref="0x102e3e4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e3e660"/>
        <function-ref name="getRaw" scoped="" ref="0x102e3e7f0"/>
        <function-ref name="set" scoped="" ref="0x102e3e980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e3eb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e3eca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e3d020"/>
        <function-ref name="clr" scoped="" ref="0x102e3d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC0" ref="0x102e56570" loc="159:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC0" scoped="" ref="0x102e56570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e568f0"/>
        <function-ref name="isInput" scoped="" ref="0x102e56a80"/>
        <function-ref name="setResistor" scoped="" ref="0x102e56c10"/>
        <function-ref name="toggle" scoped="" ref="0x102e56da0"/>
        <function-ref name="isOutput" scoped="" ref="0x102e55020"/>
        <function-ref name="getResistor" scoped="" ref="0x102e551b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e55340"/>
        <function-ref name="get" scoped="" ref="0x102e554d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e55660"/>
        <function-ref name="getRaw" scoped="" ref="0x102e557f0"/>
        <function-ref name="set" scoped="" ref="0x102e55980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e55b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e55ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e54020"/>
        <function-ref name="clr" scoped="" ref="0x102e541b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSIN" ref="0x102e6b580" loc="171:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSIN" scoped="" ref="0x102e6b580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e6b900"/>
        <function-ref name="isInput" scoped="" ref="0x102e6ba90"/>
        <function-ref name="setResistor" scoped="" ref="0x102e6bc20"/>
        <function-ref name="toggle" scoped="" ref="0x102e6bdb0"/>
        <function-ref name="isOutput" scoped="" ref="0x102e6a020"/>
        <function-ref name="getResistor" scoped="" ref="0x102e6a1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e6a340"/>
        <function-ref name="get" scoped="" ref="0x102e6a4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e6a660"/>
        <function-ref name="getRaw" scoped="" ref="0x102e6a7f0"/>
        <function-ref name="set" scoped="" ref="0x102e6a980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e6ab10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e6aca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e69020"/>
        <function-ref name="clr" scoped="" ref="0x102e691b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x102dd8020" loc="56:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x102dd8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102dd83a0"/>
        <function-ref name="isInput" scoped="" ref="0x102dd8530"/>
        <function-ref name="setResistor" scoped="" ref="0x102dd86c0"/>
        <function-ref name="toggle" scoped="" ref="0x102dd8850"/>
        <function-ref name="isOutput" scoped="" ref="0x102dd89e0"/>
        <function-ref name="getResistor" scoped="" ref="0x102dd8b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x102dd8d00"/>
        <function-ref name="get" scoped="" ref="0x102dd7020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102dd71b0"/>
        <function-ref name="getRaw" scoped="" ref="0x102dd7340"/>
        <function-ref name="set" scoped="" ref="0x102dd74d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102dd7660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102dd77f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102dd7a80"/>
        <function-ref name="clr" scoped="" ref="0x102dd7c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD0" ref="0x102e3d580" loc="150:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD0" scoped="" ref="0x102e3d580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e3d900"/>
        <function-ref name="isInput" scoped="" ref="0x102e3da90"/>
        <function-ref name="setResistor" scoped="" ref="0x102e3dc20"/>
        <function-ref name="toggle" scoped="" ref="0x102e3ddb0"/>
        <function-ref name="isOutput" scoped="" ref="0x102e3c020"/>
        <function-ref name="getResistor" scoped="" ref="0x102e3c1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e3c340"/>
        <function-ref name="get" scoped="" ref="0x102e3c4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e3c660"/>
        <function-ref name="getRaw" scoped="" ref="0x102e3c7f0"/>
        <function-ref name="set" scoped="" ref="0x102e3c980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e3cb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e3cca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e3b020"/>
        <function-ref name="clr" scoped="" ref="0x102e3b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x102dfb020" loc="61:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x102dfb020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102dfb3a0"/>
        <function-ref name="isInput" scoped="" ref="0x102dfb530"/>
        <function-ref name="setResistor" scoped="" ref="0x102dfb6c0"/>
        <function-ref name="toggle" scoped="" ref="0x102dfb850"/>
        <function-ref name="isOutput" scoped="" ref="0x102dfb9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x102dfbb70"/>
        <function-ref name="makeOutput" scoped="" ref="0x102dfbd00"/>
        <function-ref name="get" scoped="" ref="0x102dfa020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102dfa1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x102dfa340"/>
        <function-ref name="set" scoped="" ref="0x102dfa4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102dfa660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102dfa7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102dfaa80"/>
        <function-ref name="clr" scoped="" ref="0x102dfac10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port33" ref="0x102e0e020" loc="74:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port33" scoped="" ref="0x102e0e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e0e3a0"/>
        <function-ref name="isInput" scoped="" ref="0x102e0e530"/>
        <function-ref name="setResistor" scoped="" ref="0x102e0e6c0"/>
        <function-ref name="toggle" scoped="" ref="0x102e0e850"/>
        <function-ref name="isOutput" scoped="" ref="0x102e0e9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x102e0eb70"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e0ed00"/>
        <function-ref name="get" scoped="" ref="0x102e0d020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e0d1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x102e0d340"/>
        <function-ref name="set" scoped="" ref="0x102e0d4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e0d660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e0d7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e0da80"/>
        <function-ref name="clr" scoped="" ref="0x102e0dc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port45" ref="0x102e22200" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port45" scoped="" ref="0x102e22200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e22580"/>
        <function-ref name="isInput" scoped="" ref="0x102e22710"/>
        <function-ref name="setResistor" scoped="" ref="0x102e228a0"/>
        <function-ref name="toggle" scoped="" ref="0x102e22a30"/>
        <function-ref name="isOutput" scoped="" ref="0x102e22bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x102e22d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e21020"/>
        <function-ref name="get" scoped="" ref="0x102e211b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e21340"/>
        <function-ref name="getRaw" scoped="" ref="0x102e214d0"/>
        <function-ref name="set" scoped="" ref="0x102e21660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e217f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e21980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e21c10"/>
        <function-ref name="clr" scoped="" ref="0x102e21da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port57" ref="0x102e35200" loc="100:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port57" scoped="" ref="0x102e35200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e35580"/>
        <function-ref name="isInput" scoped="" ref="0x102e35710"/>
        <function-ref name="setResistor" scoped="" ref="0x102e358a0"/>
        <function-ref name="toggle" scoped="" ref="0x102e35a30"/>
        <function-ref name="isOutput" scoped="" ref="0x102e35bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x102e35d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e34020"/>
        <function-ref name="get" scoped="" ref="0x102e341b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e34340"/>
        <function-ref name="getRaw" scoped="" ref="0x102e344d0"/>
        <function-ref name="set" scoped="" ref="0x102e34660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e347f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e34980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e34c10"/>
        <function-ref name="clr" scoped="" ref="0x102e34da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port67" ref="0x102e4d200" loc="111:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port67" scoped="" ref="0x102e4d200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e4d580"/>
        <function-ref name="isInput" scoped="" ref="0x102e4d710"/>
        <function-ref name="setResistor" scoped="" ref="0x102e4d8a0"/>
        <function-ref name="toggle" scoped="" ref="0x102e4da30"/>
        <function-ref name="isOutput" scoped="" ref="0x102e4dbc0"/>
        <function-ref name="getResistor" scoped="" ref="0x102e4dd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e4c020"/>
        <function-ref name="get" scoped="" ref="0x102e4c1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e4c340"/>
        <function-ref name="getRaw" scoped="" ref="0x102e4c4d0"/>
        <function-ref name="set" scoped="" ref="0x102e4c660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e4c7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e4c980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e4cc10"/>
        <function-ref name="clr" scoped="" ref="0x102e4cda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x102de2020" loc="51:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x102de2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102de23a0"/>
        <function-ref name="isInput" scoped="" ref="0x102de2530"/>
        <function-ref name="setResistor" scoped="" ref="0x102de26c0"/>
        <function-ref name="toggle" scoped="" ref="0x102de2850"/>
        <function-ref name="isOutput" scoped="" ref="0x102de29e0"/>
        <function-ref name="getResistor" scoped="" ref="0x102de2b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x102de2d00"/>
        <function-ref name="get" scoped="" ref="0x102de1020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102de11b0"/>
        <function-ref name="getRaw" scoped="" ref="0x102de1340"/>
        <function-ref name="set" scoped="" ref="0x102de14d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102de1660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102de17f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102de1a80"/>
        <function-ref name="clr" scoped="" ref="0x102de1c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x102df5020" loc="64:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x102df5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102df54a0"/>
        <function-ref name="isInput" scoped="" ref="0x102df5630"/>
        <function-ref name="setResistor" scoped="" ref="0x102df57c0"/>
        <function-ref name="toggle" scoped="" ref="0x102df5950"/>
        <function-ref name="isOutput" scoped="" ref="0x102df5ae0"/>
        <function-ref name="getResistor" scoped="" ref="0x102df5c70"/>
        <function-ref name="makeOutput" scoped="" ref="0x102df5e00"/>
        <function-ref name="get" scoped="" ref="0x102df4020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102df41b0"/>
        <function-ref name="getRaw" scoped="" ref="0x102df4340"/>
        <function-ref name="set" scoped="" ref="0x102df44d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102df4660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102df47f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102df4a80"/>
        <function-ref name="clr" scoped="" ref="0x102df4c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port36" ref="0x102e08020" loc="77:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port36" scoped="" ref="0x102e08020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e083a0"/>
        <function-ref name="isInput" scoped="" ref="0x102e08530"/>
        <function-ref name="setResistor" scoped="" ref="0x102e086c0"/>
        <function-ref name="toggle" scoped="" ref="0x102e08850"/>
        <function-ref name="isOutput" scoped="" ref="0x102e089e0"/>
        <function-ref name="getResistor" scoped="" ref="0x102e08b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e08d00"/>
        <function-ref name="get" scoped="" ref="0x102e07020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e071b0"/>
        <function-ref name="getRaw" scoped="" ref="0x102e07340"/>
        <function-ref name="set" scoped="" ref="0x102e074d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e07660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e077f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e07a80"/>
        <function-ref name="clr" scoped="" ref="0x102e07c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO0" ref="0x102e49580" loc="144:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO0" scoped="" ref="0x102e49580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e49900"/>
        <function-ref name="isInput" scoped="" ref="0x102e49a90"/>
        <function-ref name="setResistor" scoped="" ref="0x102e49c20"/>
        <function-ref name="toggle" scoped="" ref="0x102e49db0"/>
        <function-ref name="isOutput" scoped="" ref="0x102e48020"/>
        <function-ref name="getResistor" scoped="" ref="0x102e481b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e48340"/>
        <function-ref name="get" scoped="" ref="0x102e484d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e48660"/>
        <function-ref name="getRaw" scoped="" ref="0x102e487f0"/>
        <function-ref name="set" scoped="" ref="0x102e48980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e48b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e48ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e47020"/>
        <function-ref name="clr" scoped="" ref="0x102e471b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC3" ref="0x102e50570" loc="162:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC3" scoped="" ref="0x102e50570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e508f0"/>
        <function-ref name="isInput" scoped="" ref="0x102e50a80"/>
        <function-ref name="setResistor" scoped="" ref="0x102e50c10"/>
        <function-ref name="toggle" scoped="" ref="0x102e50da0"/>
        <function-ref name="isOutput" scoped="" ref="0x102e4f020"/>
        <function-ref name="getResistor" scoped="" ref="0x102e4f1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e4f340"/>
        <function-ref name="get" scoped="" ref="0x102e4f4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e4f660"/>
        <function-ref name="getRaw" scoped="" ref="0x102e4f7f0"/>
        <function-ref name="set" scoped="" ref="0x102e4f980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e4fb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e4fca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e4e020"/>
        <function-ref name="clr" scoped="" ref="0x102e4e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC1" ref="0x102e6d570" loc="169:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC1" scoped="" ref="0x102e6d570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e6d8f0"/>
        <function-ref name="isInput" scoped="" ref="0x102e6da80"/>
        <function-ref name="setResistor" scoped="" ref="0x102e6dc10"/>
        <function-ref name="toggle" scoped="" ref="0x102e6dda0"/>
        <function-ref name="isOutput" scoped="" ref="0x102e6c020"/>
        <function-ref name="getResistor" scoped="" ref="0x102e6c1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e6c340"/>
        <function-ref name="get" scoped="" ref="0x102e6c4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e6c660"/>
        <function-ref name="getRaw" scoped="" ref="0x102e6c7f0"/>
        <function-ref name="set" scoped="" ref="0x102e6c980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e6cb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e6cca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e6b020"/>
        <function-ref name="clr" scoped="" ref="0x102e6b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK1" ref="0x102e5d580" loc="155:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK1" scoped="" ref="0x102e5d580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e5d900"/>
        <function-ref name="isInput" scoped="" ref="0x102e5da90"/>
        <function-ref name="setResistor" scoped="" ref="0x102e5dc20"/>
        <function-ref name="toggle" scoped="" ref="0x102e5ddb0"/>
        <function-ref name="isOutput" scoped="" ref="0x102e5b020"/>
        <function-ref name="getResistor" scoped="" ref="0x102e5b1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e5b340"/>
        <function-ref name="get" scoped="" ref="0x102e5b4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e5b660"/>
        <function-ref name="getRaw" scoped="" ref="0x102e5b7f0"/>
        <function-ref name="set" scoped="" ref="0x102e5b980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e5bb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e5bca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e5a020"/>
        <function-ref name="clr" scoped="" ref="0x102e5a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port40" ref="0x102e04020" loc="82:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port40" scoped="" ref="0x102e04020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e045a0"/>
        <function-ref name="isInput" scoped="" ref="0x102e04730"/>
        <function-ref name="setResistor" scoped="" ref="0x102e048c0"/>
        <function-ref name="toggle" scoped="" ref="0x102e04a50"/>
        <function-ref name="isOutput" scoped="" ref="0x102e04be0"/>
        <function-ref name="getResistor" scoped="" ref="0x102e04d70"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e03020"/>
        <function-ref name="get" scoped="" ref="0x102e031b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e03340"/>
        <function-ref name="getRaw" scoped="" ref="0x102e034d0"/>
        <function-ref name="set" scoped="" ref="0x102e03660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e037f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e03980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e03c10"/>
        <function-ref name="clr" scoped="" ref="0x102e03da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port52" ref="0x102e18200" loc="95:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port52" scoped="" ref="0x102e18200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e18580"/>
        <function-ref name="isInput" scoped="" ref="0x102e18710"/>
        <function-ref name="setResistor" scoped="" ref="0x102e188a0"/>
        <function-ref name="toggle" scoped="" ref="0x102e18a30"/>
        <function-ref name="isOutput" scoped="" ref="0x102e18bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x102e18d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e17020"/>
        <function-ref name="get" scoped="" ref="0x102e171b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e17340"/>
        <function-ref name="getRaw" scoped="" ref="0x102e174d0"/>
        <function-ref name="set" scoped="" ref="0x102e17660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e177f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e17980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e17c10"/>
        <function-ref name="clr" scoped="" ref="0x102e17da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port62" ref="0x102e2f200" loc="106:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port62" scoped="" ref="0x102e2f200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e2f580"/>
        <function-ref name="isInput" scoped="" ref="0x102e2f710"/>
        <function-ref name="setResistor" scoped="" ref="0x102e2f8a0"/>
        <function-ref name="toggle" scoped="" ref="0x102e2fa30"/>
        <function-ref name="isOutput" scoped="" ref="0x102e2fbc0"/>
        <function-ref name="getResistor" scoped="" ref="0x102e2fd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e2e020"/>
        <function-ref name="get" scoped="" ref="0x102e2e1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e2e340"/>
        <function-ref name="getRaw" scoped="" ref="0x102e2e4d0"/>
        <function-ref name="set" scoped="" ref="0x102e2e660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e2e7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e2e980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e2ec10"/>
        <function-ref name="clr" scoped="" ref="0x102e2eda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC4" ref="0x102e4e570" loc="163:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC4" scoped="" ref="0x102e4e570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e4e8f0"/>
        <function-ref name="isInput" scoped="" ref="0x102e4ea80"/>
        <function-ref name="setResistor" scoped="" ref="0x102e4ec10"/>
        <function-ref name="toggle" scoped="" ref="0x102e4eda0"/>
        <function-ref name="isOutput" scoped="" ref="0x102e76020"/>
        <function-ref name="getResistor" scoped="" ref="0x102e761b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e76340"/>
        <function-ref name="get" scoped="" ref="0x102e764d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e76660"/>
        <function-ref name="getRaw" scoped="" ref="0x102e767f0"/>
        <function-ref name="set" scoped="" ref="0x102e76980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e76b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e76ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e75020"/>
        <function-ref name="clr" scoped="" ref="0x102e751b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE1" ref="0x102e3b570" loc="152:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE1" scoped="" ref="0x102e3b570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e3b8f0"/>
        <function-ref name="isInput" scoped="" ref="0x102e3ba80"/>
        <function-ref name="setResistor" scoped="" ref="0x102e3bc10"/>
        <function-ref name="toggle" scoped="" ref="0x102e3bda0"/>
        <function-ref name="isOutput" scoped="" ref="0x102e3a020"/>
        <function-ref name="getResistor" scoped="" ref="0x102e3a1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e3a340"/>
        <function-ref name="get" scoped="" ref="0x102e3a4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e3a660"/>
        <function-ref name="getRaw" scoped="" ref="0x102e3a7f0"/>
        <function-ref name="set" scoped="" ref="0x102e3a980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e3ab10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e3aca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e61020"/>
        <function-ref name="clr" scoped="" ref="0x102e611b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x102ddc020" loc="54:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x102ddc020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102ddc3a0"/>
        <function-ref name="isInput" scoped="" ref="0x102ddc530"/>
        <function-ref name="setResistor" scoped="" ref="0x102ddc6c0"/>
        <function-ref name="toggle" scoped="" ref="0x102ddc850"/>
        <function-ref name="isOutput" scoped="" ref="0x102ddc9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x102ddcb70"/>
        <function-ref name="makeOutput" scoped="" ref="0x102ddcd00"/>
        <function-ref name="get" scoped="" ref="0x102ddb020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102ddb1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x102ddb340"/>
        <function-ref name="set" scoped="" ref="0x102ddb4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102ddb660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102ddb7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102ddba80"/>
        <function-ref name="clr" scoped="" ref="0x102ddbc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x102dee020" loc="67:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x102dee020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102dee3a0"/>
        <function-ref name="isInput" scoped="" ref="0x102dee530"/>
        <function-ref name="setResistor" scoped="" ref="0x102dee6c0"/>
        <function-ref name="toggle" scoped="" ref="0x102dee850"/>
        <function-ref name="isOutput" scoped="" ref="0x102dee9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x102deeb70"/>
        <function-ref name="makeOutput" scoped="" ref="0x102deed00"/>
        <function-ref name="get" scoped="" ref="0x102ded020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102ded1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x102ded340"/>
        <function-ref name="set" scoped="" ref="0x102ded4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102ded660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102ded7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102deda80"/>
        <function-ref name="clr" scoped="" ref="0x102dedc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port60" ref="0x102e33200" loc="104:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port60" scoped="" ref="0x102e33200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e33580"/>
        <function-ref name="isInput" scoped="" ref="0x102e33710"/>
        <function-ref name="setResistor" scoped="" ref="0x102e338a0"/>
        <function-ref name="toggle" scoped="" ref="0x102e33a30"/>
        <function-ref name="isOutput" scoped="" ref="0x102e33bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x102e33d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e32020"/>
        <function-ref name="get" scoped="" ref="0x102e321b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e32340"/>
        <function-ref name="getRaw" scoped="" ref="0x102e324d0"/>
        <function-ref name="set" scoped="" ref="0x102e32660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e327f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e32980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e32c10"/>
        <function-ref name="clr" scoped="" ref="0x102e32da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port31" ref="0x102dea020" loc="72:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port31" scoped="" ref="0x102dea020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102dea3a0"/>
        <function-ref name="isInput" scoped="" ref="0x102dea530"/>
        <function-ref name="setResistor" scoped="" ref="0x102dea6c0"/>
        <function-ref name="toggle" scoped="" ref="0x102dea850"/>
        <function-ref name="isOutput" scoped="" ref="0x102dea9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x102deab70"/>
        <function-ref name="makeOutput" scoped="" ref="0x102dead00"/>
        <function-ref name="get" scoped="" ref="0x102e11020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e111b0"/>
        <function-ref name="getRaw" scoped="" ref="0x102e11340"/>
        <function-ref name="set" scoped="" ref="0x102e114d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e11660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e117f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e11a80"/>
        <function-ref name="clr" scoped="" ref="0x102e11c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port43" ref="0x102dfe200" loc="85:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port43" scoped="" ref="0x102dfe200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102dfe580"/>
        <function-ref name="isInput" scoped="" ref="0x102dfe710"/>
        <function-ref name="setResistor" scoped="" ref="0x102dfe8a0"/>
        <function-ref name="toggle" scoped="" ref="0x102dfea30"/>
        <function-ref name="isOutput" scoped="" ref="0x102dfebc0"/>
        <function-ref name="getResistor" scoped="" ref="0x102dfed50"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e25020"/>
        <function-ref name="get" scoped="" ref="0x102e251b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e25340"/>
        <function-ref name="getRaw" scoped="" ref="0x102e254d0"/>
        <function-ref name="set" scoped="" ref="0x102e25660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e257f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e25980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e25c10"/>
        <function-ref name="clr" scoped="" ref="0x102e25da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port55" ref="0x102e39200" loc="98:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port55" scoped="" ref="0x102e39200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e39580"/>
        <function-ref name="isInput" scoped="" ref="0x102e39710"/>
        <function-ref name="setResistor" scoped="" ref="0x102e398a0"/>
        <function-ref name="toggle" scoped="" ref="0x102e39a30"/>
        <function-ref name="isOutput" scoped="" ref="0x102e39bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x102e39d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e38020"/>
        <function-ref name="get" scoped="" ref="0x102e381b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e38340"/>
        <function-ref name="getRaw" scoped="" ref="0x102e384d0"/>
        <function-ref name="set" scoped="" ref="0x102e38660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e387f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e38980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e38c10"/>
        <function-ref name="clr" scoped="" ref="0x102e38da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port65" ref="0x102e29200" loc="109:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port65" scoped="" ref="0x102e29200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e29580"/>
        <function-ref name="isInput" scoped="" ref="0x102e29710"/>
        <function-ref name="setResistor" scoped="" ref="0x102e298a0"/>
        <function-ref name="toggle" scoped="" ref="0x102e29a30"/>
        <function-ref name="isOutput" scoped="" ref="0x102e29bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x102e29d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e28020"/>
        <function-ref name="get" scoped="" ref="0x102e281b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e28340"/>
        <function-ref name="getRaw" scoped="" ref="0x102e284d0"/>
        <function-ref name="set" scoped="" ref="0x102e28660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e287f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e28980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e28c10"/>
        <function-ref name="clr" scoped="" ref="0x102e28da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI1" ref="0x102e5f580" loc="154:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI1" scoped="" ref="0x102e5f580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e5f900"/>
        <function-ref name="isInput" scoped="" ref="0x102e5fa90"/>
        <function-ref name="setResistor" scoped="" ref="0x102e5fc20"/>
        <function-ref name="toggle" scoped="" ref="0x102e5fdb0"/>
        <function-ref name="isOutput" scoped="" ref="0x102e5e020"/>
        <function-ref name="getResistor" scoped="" ref="0x102e5e1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e5e340"/>
        <function-ref name="get" scoped="" ref="0x102e5e4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e5e660"/>
        <function-ref name="getRaw" scoped="" ref="0x102e5e7f0"/>
        <function-ref name="set" scoped="" ref="0x102e5e980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e5eb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e5eca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e5d020"/>
        <function-ref name="clr" scoped="" ref="0x102e5d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x102dc90a0" loc="49:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x102dc90a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102dc9420"/>
        <function-ref name="isInput" scoped="" ref="0x102dc95b0"/>
        <function-ref name="setResistor" scoped="" ref="0x102dc9740"/>
        <function-ref name="toggle" scoped="" ref="0x102dc98d0"/>
        <function-ref name="isOutput" scoped="" ref="0x102dc9a60"/>
        <function-ref name="getResistor" scoped="" ref="0x102dc9bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102dc9d80"/>
        <function-ref name="get" scoped="" ref="0x102dc8020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102dc81b0"/>
        <function-ref name="getRaw" scoped="" ref="0x102dc8340"/>
        <function-ref name="set" scoped="" ref="0x102dc84d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102dc8660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102dc87f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102dc8a80"/>
        <function-ref name="clr" scoped="" ref="0x102dc8c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x102df9020" loc="62:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x102df9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102df93a0"/>
        <function-ref name="isInput" scoped="" ref="0x102df9530"/>
        <function-ref name="setResistor" scoped="" ref="0x102df96c0"/>
        <function-ref name="toggle" scoped="" ref="0x102df9850"/>
        <function-ref name="isOutput" scoped="" ref="0x102df99e0"/>
        <function-ref name="getResistor" scoped="" ref="0x102df9b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x102df9d00"/>
        <function-ref name="get" scoped="" ref="0x102df8020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102df81b0"/>
        <function-ref name="getRaw" scoped="" ref="0x102df8340"/>
        <function-ref name="set" scoped="" ref="0x102df84d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102df8660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102df87f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102df8a80"/>
        <function-ref name="clr" scoped="" ref="0x102df8c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port34" ref="0x102e0c020" loc="75:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port34" scoped="" ref="0x102e0c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e0c3a0"/>
        <function-ref name="isInput" scoped="" ref="0x102e0c530"/>
        <function-ref name="setResistor" scoped="" ref="0x102e0c6c0"/>
        <function-ref name="toggle" scoped="" ref="0x102e0c850"/>
        <function-ref name="isOutput" scoped="" ref="0x102e0c9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x102e0cb70"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e0cd00"/>
        <function-ref name="get" scoped="" ref="0x102e0b020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e0b1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x102e0b340"/>
        <function-ref name="set" scoped="" ref="0x102e0b4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e0b660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e0b7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e0ba80"/>
        <function-ref name="clr" scoped="" ref="0x102e0bc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port46" ref="0x102e20200" loc="88:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port46" scoped="" ref="0x102e20200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e20580"/>
        <function-ref name="isInput" scoped="" ref="0x102e20710"/>
        <function-ref name="setResistor" scoped="" ref="0x102e208a0"/>
        <function-ref name="toggle" scoped="" ref="0x102e20a30"/>
        <function-ref name="isOutput" scoped="" ref="0x102e20bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x102e20d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e1f020"/>
        <function-ref name="get" scoped="" ref="0x102e1f1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e1f340"/>
        <function-ref name="getRaw" scoped="" ref="0x102e1f4d0"/>
        <function-ref name="set" scoped="" ref="0x102e1f660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e1f7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e1f980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e1fc10"/>
        <function-ref name="clr" scoped="" ref="0x102e1fda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD1" ref="0x102e5a580" loc="156:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD1" scoped="" ref="0x102e5a580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e5a900"/>
        <function-ref name="isInput" scoped="" ref="0x102e5aa90"/>
        <function-ref name="setResistor" scoped="" ref="0x102e5ac20"/>
        <function-ref name="toggle" scoped="" ref="0x102e5adb0"/>
        <function-ref name="isOutput" scoped="" ref="0x102e59020"/>
        <function-ref name="getResistor" scoped="" ref="0x102e591b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e59340"/>
        <function-ref name="get" scoped="" ref="0x102e594d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e59660"/>
        <function-ref name="getRaw" scoped="" ref="0x102e597f0"/>
        <function-ref name="set" scoped="" ref="0x102e59980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e59b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e59ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e58020"/>
        <function-ref name="clr" scoped="" ref="0x102e581b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC1" ref="0x102e54570" loc="160:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC1" scoped="" ref="0x102e54570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e548f0"/>
        <function-ref name="isInput" scoped="" ref="0x102e54a80"/>
        <function-ref name="setResistor" scoped="" ref="0x102e54c10"/>
        <function-ref name="toggle" scoped="" ref="0x102e54da0"/>
        <function-ref name="isOutput" scoped="" ref="0x102e53020"/>
        <function-ref name="getResistor" scoped="" ref="0x102e531b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e53340"/>
        <function-ref name="get" scoped="" ref="0x102e534d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e53660"/>
        <function-ref name="getRaw" scoped="" ref="0x102e537f0"/>
        <function-ref name="set" scoped="" ref="0x102e53980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e53b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e53ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e52020"/>
        <function-ref name="clr" scoped="" ref="0x102e521b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC7" ref="0x102e71570" loc="166:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC7" scoped="" ref="0x102e71570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e718f0"/>
        <function-ref name="isInput" scoped="" ref="0x102e71a80"/>
        <function-ref name="setResistor" scoped="" ref="0x102e71c10"/>
        <function-ref name="toggle" scoped="" ref="0x102e71da0"/>
        <function-ref name="isOutput" scoped="" ref="0x102e70020"/>
        <function-ref name="getResistor" scoped="" ref="0x102e701b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e70340"/>
        <function-ref name="get" scoped="" ref="0x102e704d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e70660"/>
        <function-ref name="getRaw" scoped="" ref="0x102e707f0"/>
        <function-ref name="set" scoped="" ref="0x102e70980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e70b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e70ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e6f020"/>
        <function-ref name="clr" scoped="" ref="0x102e6f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port50" ref="0x102e1c200" loc="93:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port50" scoped="" ref="0x102e1c200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e1c580"/>
        <function-ref name="isInput" scoped="" ref="0x102e1c710"/>
        <function-ref name="setResistor" scoped="" ref="0x102e1c8a0"/>
        <function-ref name="toggle" scoped="" ref="0x102e1ca30"/>
        <function-ref name="isOutput" scoped="" ref="0x102e1cbc0"/>
        <function-ref name="getResistor" scoped="" ref="0x102e1cd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e1b020"/>
        <function-ref name="get" scoped="" ref="0x102e1b1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e1b340"/>
        <function-ref name="getRaw" scoped="" ref="0x102e1b4d0"/>
        <function-ref name="set" scoped="" ref="0x102e1b660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e1b7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e1b980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e1bc10"/>
        <function-ref name="clr" scoped="" ref="0x102e1bda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD1" ref="0x102e58580" loc="157:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD1" scoped="" ref="0x102e58580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e58900"/>
        <function-ref name="isInput" scoped="" ref="0x102e58a90"/>
        <function-ref name="setResistor" scoped="" ref="0x102e58c20"/>
        <function-ref name="toggle" scoped="" ref="0x102e58db0"/>
        <function-ref name="isOutput" scoped="" ref="0x102e57020"/>
        <function-ref name="getResistor" scoped="" ref="0x102e571b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e57340"/>
        <function-ref name="get" scoped="" ref="0x102e574d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e57660"/>
        <function-ref name="getRaw" scoped="" ref="0x102e577f0"/>
        <function-ref name="set" scoped="" ref="0x102e57980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e57b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e57ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e56020"/>
        <function-ref name="clr" scoped="" ref="0x102e561b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x102de0020" loc="52:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x102de0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102de03a0"/>
        <function-ref name="isInput" scoped="" ref="0x102de0530"/>
        <function-ref name="setResistor" scoped="" ref="0x102de06c0"/>
        <function-ref name="toggle" scoped="" ref="0x102de0850"/>
        <function-ref name="isOutput" scoped="" ref="0x102de09e0"/>
        <function-ref name="getResistor" scoped="" ref="0x102de0b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x102de0d00"/>
        <function-ref name="get" scoped="" ref="0x102ddf020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102ddf1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x102ddf340"/>
        <function-ref name="set" scoped="" ref="0x102ddf4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102ddf660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102ddf7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102ddfa80"/>
        <function-ref name="clr" scoped="" ref="0x102ddfc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x102df2020" loc="65:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x102df2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102df23a0"/>
        <function-ref name="isInput" scoped="" ref="0x102df2530"/>
        <function-ref name="setResistor" scoped="" ref="0x102df26c0"/>
        <function-ref name="toggle" scoped="" ref="0x102df2850"/>
        <function-ref name="isOutput" scoped="" ref="0x102df29e0"/>
        <function-ref name="getResistor" scoped="" ref="0x102df2b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x102df2d00"/>
        <function-ref name="get" scoped="" ref="0x102df1020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102df11b0"/>
        <function-ref name="getRaw" scoped="" ref="0x102df1340"/>
        <function-ref name="set" scoped="" ref="0x102df14d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102df1660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102df17f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102df1a80"/>
        <function-ref name="clr" scoped="" ref="0x102df1c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port37" ref="0x102e06020" loc="78:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port37" scoped="" ref="0x102e06020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e063a0"/>
        <function-ref name="isInput" scoped="" ref="0x102e06530"/>
        <function-ref name="setResistor" scoped="" ref="0x102e066c0"/>
        <function-ref name="toggle" scoped="" ref="0x102e06850"/>
        <function-ref name="isOutput" scoped="" ref="0x102e069e0"/>
        <function-ref name="getResistor" scoped="" ref="0x102e06b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e06d00"/>
        <function-ref name="get" scoped="" ref="0x102e05020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e051b0"/>
        <function-ref name="getRaw" scoped="" ref="0x102e05340"/>
        <function-ref name="set" scoped="" ref="0x102e054d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e05660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e057f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e05a80"/>
        <function-ref name="clr" scoped="" ref="0x102e05c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO1" ref="0x102e61580" loc="153:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO1" scoped="" ref="0x102e61580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e61900"/>
        <function-ref name="isInput" scoped="" ref="0x102e61a90"/>
        <function-ref name="setResistor" scoped="" ref="0x102e61c20"/>
        <function-ref name="toggle" scoped="" ref="0x102e61db0"/>
        <function-ref name="isOutput" scoped="" ref="0x102e60020"/>
        <function-ref name="getResistor" scoped="" ref="0x102e601b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e60340"/>
        <function-ref name="get" scoped="" ref="0x102e604d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e60660"/>
        <function-ref name="getRaw" scoped="" ref="0x102e607f0"/>
        <function-ref name="set" scoped="" ref="0x102e60980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e60b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e60ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e5f020"/>
        <function-ref name="clr" scoped="" ref="0x102e5f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC5" ref="0x102e75570" loc="164:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC5" scoped="" ref="0x102e75570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e758f0"/>
        <function-ref name="isInput" scoped="" ref="0x102e75a80"/>
        <function-ref name="setResistor" scoped="" ref="0x102e75c10"/>
        <function-ref name="toggle" scoped="" ref="0x102e75da0"/>
        <function-ref name="isOutput" scoped="" ref="0x102e74020"/>
        <function-ref name="getResistor" scoped="" ref="0x102e741b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e74340"/>
        <function-ref name="get" scoped="" ref="0x102e744d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e74660"/>
        <function-ref name="getRaw" scoped="" ref="0x102e747f0"/>
        <function-ref name="set" scoped="" ref="0x102e74980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e74b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e74ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e73020"/>
        <function-ref name="clr" scoped="" ref="0x102e731b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port41" ref="0x102e02200" loc="83:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port41" scoped="" ref="0x102e02200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e02580"/>
        <function-ref name="isInput" scoped="" ref="0x102e02710"/>
        <function-ref name="setResistor" scoped="" ref="0x102e028a0"/>
        <function-ref name="toggle" scoped="" ref="0x102e02a30"/>
        <function-ref name="isOutput" scoped="" ref="0x102e02bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x102e02d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e01020"/>
        <function-ref name="get" scoped="" ref="0x102e011b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e01340"/>
        <function-ref name="getRaw" scoped="" ref="0x102e014d0"/>
        <function-ref name="set" scoped="" ref="0x102e01660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e017f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e01980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e01c10"/>
        <function-ref name="clr" scoped="" ref="0x102e01da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port53" ref="0x102e16200" loc="96:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port53" scoped="" ref="0x102e16200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e16580"/>
        <function-ref name="isInput" scoped="" ref="0x102e16710"/>
        <function-ref name="setResistor" scoped="" ref="0x102e168a0"/>
        <function-ref name="toggle" scoped="" ref="0x102e16a30"/>
        <function-ref name="isOutput" scoped="" ref="0x102e16bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x102e16d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e15020"/>
        <function-ref name="get" scoped="" ref="0x102e151b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e15340"/>
        <function-ref name="getRaw" scoped="" ref="0x102e154d0"/>
        <function-ref name="set" scoped="" ref="0x102e15660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e157f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e15980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e15c10"/>
        <function-ref name="clr" scoped="" ref="0x102e15da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port63" ref="0x102e2d200" loc="107:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port63" scoped="" ref="0x102e2d200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e2d580"/>
        <function-ref name="isInput" scoped="" ref="0x102e2d710"/>
        <function-ref name="setResistor" scoped="" ref="0x102e2d8a0"/>
        <function-ref name="toggle" scoped="" ref="0x102e2da30"/>
        <function-ref name="isOutput" scoped="" ref="0x102e2dbc0"/>
        <function-ref name="getResistor" scoped="" ref="0x102e2dd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e2c020"/>
        <function-ref name="get" scoped="" ref="0x102e2c1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e2c340"/>
        <function-ref name="getRaw" scoped="" ref="0x102e2c4d0"/>
        <function-ref name="set" scoped="" ref="0x102e2c660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e2c7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e2c980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e2cc10"/>
        <function-ref name="clr" scoped="" ref="0x102e2cda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x102dda020" loc="55:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x102dda020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102dda3a0"/>
        <function-ref name="isInput" scoped="" ref="0x102dda530"/>
        <function-ref name="setResistor" scoped="" ref="0x102dda6c0"/>
        <function-ref name="toggle" scoped="" ref="0x102dda850"/>
        <function-ref name="isOutput" scoped="" ref="0x102dda9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x102ddab70"/>
        <function-ref name="makeOutput" scoped="" ref="0x102ddad00"/>
        <function-ref name="get" scoped="" ref="0x102dd9020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102dd91b0"/>
        <function-ref name="getRaw" scoped="" ref="0x102dd9340"/>
        <function-ref name="set" scoped="" ref="0x102dd94d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102dd9660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102dd97f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102dd9a80"/>
        <function-ref name="clr" scoped="" ref="0x102dd9c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port61" ref="0x102e31200" loc="105:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port61" scoped="" ref="0x102e31200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e31580"/>
        <function-ref name="isInput" scoped="" ref="0x102e31710"/>
        <function-ref name="setResistor" scoped="" ref="0x102e318a0"/>
        <function-ref name="toggle" scoped="" ref="0x102e31a30"/>
        <function-ref name="isOutput" scoped="" ref="0x102e31bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x102e31d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e30020"/>
        <function-ref name="get" scoped="" ref="0x102e301b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e30340"/>
        <function-ref name="getRaw" scoped="" ref="0x102e304d0"/>
        <function-ref name="set" scoped="" ref="0x102e30660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e307f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e30980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e30c10"/>
        <function-ref name="clr" scoped="" ref="0x102e30da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x102dfd020" loc="60:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x102dfd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102dfd3a0"/>
        <function-ref name="isInput" scoped="" ref="0x102dfd530"/>
        <function-ref name="setResistor" scoped="" ref="0x102dfd6c0"/>
        <function-ref name="toggle" scoped="" ref="0x102dfd850"/>
        <function-ref name="isOutput" scoped="" ref="0x102dfd9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x102dfdb70"/>
        <function-ref name="makeOutput" scoped="" ref="0x102dfdd00"/>
        <function-ref name="get" scoped="" ref="0x102dfc020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102dfc1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x102dfc340"/>
        <function-ref name="set" scoped="" ref="0x102dfc4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102dfc660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102dfc7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102dfca80"/>
        <function-ref name="clr" scoped="" ref="0x102dfcc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port32" ref="0x102e10020" loc="73:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port32" scoped="" ref="0x102e10020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e103a0"/>
        <function-ref name="isInput" scoped="" ref="0x102e10530"/>
        <function-ref name="setResistor" scoped="" ref="0x102e106c0"/>
        <function-ref name="toggle" scoped="" ref="0x102e10850"/>
        <function-ref name="isOutput" scoped="" ref="0x102e109e0"/>
        <function-ref name="getResistor" scoped="" ref="0x102e10b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e10d00"/>
        <function-ref name="get" scoped="" ref="0x102e0f020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e0f1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x102e0f340"/>
        <function-ref name="set" scoped="" ref="0x102e0f4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e0f660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e0f7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e0fa80"/>
        <function-ref name="clr" scoped="" ref="0x102e0fc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port44" ref="0x102e24200" loc="86:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port44" scoped="" ref="0x102e24200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e24580"/>
        <function-ref name="isInput" scoped="" ref="0x102e24710"/>
        <function-ref name="setResistor" scoped="" ref="0x102e248a0"/>
        <function-ref name="toggle" scoped="" ref="0x102e24a30"/>
        <function-ref name="isOutput" scoped="" ref="0x102e24bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x102e24d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e23020"/>
        <function-ref name="get" scoped="" ref="0x102e231b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e23340"/>
        <function-ref name="getRaw" scoped="" ref="0x102e234d0"/>
        <function-ref name="set" scoped="" ref="0x102e23660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e237f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e23980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e23c10"/>
        <function-ref name="clr" scoped="" ref="0x102e23da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port56" ref="0x102e37200" loc="99:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port56" scoped="" ref="0x102e37200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e37580"/>
        <function-ref name="isInput" scoped="" ref="0x102e37710"/>
        <function-ref name="setResistor" scoped="" ref="0x102e378a0"/>
        <function-ref name="toggle" scoped="" ref="0x102e37a30"/>
        <function-ref name="isOutput" scoped="" ref="0x102e37bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x102e37d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e36020"/>
        <function-ref name="get" scoped="" ref="0x102e361b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e36340"/>
        <function-ref name="getRaw" scoped="" ref="0x102e364d0"/>
        <function-ref name="set" scoped="" ref="0x102e36660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e367f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e36980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e36c10"/>
        <function-ref name="clr" scoped="" ref="0x102e36da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port66" ref="0x102e27200" loc="110:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port66" scoped="" ref="0x102e27200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e27580"/>
        <function-ref name="isInput" scoped="" ref="0x102e27710"/>
        <function-ref name="setResistor" scoped="" ref="0x102e278a0"/>
        <function-ref name="toggle" scoped="" ref="0x102e27a30"/>
        <function-ref name="isOutput" scoped="" ref="0x102e27bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x102e27d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e26020"/>
        <function-ref name="get" scoped="" ref="0x102e261b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e26340"/>
        <function-ref name="getRaw" scoped="" ref="0x102e264d0"/>
        <function-ref name="set" scoped="" ref="0x102e26660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e267f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e26980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e26c10"/>
        <function-ref name="clr" scoped="" ref="0x102e26da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x102de4020" loc="50:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x102de4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102de43a0"/>
        <function-ref name="isInput" scoped="" ref="0x102de4530"/>
        <function-ref name="setResistor" scoped="" ref="0x102de46c0"/>
        <function-ref name="toggle" scoped="" ref="0x102de4850"/>
        <function-ref name="isOutput" scoped="" ref="0x102de49e0"/>
        <function-ref name="getResistor" scoped="" ref="0x102de4b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x102de4d00"/>
        <function-ref name="get" scoped="" ref="0x102de3020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102de31b0"/>
        <function-ref name="getRaw" scoped="" ref="0x102de3340"/>
        <function-ref name="set" scoped="" ref="0x102de34d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102de3660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102de37f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102de3a80"/>
        <function-ref name="clr" scoped="" ref="0x102de3c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x102df7020" loc="63:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x102df7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102df73a0"/>
        <function-ref name="isInput" scoped="" ref="0x102df7530"/>
        <function-ref name="setResistor" scoped="" ref="0x102df76c0"/>
        <function-ref name="toggle" scoped="" ref="0x102df7850"/>
        <function-ref name="isOutput" scoped="" ref="0x102df79e0"/>
        <function-ref name="getResistor" scoped="" ref="0x102df7b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x102df7d00"/>
        <function-ref name="get" scoped="" ref="0x102df6020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102df61b0"/>
        <function-ref name="getRaw" scoped="" ref="0x102df6340"/>
        <function-ref name="set" scoped="" ref="0x102df64d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102df6660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102df67f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102df6a80"/>
        <function-ref name="clr" scoped="" ref="0x102df6c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port35" ref="0x102e0a020" loc="76:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port35" scoped="" ref="0x102e0a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e0a3a0"/>
        <function-ref name="isInput" scoped="" ref="0x102e0a530"/>
        <function-ref name="setResistor" scoped="" ref="0x102e0a6c0"/>
        <function-ref name="toggle" scoped="" ref="0x102e0a850"/>
        <function-ref name="isOutput" scoped="" ref="0x102e0a9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x102e0ab70"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e0ad00"/>
        <function-ref name="get" scoped="" ref="0x102e09020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e091b0"/>
        <function-ref name="getRaw" scoped="" ref="0x102e09340"/>
        <function-ref name="set" scoped="" ref="0x102e094d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e09660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e097f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e09a80"/>
        <function-ref name="clr" scoped="" ref="0x102e09c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port47" ref="0x102e1e200" loc="89:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port47" scoped="" ref="0x102e1e200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e1e580"/>
        <function-ref name="isInput" scoped="" ref="0x102e1e710"/>
        <function-ref name="setResistor" scoped="" ref="0x102e1e8a0"/>
        <function-ref name="toggle" scoped="" ref="0x102e1ea30"/>
        <function-ref name="isOutput" scoped="" ref="0x102e1ebc0"/>
        <function-ref name="getResistor" scoped="" ref="0x102e1ed50"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e1d020"/>
        <function-ref name="get" scoped="" ref="0x102e1d1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e1d340"/>
        <function-ref name="getRaw" scoped="" ref="0x102e1d4d0"/>
        <function-ref name="set" scoped="" ref="0x102e1d660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e1d7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e1d980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e1dc10"/>
        <function-ref name="clr" scoped="" ref="0x102e1dda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SCL" ref="0x102e41560" loc="148:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SCL" scoped="" ref="0x102e41560"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e418e0"/>
        <function-ref name="isInput" scoped="" ref="0x102e41a70"/>
        <function-ref name="setResistor" scoped="" ref="0x102e41c00"/>
        <function-ref name="toggle" scoped="" ref="0x102e41d90"/>
        <function-ref name="isOutput" scoped="" ref="0x102e40020"/>
        <function-ref name="getResistor" scoped="" ref="0x102e401b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e40340"/>
        <function-ref name="get" scoped="" ref="0x102e404d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e40660"/>
        <function-ref name="getRaw" scoped="" ref="0x102e407f0"/>
        <function-ref name="set" scoped="" ref="0x102e40980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e40b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e40ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e3f020"/>
        <function-ref name="clr" scoped="" ref="0x102e3f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC2" ref="0x102e52570" loc="161:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC2" scoped="" ref="0x102e52570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e528f0"/>
        <function-ref name="isInput" scoped="" ref="0x102e52a80"/>
        <function-ref name="setResistor" scoped="" ref="0x102e52c10"/>
        <function-ref name="toggle" scoped="" ref="0x102e52da0"/>
        <function-ref name="isOutput" scoped="" ref="0x102e51020"/>
        <function-ref name="getResistor" scoped="" ref="0x102e511b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e51340"/>
        <function-ref name="get" scoped="" ref="0x102e514d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e51660"/>
        <function-ref name="getRaw" scoped="" ref="0x102e517f0"/>
        <function-ref name="set" scoped="" ref="0x102e51980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e51b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e51ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e50020"/>
        <function-ref name="clr" scoped="" ref="0x102e501b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK0" ref="0x102e43580" loc="147:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK0" scoped="" ref="0x102e43580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e43900"/>
        <function-ref name="isInput" scoped="" ref="0x102e43a90"/>
        <function-ref name="setResistor" scoped="" ref="0x102e43c20"/>
        <function-ref name="toggle" scoped="" ref="0x102e43db0"/>
        <function-ref name="isOutput" scoped="" ref="0x102e42020"/>
        <function-ref name="getResistor" scoped="" ref="0x102e421b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e42340"/>
        <function-ref name="get" scoped="" ref="0x102e424d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e42660"/>
        <function-ref name="getRaw" scoped="" ref="0x102e427f0"/>
        <function-ref name="set" scoped="" ref="0x102e42980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e42b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e42ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e41020"/>
        <function-ref name="clr" scoped="" ref="0x102e411b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port51" ref="0x102e1a200" loc="94:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port51" scoped="" ref="0x102e1a200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e1a580"/>
        <function-ref name="isInput" scoped="" ref="0x102e1a710"/>
        <function-ref name="setResistor" scoped="" ref="0x102e1a8a0"/>
        <function-ref name="toggle" scoped="" ref="0x102e1aa30"/>
        <function-ref name="isOutput" scoped="" ref="0x102e1abc0"/>
        <function-ref name="getResistor" scoped="" ref="0x102e1ad50"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e19020"/>
        <function-ref name="get" scoped="" ref="0x102e191b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e19340"/>
        <function-ref name="getRaw" scoped="" ref="0x102e194d0"/>
        <function-ref name="set" scoped="" ref="0x102e19660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e197f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e19980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e19c10"/>
        <function-ref name="clr" scoped="" ref="0x102e19da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC0" ref="0x102e6f570" loc="168:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC0" scoped="" ref="0x102e6f570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e6f8f0"/>
        <function-ref name="isInput" scoped="" ref="0x102e6fa80"/>
        <function-ref name="setResistor" scoped="" ref="0x102e6fc10"/>
        <function-ref name="toggle" scoped="" ref="0x102e6fda0"/>
        <function-ref name="isOutput" scoped="" ref="0x102e6e020"/>
        <function-ref name="getResistor" scoped="" ref="0x102e6e1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e6e340"/>
        <function-ref name="get" scoped="" ref="0x102e6e4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e6e660"/>
        <function-ref name="getRaw" scoped="" ref="0x102e6e7f0"/>
        <function-ref name="set" scoped="" ref="0x102e6e980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e6eb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e6eca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e6d020"/>
        <function-ref name="clr" scoped="" ref="0x102e6d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSOUT" ref="0x102e69580" loc="172:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSOUT" scoped="" ref="0x102e69580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e69900"/>
        <function-ref name="isInput" scoped="" ref="0x102e69a90"/>
        <function-ref name="setResistor" scoped="" ref="0x102e69c20"/>
        <function-ref name="toggle" scoped="" ref="0x102e69db0"/>
        <function-ref name="isOutput" scoped="" ref="0x102e68020"/>
        <function-ref name="getResistor" scoped="" ref="0x102e681b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e68340"/>
        <function-ref name="get" scoped="" ref="0x102e684d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e68660"/>
        <function-ref name="getRaw" scoped="" ref="0x102e687f0"/>
        <function-ref name="set" scoped="" ref="0x102e68980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e68b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e68ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e67020"/>
        <function-ref name="clr" scoped="" ref="0x102e671b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE0" ref="0x102e4b1f0" loc="143:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE0" scoped="" ref="0x102e4b1f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e4b970"/>
        <function-ref name="isInput" scoped="" ref="0x102e4bb00"/>
        <function-ref name="setResistor" scoped="" ref="0x102e4bc90"/>
        <function-ref name="toggle" scoped="" ref="0x102e4be20"/>
        <function-ref name="isOutput" scoped="" ref="0x102e4a020"/>
        <function-ref name="getResistor" scoped="" ref="0x102e4a1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e4a340"/>
        <function-ref name="get" scoped="" ref="0x102e4a4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e4a660"/>
        <function-ref name="getRaw" scoped="" ref="0x102e4a7f0"/>
        <function-ref name="set" scoped="" ref="0x102e4a980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e4ab10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e4aca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e49020"/>
        <function-ref name="clr" scoped="" ref="0x102e491b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102e926d0" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P10"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102e926d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e92a50"/>
        <function-ref name="isInput" scoped="" ref="0x102e92be0"/>
        <function-ref name="setResistor" scoped="" ref="0x102e92d70"/>
        <function-ref name="toggle" scoped="" ref="0x102e91020"/>
        <function-ref name="isOutput" scoped="" ref="0x102e911b0"/>
        <function-ref name="getResistor" scoped="" ref="0x102e91340"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e914d0"/>
        <function-ref name="get" scoped="" ref="0x102e91660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e917f0"/>
        <function-ref name="getRaw" scoped="" ref="0x102e91980"/>
        <function-ref name="set" scoped="" ref="0x102e91b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e91ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e91e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e90120"/>
        <function-ref name="clr" scoped="" ref="0x102e902b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102e8d100" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P11"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102e8d100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102e8d480"/>
        <function-ref name="isInput" scoped="" ref="0x102e8d610"/>
        <function-ref name="setResistor" scoped="" ref="0x102e8d7a0"/>
        <function-ref name="toggle" scoped="" ref="0x102e8d930"/>
        <function-ref name="isOutput" scoped="" ref="0x102e8dac0"/>
        <function-ref name="getResistor" scoped="" ref="0x102e8dc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x102e8dde0"/>
        <function-ref name="get" scoped="" ref="0x102e8c020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102e8c1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x102e8c340"/>
        <function-ref name="set" scoped="" ref="0x102e8c4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102e8c660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102e8c7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102e8ca80"/>
        <function-ref name="clr" scoped="" ref="0x102e8cc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102eb2d10" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P12"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102eb2d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102eb10e0"/>
        <function-ref name="isInput" scoped="" ref="0x102eb1270"/>
        <function-ref name="setResistor" scoped="" ref="0x102eb1400"/>
        <function-ref name="toggle" scoped="" ref="0x102eb1590"/>
        <function-ref name="isOutput" scoped="" ref="0x102eb1720"/>
        <function-ref name="getResistor" scoped="" ref="0x102eb18b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102eb1a40"/>
        <function-ref name="get" scoped="" ref="0x102eb1bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102eb1d60"/>
        <function-ref name="getRaw" scoped="" ref="0x102eb0020"/>
        <function-ref name="set" scoped="" ref="0x102eb01b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102eb0340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102eb04d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102eb0760"/>
        <function-ref name="clr" scoped="" ref="0x102eb08f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102ead740" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P13"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102ead740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102eadac0"/>
        <function-ref name="isInput" scoped="" ref="0x102eadc50"/>
        <function-ref name="setResistor" scoped="" ref="0x102eadde0"/>
        <function-ref name="toggle" scoped="" ref="0x102eac020"/>
        <function-ref name="isOutput" scoped="" ref="0x102eac1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x102eac340"/>
        <function-ref name="makeOutput" scoped="" ref="0x102eac4d0"/>
        <function-ref name="get" scoped="" ref="0x102eac660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102eac7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x102eac980"/>
        <function-ref name="set" scoped="" ref="0x102eacb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102eacca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102eace30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102eab120"/>
        <function-ref name="clr" scoped="" ref="0x102eab2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102ea8100" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P14"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102ea8100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102ea8480"/>
        <function-ref name="isInput" scoped="" ref="0x102ea8610"/>
        <function-ref name="setResistor" scoped="" ref="0x102ea87a0"/>
        <function-ref name="toggle" scoped="" ref="0x102ea8930"/>
        <function-ref name="isOutput" scoped="" ref="0x102ea8ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x102ea8c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x102ea8de0"/>
        <function-ref name="get" scoped="" ref="0x102ea7020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102ea71b0"/>
        <function-ref name="getRaw" scoped="" ref="0x102ea7340"/>
        <function-ref name="set" scoped="" ref="0x102ea74d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102ea7660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102ea77f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102ea7a80"/>
        <function-ref name="clr" scoped="" ref="0x102ea7c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102ea4d10" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P15"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102ea4d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102ea30e0"/>
        <function-ref name="isInput" scoped="" ref="0x102ea3270"/>
        <function-ref name="setResistor" scoped="" ref="0x102ea3400"/>
        <function-ref name="toggle" scoped="" ref="0x102ea3590"/>
        <function-ref name="isOutput" scoped="" ref="0x102ea3720"/>
        <function-ref name="getResistor" scoped="" ref="0x102ea38b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102ea3a40"/>
        <function-ref name="get" scoped="" ref="0x102ea3bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102ea3d60"/>
        <function-ref name="getRaw" scoped="" ref="0x102ea2020"/>
        <function-ref name="set" scoped="" ref="0x102ea21b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102ea2340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102ea24d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102ea2760"/>
        <function-ref name="clr" scoped="" ref="0x102ea28f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102ec9740" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P16"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102ec9740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102ec9ac0"/>
        <function-ref name="isInput" scoped="" ref="0x102ec9c50"/>
        <function-ref name="setResistor" scoped="" ref="0x102ec9de0"/>
        <function-ref name="toggle" scoped="" ref="0x102ec8020"/>
        <function-ref name="isOutput" scoped="" ref="0x102ec81b0"/>
        <function-ref name="getResistor" scoped="" ref="0x102ec8340"/>
        <function-ref name="makeOutput" scoped="" ref="0x102ec84d0"/>
        <function-ref name="get" scoped="" ref="0x102ec8660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102ec87f0"/>
        <function-ref name="getRaw" scoped="" ref="0x102ec8980"/>
        <function-ref name="set" scoped="" ref="0x102ec8b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102ec8ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102ec8e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102ec7120"/>
        <function-ref name="clr" scoped="" ref="0x102ec72b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102ec4100" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P17"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102ec4100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102ec4480"/>
        <function-ref name="isInput" scoped="" ref="0x102ec4610"/>
        <function-ref name="setResistor" scoped="" ref="0x102ec47a0"/>
        <function-ref name="toggle" scoped="" ref="0x102ec4930"/>
        <function-ref name="isOutput" scoped="" ref="0x102ec4ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x102ec4c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x102ec4de0"/>
        <function-ref name="get" scoped="" ref="0x102ec3020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102ec31b0"/>
        <function-ref name="getRaw" scoped="" ref="0x102ec3340"/>
        <function-ref name="set" scoped="" ref="0x102ec34d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102ec3660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102ec37f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102ec3a80"/>
        <function-ref name="clr" scoped="" ref="0x102ec3c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102ec0d10" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P20"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102ec0d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102ebf0e0"/>
        <function-ref name="isInput" scoped="" ref="0x102ebf270"/>
        <function-ref name="setResistor" scoped="" ref="0x102ebf400"/>
        <function-ref name="toggle" scoped="" ref="0x102ebf590"/>
        <function-ref name="isOutput" scoped="" ref="0x102ebf720"/>
        <function-ref name="getResistor" scoped="" ref="0x102ebf8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102ebfa40"/>
        <function-ref name="get" scoped="" ref="0x102ebfbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102ebfd60"/>
        <function-ref name="getRaw" scoped="" ref="0x102ebe020"/>
        <function-ref name="set" scoped="" ref="0x102ebe1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102ebe340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102ebe4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102ebe760"/>
        <function-ref name="clr" scoped="" ref="0x102ebe8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102ebb740" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P21"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102ebb740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102ebbac0"/>
        <function-ref name="isInput" scoped="" ref="0x102ebbc50"/>
        <function-ref name="setResistor" scoped="" ref="0x102ebbde0"/>
        <function-ref name="toggle" scoped="" ref="0x102eb9020"/>
        <function-ref name="isOutput" scoped="" ref="0x102eb91b0"/>
        <function-ref name="getResistor" scoped="" ref="0x102eb9340"/>
        <function-ref name="makeOutput" scoped="" ref="0x102eb94d0"/>
        <function-ref name="get" scoped="" ref="0x102eb9660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102eb97f0"/>
        <function-ref name="getRaw" scoped="" ref="0x102eb9980"/>
        <function-ref name="set" scoped="" ref="0x102eb9b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102eb9ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102eb9e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102eb8120"/>
        <function-ref name="clr" scoped="" ref="0x102eb82b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102edf100" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P22"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102edf100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102edf480"/>
        <function-ref name="isInput" scoped="" ref="0x102edf610"/>
        <function-ref name="setResistor" scoped="" ref="0x102edf7a0"/>
        <function-ref name="toggle" scoped="" ref="0x102edf930"/>
        <function-ref name="isOutput" scoped="" ref="0x102edfac0"/>
        <function-ref name="getResistor" scoped="" ref="0x102edfc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x102edfde0"/>
        <function-ref name="get" scoped="" ref="0x102ede020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102ede1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x102ede340"/>
        <function-ref name="set" scoped="" ref="0x102ede4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102ede660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102ede7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102edea80"/>
        <function-ref name="clr" scoped="" ref="0x102edec10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102edbd10" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P23"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102edbd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102eda0e0"/>
        <function-ref name="isInput" scoped="" ref="0x102eda270"/>
        <function-ref name="setResistor" scoped="" ref="0x102eda400"/>
        <function-ref name="toggle" scoped="" ref="0x102eda590"/>
        <function-ref name="isOutput" scoped="" ref="0x102eda720"/>
        <function-ref name="getResistor" scoped="" ref="0x102eda8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102edaa40"/>
        <function-ref name="get" scoped="" ref="0x102edabd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102edad60"/>
        <function-ref name="getRaw" scoped="" ref="0x102ed9020"/>
        <function-ref name="set" scoped="" ref="0x102ed91b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102ed9340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102ed94d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102ed9760"/>
        <function-ref name="clr" scoped="" ref="0x102ed98f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102ed6860" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P24"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102ed6860"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102ed6be0"/>
        <function-ref name="isInput" scoped="" ref="0x102ed6d70"/>
        <function-ref name="setResistor" scoped="" ref="0x102ed5020"/>
        <function-ref name="toggle" scoped="" ref="0x102ed51b0"/>
        <function-ref name="isOutput" scoped="" ref="0x102ed5340"/>
        <function-ref name="getResistor" scoped="" ref="0x102ed54d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102ed5660"/>
        <function-ref name="get" scoped="" ref="0x102ed57f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102ed5980"/>
        <function-ref name="getRaw" scoped="" ref="0x102ed5b10"/>
        <function-ref name="set" scoped="" ref="0x102ed5ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102ed5e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102ed4020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102ed42b0"/>
        <function-ref name="clr" scoped="" ref="0x102ed4440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102ed1270" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P25"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102ed1270"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102ed15f0"/>
        <function-ref name="isInput" scoped="" ref="0x102ed1780"/>
        <function-ref name="setResistor" scoped="" ref="0x102ed1910"/>
        <function-ref name="toggle" scoped="" ref="0x102ed1aa0"/>
        <function-ref name="isOutput" scoped="" ref="0x102ed1c30"/>
        <function-ref name="getResistor" scoped="" ref="0x102ed1dc0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102ed0020"/>
        <function-ref name="get" scoped="" ref="0x102ed01b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102ed0340"/>
        <function-ref name="getRaw" scoped="" ref="0x102ed04d0"/>
        <function-ref name="set" scoped="" ref="0x102ed0660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102ed07f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102ed0980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102ed0c10"/>
        <function-ref name="clr" scoped="" ref="0x102ed0da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102ecdd10" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P26"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102ecdd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102ecc0e0"/>
        <function-ref name="isInput" scoped="" ref="0x102ecc270"/>
        <function-ref name="setResistor" scoped="" ref="0x102ecc400"/>
        <function-ref name="toggle" scoped="" ref="0x102ecc590"/>
        <function-ref name="isOutput" scoped="" ref="0x102ecc720"/>
        <function-ref name="getResistor" scoped="" ref="0x102ecc8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102ecca40"/>
        <function-ref name="get" scoped="" ref="0x102eccbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102eccd60"/>
        <function-ref name="getRaw" scoped="" ref="0x102ecb020"/>
        <function-ref name="set" scoped="" ref="0x102ecb1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102ecb340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102ecb4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102ecb760"/>
        <function-ref name="clr" scoped="" ref="0x102ecb8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102ef3740" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P27"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102ef3740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102ef3ac0"/>
        <function-ref name="isInput" scoped="" ref="0x102ef3c50"/>
        <function-ref name="setResistor" scoped="" ref="0x102ef3de0"/>
        <function-ref name="toggle" scoped="" ref="0x102ef2020"/>
        <function-ref name="isOutput" scoped="" ref="0x102ef21b0"/>
        <function-ref name="getResistor" scoped="" ref="0x102ef2340"/>
        <function-ref name="makeOutput" scoped="" ref="0x102ef24d0"/>
        <function-ref name="get" scoped="" ref="0x102ef2660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102ef27f0"/>
        <function-ref name="getRaw" scoped="" ref="0x102ef2980"/>
        <function-ref name="set" scoped="" ref="0x102ef2b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102ef2ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102ef2e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102ef1120"/>
        <function-ref name="clr" scoped="" ref="0x102ef12b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102eee100" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P30"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102eee100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102eee480"/>
        <function-ref name="isInput" scoped="" ref="0x102eee610"/>
        <function-ref name="setResistor" scoped="" ref="0x102eee7a0"/>
        <function-ref name="toggle" scoped="" ref="0x102eee930"/>
        <function-ref name="isOutput" scoped="" ref="0x102eeeac0"/>
        <function-ref name="getResistor" scoped="" ref="0x102eeec50"/>
        <function-ref name="makeOutput" scoped="" ref="0x102eeede0"/>
        <function-ref name="get" scoped="" ref="0x102eed020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102eed1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x102eed340"/>
        <function-ref name="set" scoped="" ref="0x102eed4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102eed660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102eed7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102eeda80"/>
        <function-ref name="clr" scoped="" ref="0x102eedc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102eead10" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P31"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102eead10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102ee80e0"/>
        <function-ref name="isInput" scoped="" ref="0x102ee8270"/>
        <function-ref name="setResistor" scoped="" ref="0x102ee8400"/>
        <function-ref name="toggle" scoped="" ref="0x102ee8590"/>
        <function-ref name="isOutput" scoped="" ref="0x102ee8720"/>
        <function-ref name="getResistor" scoped="" ref="0x102ee88b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102ee8a40"/>
        <function-ref name="get" scoped="" ref="0x102ee8bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102ee8d60"/>
        <function-ref name="getRaw" scoped="" ref="0x102ee7020"/>
        <function-ref name="set" scoped="" ref="0x102ee71b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102ee7340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102ee74d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102ee7760"/>
        <function-ref name="clr" scoped="" ref="0x102ee78f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102ee4740" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P32"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102ee4740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102ee4ac0"/>
        <function-ref name="isInput" scoped="" ref="0x102ee4c50"/>
        <function-ref name="setResistor" scoped="" ref="0x102ee4de0"/>
        <function-ref name="toggle" scoped="" ref="0x102ee3020"/>
        <function-ref name="isOutput" scoped="" ref="0x102ee31b0"/>
        <function-ref name="getResistor" scoped="" ref="0x102ee3340"/>
        <function-ref name="makeOutput" scoped="" ref="0x102ee34d0"/>
        <function-ref name="get" scoped="" ref="0x102ee3660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102ee37f0"/>
        <function-ref name="getRaw" scoped="" ref="0x102ee3980"/>
        <function-ref name="set" scoped="" ref="0x102ee3b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102ee3ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102ee3e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102ee2120"/>
        <function-ref name="clr" scoped="" ref="0x102ee22b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102f0b100" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P33"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102f0b100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102f0b480"/>
        <function-ref name="isInput" scoped="" ref="0x102f0b610"/>
        <function-ref name="setResistor" scoped="" ref="0x102f0b7a0"/>
        <function-ref name="toggle" scoped="" ref="0x102f0b930"/>
        <function-ref name="isOutput" scoped="" ref="0x102f0bac0"/>
        <function-ref name="getResistor" scoped="" ref="0x102f0bc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x102f0bde0"/>
        <function-ref name="get" scoped="" ref="0x102f0a020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102f0a1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x102f0a340"/>
        <function-ref name="set" scoped="" ref="0x102f0a4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102f0a660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102f0a7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102f0aa80"/>
        <function-ref name="clr" scoped="" ref="0x102f0ac10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102f07d10" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P34"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102f07d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102f060e0"/>
        <function-ref name="isInput" scoped="" ref="0x102f06270"/>
        <function-ref name="setResistor" scoped="" ref="0x102f06400"/>
        <function-ref name="toggle" scoped="" ref="0x102f06590"/>
        <function-ref name="isOutput" scoped="" ref="0x102f06720"/>
        <function-ref name="getResistor" scoped="" ref="0x102f068b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102f06a40"/>
        <function-ref name="get" scoped="" ref="0x102f06bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102f06d60"/>
        <function-ref name="getRaw" scoped="" ref="0x102f05020"/>
        <function-ref name="set" scoped="" ref="0x102f051b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102f05340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102f054d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102f05760"/>
        <function-ref name="clr" scoped="" ref="0x102f058f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102f02740" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P35"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102f02740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102f02ac0"/>
        <function-ref name="isInput" scoped="" ref="0x102f02c50"/>
        <function-ref name="setResistor" scoped="" ref="0x102f02de0"/>
        <function-ref name="toggle" scoped="" ref="0x102f01020"/>
        <function-ref name="isOutput" scoped="" ref="0x102f011b0"/>
        <function-ref name="getResistor" scoped="" ref="0x102f01340"/>
        <function-ref name="makeOutput" scoped="" ref="0x102f014d0"/>
        <function-ref name="get" scoped="" ref="0x102f01660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102f017f0"/>
        <function-ref name="getRaw" scoped="" ref="0x102f01980"/>
        <function-ref name="set" scoped="" ref="0x102f01b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102f01ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102f01e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102f00120"/>
        <function-ref name="clr" scoped="" ref="0x102f002b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102efd100" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P36"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102efd100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102efd480"/>
        <function-ref name="isInput" scoped="" ref="0x102efd610"/>
        <function-ref name="setResistor" scoped="" ref="0x102efd7a0"/>
        <function-ref name="toggle" scoped="" ref="0x102efd930"/>
        <function-ref name="isOutput" scoped="" ref="0x102efdac0"/>
        <function-ref name="getResistor" scoped="" ref="0x102efdc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x102efdde0"/>
        <function-ref name="get" scoped="" ref="0x102efc020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102efc1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x102efc340"/>
        <function-ref name="set" scoped="" ref="0x102efc4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102efc660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102efc7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102efca80"/>
        <function-ref name="clr" scoped="" ref="0x102efcc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102ef9d10" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P37"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102ef9d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102ef80e0"/>
        <function-ref name="isInput" scoped="" ref="0x102ef8270"/>
        <function-ref name="setResistor" scoped="" ref="0x102ef8400"/>
        <function-ref name="toggle" scoped="" ref="0x102ef8590"/>
        <function-ref name="isOutput" scoped="" ref="0x102ef8720"/>
        <function-ref name="getResistor" scoped="" ref="0x102ef88b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102ef8a40"/>
        <function-ref name="get" scoped="" ref="0x102ef8bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102ef8d60"/>
        <function-ref name="getRaw" scoped="" ref="0x102ef7020"/>
        <function-ref name="set" scoped="" ref="0x102ef71b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102ef7340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102ef74d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102ef7760"/>
        <function-ref name="clr" scoped="" ref="0x102ef78f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102f20a60" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P40"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102f20a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102f20de0"/>
        <function-ref name="isInput" scoped="" ref="0x102f1f020"/>
        <function-ref name="setResistor" scoped="" ref="0x102f1f1b0"/>
        <function-ref name="toggle" scoped="" ref="0x102f1f340"/>
        <function-ref name="isOutput" scoped="" ref="0x102f1f4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x102f1f660"/>
        <function-ref name="makeOutput" scoped="" ref="0x102f1f7f0"/>
        <function-ref name="get" scoped="" ref="0x102f1f980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102f1fb10"/>
        <function-ref name="getRaw" scoped="" ref="0x102f1fca0"/>
        <function-ref name="set" scoped="" ref="0x102f1fe30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102f1e020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102f1e1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102f1e440"/>
        <function-ref name="clr" scoped="" ref="0x102f1e5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102f1a460" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P41"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102f1a460"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102f1a7e0"/>
        <function-ref name="isInput" scoped="" ref="0x102f1a970"/>
        <function-ref name="setResistor" scoped="" ref="0x102f1ab00"/>
        <function-ref name="toggle" scoped="" ref="0x102f1ac90"/>
        <function-ref name="isOutput" scoped="" ref="0x102f1ae20"/>
        <function-ref name="getResistor" scoped="" ref="0x102f19020"/>
        <function-ref name="makeOutput" scoped="" ref="0x102f191b0"/>
        <function-ref name="get" scoped="" ref="0x102f19340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102f194d0"/>
        <function-ref name="getRaw" scoped="" ref="0x102f19660"/>
        <function-ref name="set" scoped="" ref="0x102f197f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102f19980"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102f19b10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102f19da0"/>
        <function-ref name="clr" scoped="" ref="0x102f18020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102f16e00" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P42"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102f16e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102f151c0"/>
        <function-ref name="isInput" scoped="" ref="0x102f15350"/>
        <function-ref name="setResistor" scoped="" ref="0x102f154e0"/>
        <function-ref name="toggle" scoped="" ref="0x102f15670"/>
        <function-ref name="isOutput" scoped="" ref="0x102f15800"/>
        <function-ref name="getResistor" scoped="" ref="0x102f15990"/>
        <function-ref name="makeOutput" scoped="" ref="0x102f15b20"/>
        <function-ref name="get" scoped="" ref="0x102f15cb0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102f15e40"/>
        <function-ref name="getRaw" scoped="" ref="0x102f14020"/>
        <function-ref name="set" scoped="" ref="0x102f141b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102f14340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102f144d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102f14760"/>
        <function-ref name="clr" scoped="" ref="0x102f148f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102f11740" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P43"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102f11740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102f11ac0"/>
        <function-ref name="isInput" scoped="" ref="0x102f11c50"/>
        <function-ref name="setResistor" scoped="" ref="0x102f11de0"/>
        <function-ref name="toggle" scoped="" ref="0x102f10020"/>
        <function-ref name="isOutput" scoped="" ref="0x102f101b0"/>
        <function-ref name="getResistor" scoped="" ref="0x102f10340"/>
        <function-ref name="makeOutput" scoped="" ref="0x102f104d0"/>
        <function-ref name="get" scoped="" ref="0x102f10660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102f107f0"/>
        <function-ref name="getRaw" scoped="" ref="0x102f10980"/>
        <function-ref name="set" scoped="" ref="0x102f10b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102f10ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102f10e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102f0f120"/>
        <function-ref name="clr" scoped="" ref="0x102f0f2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102f0c100" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P44"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102f0c100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102f0c480"/>
        <function-ref name="isInput" scoped="" ref="0x102f0c610"/>
        <function-ref name="setResistor" scoped="" ref="0x102f0c7a0"/>
        <function-ref name="toggle" scoped="" ref="0x102f0c930"/>
        <function-ref name="isOutput" scoped="" ref="0x102f0cac0"/>
        <function-ref name="getResistor" scoped="" ref="0x102f0cc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x102f0cde0"/>
        <function-ref name="get" scoped="" ref="0x102f37020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102f371b0"/>
        <function-ref name="getRaw" scoped="" ref="0x102f37340"/>
        <function-ref name="set" scoped="" ref="0x102f374d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102f37660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102f377f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102f37a80"/>
        <function-ref name="clr" scoped="" ref="0x102f37c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102f34d10" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P45"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102f34d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102f330e0"/>
        <function-ref name="isInput" scoped="" ref="0x102f33270"/>
        <function-ref name="setResistor" scoped="" ref="0x102f33400"/>
        <function-ref name="toggle" scoped="" ref="0x102f33590"/>
        <function-ref name="isOutput" scoped="" ref="0x102f33720"/>
        <function-ref name="getResistor" scoped="" ref="0x102f338b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102f33a40"/>
        <function-ref name="get" scoped="" ref="0x102f33bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102f33d60"/>
        <function-ref name="getRaw" scoped="" ref="0x102f32020"/>
        <function-ref name="set" scoped="" ref="0x102f321b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102f32340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102f324d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102f32760"/>
        <function-ref name="clr" scoped="" ref="0x102f328f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102f2f740" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P46"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102f2f740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102f2fac0"/>
        <function-ref name="isInput" scoped="" ref="0x102f2fc50"/>
        <function-ref name="setResistor" scoped="" ref="0x102f2fde0"/>
        <function-ref name="toggle" scoped="" ref="0x102f2e020"/>
        <function-ref name="isOutput" scoped="" ref="0x102f2e1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x102f2e340"/>
        <function-ref name="makeOutput" scoped="" ref="0x102f2e4d0"/>
        <function-ref name="get" scoped="" ref="0x102f2e660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102f2e7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x102f2e980"/>
        <function-ref name="set" scoped="" ref="0x102f2eb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102f2eca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102f2ee30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102f2d120"/>
        <function-ref name="clr" scoped="" ref="0x102f2d2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102f2a100" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P47"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102f2a100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102f2a480"/>
        <function-ref name="isInput" scoped="" ref="0x102f2a610"/>
        <function-ref name="setResistor" scoped="" ref="0x102f2a7a0"/>
        <function-ref name="toggle" scoped="" ref="0x102f2a930"/>
        <function-ref name="isOutput" scoped="" ref="0x102f2aac0"/>
        <function-ref name="getResistor" scoped="" ref="0x102f2ac50"/>
        <function-ref name="makeOutput" scoped="" ref="0x102f2ade0"/>
        <function-ref name="get" scoped="" ref="0x102f29020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102f291b0"/>
        <function-ref name="getRaw" scoped="" ref="0x102f29340"/>
        <function-ref name="set" scoped="" ref="0x102f294d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102f29660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102f297f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102f29a80"/>
        <function-ref name="clr" scoped="" ref="0x102f29c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102f26d10" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P50"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102f26d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102f240e0"/>
        <function-ref name="isInput" scoped="" ref="0x102f24270"/>
        <function-ref name="setResistor" scoped="" ref="0x102f24400"/>
        <function-ref name="toggle" scoped="" ref="0x102f24590"/>
        <function-ref name="isOutput" scoped="" ref="0x102f24720"/>
        <function-ref name="getResistor" scoped="" ref="0x102f248b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102f24a40"/>
        <function-ref name="get" scoped="" ref="0x102f24bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102f24d60"/>
        <function-ref name="getRaw" scoped="" ref="0x102f23020"/>
        <function-ref name="set" scoped="" ref="0x102f231b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102f23340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102f234d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102f23760"/>
        <function-ref name="clr" scoped="" ref="0x102f238f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102f4c740" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P51"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102f4c740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102f4cac0"/>
        <function-ref name="isInput" scoped="" ref="0x102f4cc50"/>
        <function-ref name="setResistor" scoped="" ref="0x102f4cde0"/>
        <function-ref name="toggle" scoped="" ref="0x102f4b020"/>
        <function-ref name="isOutput" scoped="" ref="0x102f4b1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x102f4b340"/>
        <function-ref name="makeOutput" scoped="" ref="0x102f4b4d0"/>
        <function-ref name="get" scoped="" ref="0x102f4b660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102f4b7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x102f4b980"/>
        <function-ref name="set" scoped="" ref="0x102f4bb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102f4bca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102f4be30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102f4a120"/>
        <function-ref name="clr" scoped="" ref="0x102f4a2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102f47100" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P52"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102f47100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102f47480"/>
        <function-ref name="isInput" scoped="" ref="0x102f47610"/>
        <function-ref name="setResistor" scoped="" ref="0x102f477a0"/>
        <function-ref name="toggle" scoped="" ref="0x102f47930"/>
        <function-ref name="isOutput" scoped="" ref="0x102f47ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x102f47c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x102f47de0"/>
        <function-ref name="get" scoped="" ref="0x102f46020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102f461b0"/>
        <function-ref name="getRaw" scoped="" ref="0x102f46340"/>
        <function-ref name="set" scoped="" ref="0x102f464d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102f46660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102f467f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102f46a80"/>
        <function-ref name="clr" scoped="" ref="0x102f46c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102f43d10" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P53"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102f43d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102f420e0"/>
        <function-ref name="isInput" scoped="" ref="0x102f42270"/>
        <function-ref name="setResistor" scoped="" ref="0x102f42400"/>
        <function-ref name="toggle" scoped="" ref="0x102f42590"/>
        <function-ref name="isOutput" scoped="" ref="0x102f42720"/>
        <function-ref name="getResistor" scoped="" ref="0x102f428b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102f42a40"/>
        <function-ref name="get" scoped="" ref="0x102f42bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102f42d60"/>
        <function-ref name="getRaw" scoped="" ref="0x102f41020"/>
        <function-ref name="set" scoped="" ref="0x102f411b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102f41340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102f414d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102f41760"/>
        <function-ref name="clr" scoped="" ref="0x102f418f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102f3e740" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P54"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102f3e740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102f3eac0"/>
        <function-ref name="isInput" scoped="" ref="0x102f3ec50"/>
        <function-ref name="setResistor" scoped="" ref="0x102f3ede0"/>
        <function-ref name="toggle" scoped="" ref="0x102f3d020"/>
        <function-ref name="isOutput" scoped="" ref="0x102f3d1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x102f3d340"/>
        <function-ref name="makeOutput" scoped="" ref="0x102f3d4d0"/>
        <function-ref name="get" scoped="" ref="0x102f3d660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102f3d7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x102f3d980"/>
        <function-ref name="set" scoped="" ref="0x102f3db10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102f3dca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102f3de30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102f3c120"/>
        <function-ref name="clr" scoped="" ref="0x102f3c2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102f39100" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P55"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102f39100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102f39480"/>
        <function-ref name="isInput" scoped="" ref="0x102f39610"/>
        <function-ref name="setResistor" scoped="" ref="0x102f397a0"/>
        <function-ref name="toggle" scoped="" ref="0x102f39930"/>
        <function-ref name="isOutput" scoped="" ref="0x102f39ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x102f39c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x102f39de0"/>
        <function-ref name="get" scoped="" ref="0x102f38020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102f381b0"/>
        <function-ref name="getRaw" scoped="" ref="0x102f38340"/>
        <function-ref name="set" scoped="" ref="0x102f384d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102f38660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102f387f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102f38a80"/>
        <function-ref name="clr" scoped="" ref="0x102f38c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102f61d10" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P56"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102f61d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102f600e0"/>
        <function-ref name="isInput" scoped="" ref="0x102f60270"/>
        <function-ref name="setResistor" scoped="" ref="0x102f60400"/>
        <function-ref name="toggle" scoped="" ref="0x102f60590"/>
        <function-ref name="isOutput" scoped="" ref="0x102f60720"/>
        <function-ref name="getResistor" scoped="" ref="0x102f608b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102f60a40"/>
        <function-ref name="get" scoped="" ref="0x102f60bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102f60d60"/>
        <function-ref name="getRaw" scoped="" ref="0x102f5f020"/>
        <function-ref name="set" scoped="" ref="0x102f5f1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102f5f340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102f5f4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102f5f760"/>
        <function-ref name="clr" scoped="" ref="0x102f5f8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102f5c740" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P57"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102f5c740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102f5cac0"/>
        <function-ref name="isInput" scoped="" ref="0x102f5cc50"/>
        <function-ref name="setResistor" scoped="" ref="0x102f5cde0"/>
        <function-ref name="toggle" scoped="" ref="0x102f5b020"/>
        <function-ref name="isOutput" scoped="" ref="0x102f5b1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x102f5b340"/>
        <function-ref name="makeOutput" scoped="" ref="0x102f5b4d0"/>
        <function-ref name="get" scoped="" ref="0x102f5b660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102f5b7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x102f5b980"/>
        <function-ref name="set" scoped="" ref="0x102f5bb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102f5bca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102f5be30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102f5a120"/>
        <function-ref name="clr" scoped="" ref="0x102f5a2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102f57100" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P60"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102f57100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102f57480"/>
        <function-ref name="isInput" scoped="" ref="0x102f57610"/>
        <function-ref name="setResistor" scoped="" ref="0x102f577a0"/>
        <function-ref name="toggle" scoped="" ref="0x102f57930"/>
        <function-ref name="isOutput" scoped="" ref="0x102f57ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x102f57c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x102f57de0"/>
        <function-ref name="get" scoped="" ref="0x102f55020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102f551b0"/>
        <function-ref name="getRaw" scoped="" ref="0x102f55340"/>
        <function-ref name="set" scoped="" ref="0x102f554d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102f55660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102f557f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102f55a80"/>
        <function-ref name="clr" scoped="" ref="0x102f55c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102f52d10" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P61"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102f52d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102f510e0"/>
        <function-ref name="isInput" scoped="" ref="0x102f51270"/>
        <function-ref name="setResistor" scoped="" ref="0x102f51400"/>
        <function-ref name="toggle" scoped="" ref="0x102f51590"/>
        <function-ref name="isOutput" scoped="" ref="0x102f51720"/>
        <function-ref name="getResistor" scoped="" ref="0x102f518b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102f51a40"/>
        <function-ref name="get" scoped="" ref="0x102f51bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102f51d60"/>
        <function-ref name="getRaw" scoped="" ref="0x102f50020"/>
        <function-ref name="set" scoped="" ref="0x102f501b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102f50340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102f504d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102f50760"/>
        <function-ref name="clr" scoped="" ref="0x102f508f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102f7a740" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P62"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102f7a740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102f7aac0"/>
        <function-ref name="isInput" scoped="" ref="0x102f7ac50"/>
        <function-ref name="setResistor" scoped="" ref="0x102f7ade0"/>
        <function-ref name="toggle" scoped="" ref="0x102f79020"/>
        <function-ref name="isOutput" scoped="" ref="0x102f791b0"/>
        <function-ref name="getResistor" scoped="" ref="0x102f79340"/>
        <function-ref name="makeOutput" scoped="" ref="0x102f794d0"/>
        <function-ref name="get" scoped="" ref="0x102f79660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102f797f0"/>
        <function-ref name="getRaw" scoped="" ref="0x102f79980"/>
        <function-ref name="set" scoped="" ref="0x102f79b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102f79ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102f79e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102f78120"/>
        <function-ref name="clr" scoped="" ref="0x102f782b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102f75100" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P63"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102f75100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102f75480"/>
        <function-ref name="isInput" scoped="" ref="0x102f75610"/>
        <function-ref name="setResistor" scoped="" ref="0x102f757a0"/>
        <function-ref name="toggle" scoped="" ref="0x102f75930"/>
        <function-ref name="isOutput" scoped="" ref="0x102f75ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x102f75c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x102f75de0"/>
        <function-ref name="get" scoped="" ref="0x102f74020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102f741b0"/>
        <function-ref name="getRaw" scoped="" ref="0x102f74340"/>
        <function-ref name="set" scoped="" ref="0x102f744d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102f74660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102f747f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102f74a80"/>
        <function-ref name="clr" scoped="" ref="0x102f74c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102f71d10" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P64"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102f71d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102f700e0"/>
        <function-ref name="isInput" scoped="" ref="0x102f70270"/>
        <function-ref name="setResistor" scoped="" ref="0x102f70400"/>
        <function-ref name="toggle" scoped="" ref="0x102f70590"/>
        <function-ref name="isOutput" scoped="" ref="0x102f70720"/>
        <function-ref name="getResistor" scoped="" ref="0x102f708b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102f70a40"/>
        <function-ref name="get" scoped="" ref="0x102f70bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102f70d60"/>
        <function-ref name="getRaw" scoped="" ref="0x102f6f020"/>
        <function-ref name="set" scoped="" ref="0x102f6f1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102f6f340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102f6f4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102f6f760"/>
        <function-ref name="clr" scoped="" ref="0x102f6f8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102f6c740" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P65"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102f6c740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102f6cac0"/>
        <function-ref name="isInput" scoped="" ref="0x102f6cc50"/>
        <function-ref name="setResistor" scoped="" ref="0x102f6cde0"/>
        <function-ref name="toggle" scoped="" ref="0x102f6b020"/>
        <function-ref name="isOutput" scoped="" ref="0x102f6b1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x102f6b340"/>
        <function-ref name="makeOutput" scoped="" ref="0x102f6b4d0"/>
        <function-ref name="get" scoped="" ref="0x102f6b660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102f6b7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x102f6b980"/>
        <function-ref name="set" scoped="" ref="0x102f6bb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102f6bca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102f6be30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102f6a120"/>
        <function-ref name="clr" scoped="" ref="0x102f6a2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102f67100" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P66"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102f67100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102f67480"/>
        <function-ref name="isInput" scoped="" ref="0x102f67610"/>
        <function-ref name="setResistor" scoped="" ref="0x102f677a0"/>
        <function-ref name="toggle" scoped="" ref="0x102f67930"/>
        <function-ref name="isOutput" scoped="" ref="0x102f67ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x102f67c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x102f67de0"/>
        <function-ref name="get" scoped="" ref="0x102f66020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102f661b0"/>
        <function-ref name="getRaw" scoped="" ref="0x102f66340"/>
        <function-ref name="set" scoped="" ref="0x102f664d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102f66660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102f667f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102f66a80"/>
        <function-ref name="clr" scoped="" ref="0x102f66c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x102f91d10" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P67"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x102f91d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102f900e0"/>
        <function-ref name="isInput" scoped="" ref="0x102f90270"/>
        <function-ref name="setResistor" scoped="" ref="0x102f90400"/>
        <function-ref name="toggle" scoped="" ref="0x102f90590"/>
        <function-ref name="isOutput" scoped="" ref="0x102f90720"/>
        <function-ref name="getResistor" scoped="" ref="0x102f908b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102f90a40"/>
        <function-ref name="get" scoped="" ref="0x102f90bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102f90d60"/>
        <function-ref name="getRaw" scoped="" ref="0x102f8f020"/>
        <function-ref name="set" scoped="" ref="0x102f8f1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102f8f340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102f8f4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102f8f760"/>
        <function-ref name="clr" scoped="" ref="0x102f8f8f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x102ff62f0" loc="44:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x102ff62f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102ff6670"/>
        <function-ref name="isInput" scoped="" ref="0x102ff6800"/>
        <function-ref name="setResistor" scoped="" ref="0x102ff6990"/>
        <function-ref name="toggle" scoped="" ref="0x102ff6b20"/>
        <function-ref name="isOutput" scoped="" ref="0x102ff6cb0"/>
        <function-ref name="getResistor" scoped="" ref="0x102ff6e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x102ff5020"/>
        <function-ref name="get" scoped="" ref="0x102ff51b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102ff5340"/>
        <function-ref name="getRaw" scoped="" ref="0x102ff54d0"/>
        <function-ref name="set" scoped="" ref="0x102ff5660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102ff57f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102ff5980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102ff5c10"/>
        <function-ref name="clr" scoped="" ref="0x102ff5da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x102fd8020" loc="43:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x102fd8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102fd83a0"/>
        <function-ref name="isInput" scoped="" ref="0x102fd8530"/>
        <function-ref name="toggle" scoped="" ref="0x102fd86c0"/>
        <function-ref name="isOutput" scoped="" ref="0x102fd8850"/>
        <function-ref name="get" scoped="" ref="0x102fd89e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102fd8b70"/>
        <function-ref name="set" scoped="" ref="0x102fd8d00"/>
        <function-ref name="clr" scoped="" ref="0x102ff6020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x102ff2de0" loc="44:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x102ff2de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102ff1180"/>
        <function-ref name="isInput" scoped="" ref="0x102ff1310"/>
        <function-ref name="setResistor" scoped="" ref="0x102ff14a0"/>
        <function-ref name="toggle" scoped="" ref="0x102ff1630"/>
        <function-ref name="isOutput" scoped="" ref="0x102ff17c0"/>
        <function-ref name="getResistor" scoped="" ref="0x102ff1950"/>
        <function-ref name="makeOutput" scoped="" ref="0x102ff1ae0"/>
        <function-ref name="get" scoped="" ref="0x102ff1c70"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102ff1e00"/>
        <function-ref name="getRaw" scoped="" ref="0x102ff0020"/>
        <function-ref name="set" scoped="" ref="0x102ff01b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102ff0340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102ff04d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102ff0760"/>
        <function-ref name="clr" scoped="" ref="0x102ff08f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x102ff3b90" loc="43:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x102ff3b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102ff2020"/>
        <function-ref name="isInput" scoped="" ref="0x102ff21b0"/>
        <function-ref name="toggle" scoped="" ref="0x102ff2340"/>
        <function-ref name="isOutput" scoped="" ref="0x102ff24d0"/>
        <function-ref name="get" scoped="" ref="0x102ff2660"/>
        <function-ref name="makeOutput" scoped="" ref="0x102ff27f0"/>
        <function-ref name="set" scoped="" ref="0x102ff2980"/>
        <function-ref name="clr" scoped="" ref="0x102ff2b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x102fed930" loc="44:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x102fed930"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102fedcb0"/>
        <function-ref name="isInput" scoped="" ref="0x102fede40"/>
        <function-ref name="setResistor" scoped="" ref="0x102fec020"/>
        <function-ref name="toggle" scoped="" ref="0x102fec1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x102fec340"/>
        <function-ref name="getResistor" scoped="" ref="0x102fec4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102fec660"/>
        <function-ref name="get" scoped="" ref="0x102fec7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x102fec980"/>
        <function-ref name="getRaw" scoped="" ref="0x102fecb10"/>
        <function-ref name="set" scoped="" ref="0x102fecca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x102fece30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x102feb020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x102feb2b0"/>
        <function-ref name="clr" scoped="" ref="0x102feb440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x102fee710" loc="43:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x102fee710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x102feea90"/>
        <function-ref name="isInput" scoped="" ref="0x102feec20"/>
        <function-ref name="toggle" scoped="" ref="0x102feedb0"/>
        <function-ref name="isOutput" scoped="" ref="0x102fed020"/>
        <function-ref name="get" scoped="" ref="0x102fed1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x102fed340"/>
        <function-ref name="set" scoped="" ref="0x102fed4d0"/>
        <function-ref name="clr" scoped="" ref="0x102fed660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x1031cc370" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="BasicAppC.Timer0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x1031cc370"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x102d668c0"/>
            <typename><typedef-ref name="TMilli" ref="0x102d66c30"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x1031c9870"/>
        <function-ref name="fired" scoped="" ref="0x1031cbe40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x1031cac00"/>
        <function-ref name="isOneShot" scoped="" ref="0x1031ca780"/>
        <function-ref name="getdt" scoped="" ref="0x1031c71e0"/>
        <function-ref name="gett0" scoped="" ref="0x1031c9cf0"/>
        <function-ref name="isRunning" scoped="" ref="0x1031ca300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x1031cb020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x1031c9260"/>
        <function-ref name="startOneShot" scoped="" ref="0x1031cb4f0"/>
        <function-ref name="stop" scoped="" ref="0x1031cb9c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x103006610" loc="49:../../tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x103006610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x102d668c0"/>
            <typename><typedef-ref name="TMilli" ref="0x102d66c30"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10247c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x103002c40"/>
        <function-ref name="fired" scoped="" ref="0x1030031e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x103002020"/>
        <function-ref name="isOneShot" scoped="" ref="0x103003ae0"/>
        <function-ref name="getdt" scoped="" ref="0x103031590"/>
        <function-ref name="gett0" scoped="" ref="0x103031110"/>
        <function-ref name="isRunning" scoped="" ref="0x103003660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x103005390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x103002630"/>
        <function-ref name="startOneShot" scoped="" ref="0x103005860"/>
        <function-ref name="stop" scoped="" ref="0x103005d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x10302c1d0" loc="46:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x10302c1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x102d668c0"/>
            <typename><typedef-ref name="TMilli" ref="0x102d66c30"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10247c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x103028630"/>
        <function-ref name="fired" scoped="" ref="0x10302bc30"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x1030299d0"/>
        <function-ref name="isOneShot" scoped="" ref="0x103029550"/>
        <function-ref name="getdt" scoped="" ref="0x103027020"/>
        <function-ref name="gett0" scoped="" ref="0x103028ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x1030290d0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x10302cdc0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x103028020"/>
        <function-ref name="startOneShot" scoped="" ref="0x10302b2e0"/>
        <function-ref name="stop" scoped="" ref="0x10302b7b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x103023a80" loc="47:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x103023a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x102d668c0"/>
            <typename><typedef-ref name="TMilli" ref="0x102d66c30"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x1030256f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x10302d3e0" loc="45:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x10302d3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10302d760"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x103129870" loc="44:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x103129870"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x102d668c0"/>
            <typename><typedef-ref name="TMilli" ref="0x102d66c30"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x10247c920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x103126090"/>
        <function-ref name="fired" scoped="" ref="0x103127090"/>
        <function-ref name="startAt" scoped="" ref="0x103127a10"/>
        <function-ref name="isRunning" scoped="" ref="0x103127550"/>
        <function-ref name="getAlarm" scoped="" ref="0x103126550"/>
        <function-ref name="start" scoped="" ref="0x1031286a0"/>
        <function-ref name="stop" scoped="" ref="0x103128bb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x103129020" loc="43:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x103129020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x1031293a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x10368a4f0" loc="44:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x10368a4f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x102d650c0"/>
            <typename><typedef-ref name="T32khz" ref="0x102d65430"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x10247c520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x103688db0"/>
        <function-ref name="fired" scoped="" ref="0x103689da0"/>
        <function-ref name="startAt" scoped="" ref="0x103688760"/>
        <function-ref name="isRunning" scoped="" ref="0x1036882a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x1036872a0"/>
        <function-ref name="start" scoped="" ref="0x1036893d0"/>
        <function-ref name="stop" scoped="" ref="0x1036898e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x10368cc40" loc="43:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x10368cc40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x10368a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x1036bcda0" loc="41:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x1036bcda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x1036bb180"/>
        <function-ref name="setEvent" scoped="" ref="0x1036bb310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x1036bb4a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x1036bb630"/>
        <function-ref name="fired" scoped="" ref="0x1036bb7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x1036be340" loc="39:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x1036be340"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x1036be6c0"/>
        <function-ref name="setClockSource" scoped="" ref="0x1036be850"/>
        <function-ref name="enableEvents" scoped="" ref="0x1036be9e0"/>
        <function-ref name="get" scoped="" ref="0x1036beb70"/>
        <function-ref name="disableEvents" scoped="" ref="0x1036bed00"/>
        <function-ref name="clearOverflow" scoped="" ref="0x1036bd020"/>
        <function-ref name="getMode" scoped="" ref="0x1036bd1b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x1036bd340"/>
        <function-ref name="overflow" scoped="" ref="0x1036bd4d0"/>
        <function-ref name="setMode" scoped="" ref="0x1036bd660"/>
        <function-ref name="setInputDivider" scoped="" ref="0x1036bd7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x1036bda80" loc="40:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x1036bda80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x1036bde00"/>
        <function-ref name="getControl" scoped="" ref="0x1036bc020"/>
        <function-ref name="enableEvents" scoped="" ref="0x1036bc1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x1036bc340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x1036bc4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x1036bc660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x1036bc7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x1036bc980"/>
        <function-ref name="setControl" scoped="" ref="0x1036bcb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x10305f020" loc="52:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x10305f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10247c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x10305f3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x10305f530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x10305f6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x10305f850"/>
        <function-ref name="fired" scoped="" ref="0x10305f9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x1030358b0" loc="50:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x1030358b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10247c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x103035c30"/>
        <function-ref name="setClockSource" scoped="" ref="0x103035dc0"/>
        <function-ref name="enableEvents" scoped="" ref="0x103033020"/>
        <function-ref name="get" scoped="" ref="0x1030331b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x103033340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x1030334d0"/>
        <function-ref name="getMode" scoped="" ref="0x103033660"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x1030337f0"/>
        <function-ref name="overflow" scoped="" ref="0x103033980"/>
        <function-ref name="setMode" scoped="" ref="0x103033b10"/>
        <function-ref name="setInputDivider" scoped="" ref="0x103033ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x103032560" loc="51:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x103032560"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10247c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x1030328e0"/>
        <function-ref name="getControl" scoped="" ref="0x103032a70"/>
        <function-ref name="enableEvents" scoped="" ref="0x103032c00"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x103032d90"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x103061020"/>
        <function-ref name="disableEvents" scoped="" ref="0x1030611b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x103061340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x1030614d0"/>
        <function-ref name="setControl" scoped="" ref="0x103061660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x1036b2a80" loc="49:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x1036b2a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x1036b2e00"/>
        <function-ref name="setEvent" scoped="" ref="0x1036b1020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x1036b11b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x1036b1340"/>
        <function-ref name="fired" scoped="" ref="0x1036b14d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x1036b4190" loc="47:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x1036b4190"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x1036b4510"/>
        <function-ref name="setClockSource" scoped="" ref="0x1036b46a0"/>
        <function-ref name="enableEvents" scoped="" ref="0x1036b4830"/>
        <function-ref name="get" scoped="" ref="0x1036b49c0"/>
        <function-ref name="disableEvents" scoped="" ref="0x1036b4b50"/>
        <function-ref name="clearOverflow" scoped="" ref="0x1036b4ce0"/>
        <function-ref name="getMode" scoped="" ref="0x1036b4e70"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x1036b3030"/>
        <function-ref name="overflow" scoped="" ref="0x1036b31c0"/>
        <function-ref name="setMode" scoped="" ref="0x1036b3350"/>
        <function-ref name="setInputDivider" scoped="" ref="0x1036b34e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x1036b8020" loc="46:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x1036b8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x102d650c0"/>
            <typename><typedef-ref name="T32khz" ref="0x102d65430"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x10247c520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x1036b5870"/>
        <function-ref name="fired" scoped="" ref="0x1036b7840"/>
        <function-ref name="startAt" scoped="" ref="0x1036b5220"/>
        <function-ref name="isRunning" scoped="" ref="0x1036b7d00"/>
        <function-ref name="getAlarm" scoped="" ref="0x1036b5d30"/>
        <function-ref name="start" scoped="" ref="0x1036b8e30"/>
        <function-ref name="stop" scoped="" ref="0x1036b7380"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x1036b9660" loc="45:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x1036b9660"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x1036b99e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x1036b3770" loc="48:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x1036b3770"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x1036b3af0"/>
        <function-ref name="getControl" scoped="" ref="0x1036b3c80"/>
        <function-ref name="enableEvents" scoped="" ref="0x1036b3e10"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x1036b2020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x1036b21b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x1036b2340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x1036b24d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x1036b2660"/>
        <function-ref name="setControl" scoped="" ref="0x1036b27f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x1030a38c0" loc="43:../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <component-ref qname="CounterMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x1030a38c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x102d668c0"/>
            <typename><typedef-ref name="TMilli" ref="0x102d66c30"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x10247c920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x1030a7700"/>
        <function-ref name="clearOverflow" scoped="" ref="0x1030a20d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x1030a7bc0"/>
        <function-ref name="overflow" scoped="" ref="0x1030a2590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Counter32khz" ref="0x1030a18e0" loc="43:../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <component-ref qname="Msp430Counter32khzC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Counter32khz" scoped="" ref="0x1030a18e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x102d650c0"/>
            <typename><typedef-ref name="T32khz" ref="0x102d65430"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x10247c520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x10309e780"/>
        <function-ref name="clearOverflow" scoped="" ref="0x10309d150"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x10309ec40"/>
        <function-ref name="overflow" scoped="" ref="0x10309d610"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x1030bec50" loc="45:../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x1030bec50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x1030bd020"/>
        <function-ref name="setClockSource" scoped="" ref="0x1030bd1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x1030bd340"/>
        <function-ref name="get" scoped="" ref="0x1030bd4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x1030bd660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x1030bd7f0"/>
        <function-ref name="getMode" scoped="" ref="0x1030bd980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x1030bdb10"/>
        <function-ref name="overflow" scoped="" ref="0x1030bdca0"/>
        <function-ref name="setMode" scoped="" ref="0x1030bde30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x1030bc020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x10309bb80" loc="44:../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x10309bb80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x102d650c0"/>
            <typename><typedef-ref name="T32khz" ref="0x102d65430"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x10247c520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x10309a9b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x1030be360"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x10309ae70"/>
        <function-ref name="overflow" scoped="" ref="0x1030be820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x1030cd0f0" loc="63:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CounterFrom" scoped="" ref="0x1030cd0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x102d650c0"/>
            <typename><typedef-ref name="T32khz" ref="0x102d65430"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x10247c520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x1030cb020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x1030cb9a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x1030cb4e0"/>
        <function-ref name="overflow" scoped="" ref="0x1030cbe60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x1030b8cf0" loc="62:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x1030b8cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x102d668c0"/>
            <typename><typedef-ref name="TMilli" ref="0x102d66c30"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x10247c920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x1030cfb60"/>
        <function-ref name="clearOverflow" scoped="" ref="0x1030ce550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x1030ce090"/>
        <function-ref name="overflow" scoped="" ref="0x1030cea10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x103685890" loc="61:../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x103685890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x102d668c0"/>
            <typename><typedef-ref name="TMilli" ref="0x102d66c30"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x10247c920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x1036810d0"/>
        <function-ref name="fired" scoped="" ref="0x1036820d0"/>
        <function-ref name="startAt" scoped="" ref="0x103682a50"/>
        <function-ref name="isRunning" scoped="" ref="0x103682590"/>
        <function-ref name="getAlarm" scoped="" ref="0x103681590"/>
        <function-ref name="start" scoped="" ref="0x1036836e0"/>
        <function-ref name="stop" scoped="" ref="0x103683bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x10367d0a0" loc="73:../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x10367d0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x102d650c0"/>
            <typename><typedef-ref name="T32khz" ref="0x102d65430"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x10247c520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x10367bb30"/>
        <function-ref name="fired" scoped="" ref="0x10367c9f0"/>
        <function-ref name="startAt" scoped="" ref="0x10367b4e0"/>
        <function-ref name="isRunning" scoped="" ref="0x10367b020"/>
        <function-ref name="getAlarm" scoped="" ref="0x10367a020"/>
        <function-ref name="start" scoped="" ref="0x10367c020"/>
        <function-ref name="stop" scoped="" ref="0x10367c530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x103681c00" loc="68:../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x103681c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x102d668c0"/>
            <typename><typedef-ref name="TMilli" ref="0x102d66c30"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x10247c920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x103680a80"/>
        <function-ref name="clearOverflow" scoped="" ref="0x10367f4e0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x10367f020"/>
        <function-ref name="overflow" scoped="" ref="0x10367f9a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x10315c9c0" loc="74:../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="fired" scoped="" ref="0x10315c9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x10315cd40"/>
        <function-ref name="runTask" scoped="" ref="0x10315b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x103160850" loc="49:../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x103160850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x102d668c0"/>
            <typename><typedef-ref name="TMilli" ref="0x102d66c30"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x10247c920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x10315c090"/>
        <function-ref name="fired" scoped="" ref="0x10315d090"/>
        <function-ref name="startAt" scoped="" ref="0x10315da10"/>
        <function-ref name="isRunning" scoped="" ref="0x10315d550"/>
        <function-ref name="getAlarm" scoped="" ref="0x10315c550"/>
        <function-ref name="start" scoped="" ref="0x10315f6a0"/>
        <function-ref name="stop" scoped="" ref="0x10315fbb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x1031312f0" loc="48:../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x1031312f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x102d668c0"/>
            <typename><typedef-ref name="TMilli" ref="0x102d66c30"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x103161870"/>
        <function-ref name="fired" scoped="" ref="0x103130e40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x103162c00"/>
        <function-ref name="isOneShot" scoped="" ref="0x103162780"/>
        <function-ref name="getdt" scoped="" ref="0x1031601e0"/>
        <function-ref name="gett0" scoped="" ref="0x103161cf0"/>
        <function-ref name="isRunning" scoped="" ref="0x103162300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x103130020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x103161260"/>
        <function-ref name="startOneShot" scoped="" ref="0x1031304f0"/>
        <function-ref name="stop" scoped="" ref="0x1031309c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x1031aca00" loc="71:../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="updateFromTimer" scoped="" ref="0x1031aca00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x1031acd80"/>
        <function-ref name="runTask" scoped="" ref="0x1031ab020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x1031b1640" loc="49:../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerFrom" scoped="" ref="0x1031b1640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x102d668c0"/>
            <typename><typedef-ref name="TMilli" ref="0x102d66c30"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x1031adc40"/>
        <function-ref name="fired" scoped="" ref="0x1031ae1e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x1031ad020"/>
        <function-ref name="isOneShot" scoped="" ref="0x1031aeae0"/>
        <function-ref name="getdt" scoped="" ref="0x1031ac590"/>
        <function-ref name="gett0" scoped="" ref="0x1031ac110"/>
        <function-ref name="isRunning" scoped="" ref="0x1031ae660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x1031b0390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x1031ad630"/>
        <function-ref name="startOneShot" scoped="" ref="0x1031b0860"/>
        <function-ref name="stop" scoped="" ref="0x1031b0d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x103181150" loc="48:../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x103181150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x102d668c0"/>
            <typename><typedef-ref name="TMilli" ref="0x102d66c30"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x10247c160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x1031b3700"/>
        <function-ref name="fired" scoped="" ref="0x103180c30"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x10317ea50"/>
        <function-ref name="isOneShot" scoped="" ref="0x10317e5b0"/>
        <function-ref name="getdt" scoped="" ref="0x1031b1090"/>
        <function-ref name="gett0" scoped="" ref="0x1031b3ba0"/>
        <function-ref name="isRunning" scoped="" ref="0x10317e110"/>
        <function-ref name="startPeriodic" scoped="" ref="0x103181d60"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x1031b30d0"/>
        <function-ref name="startOneShot" scoped="" ref="0x1031802a0"/>
        <function-ref name="stop" scoped="" ref="0x103180790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x1031a8790" loc="48:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x1031a8790"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x102d668c0"/>
            <typename><typedef-ref name="TMilli" ref="0x102d66c30"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x1031a73f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x1031a7a60" loc="49:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x1031a7a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x102d668c0"/>
            <typename><typedef-ref name="TMilli" ref="0x102d66c30"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x10247c920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x10319d890"/>
        <function-ref name="clearOverflow" scoped="" ref="0x10319c260"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x10319dd50"/>
        <function-ref name="overflow" scoped="" ref="0x10319c720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x1031c6c90" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="BasicAppC.Timer1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x1031c6c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x102d668c0"/>
            <typename><typedef-ref name="TMilli" ref="0x102d66c30"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x1031c1170"/>
        <function-ref name="fired" scoped="" ref="0x1031c4720"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x1031c3510"/>
        <function-ref name="isOneShot" scoped="" ref="0x1031c3090"/>
        <function-ref name="getdt" scoped="" ref="0x1031c1a70"/>
        <function-ref name="gett0" scoped="" ref="0x1031c15f0"/>
        <function-ref name="isRunning" scoped="" ref="0x1031c4ba0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x1031c58a0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x1031c3b20"/>
        <function-ref name="startOneShot" scoped="" ref="0x1031c5d70"/>
        <function-ref name="stop" scoped="" ref="0x1031c42a0"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Init" loc="51:../../tos/interfaces/Init.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x102b92a10" loc="62:../../tos/interfaces/Init.nc">
        <documentation loc="53:../../tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10270f980"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:../../tos/interfaces/Boot.nc">
      <documentation loc="42:../../tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x102b905d0" loc="60:../../tos/interfaces/Boot.nc">
        <documentation loc="51:../../tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430ClockInit" loc="38:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="defaultInitTimerB" ref="0x102bd9840" loc="48:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerB" ref="0x102bbdb00" loc="43:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitTimerA" ref="0x102bd9120" loc="47:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerA" ref="0x102bbd420" loc="42:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultSetupDcoCalibrate" ref="0x102bbc2b0" loc="45:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="setupDcoCalibrate" ref="0x102bbf600" loc="40:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initClocks" ref="0x102bbfce0" loc="41:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitClocks" ref="0x102bbc9d0" loc="46:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:../../tos/interfaces/McuPowerOverride.nc">
      <documentation loc="35:../../tos/interfaces/McuPowerOverride.nc">
        <short>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state.</short>
        <long>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state. This is sometimes necessary,&#10; e.g., if a very low power state has a long wakeup latency that will&#10; violate application timing requirements. TEP 112 describes how&#10; TinyOS incorporates this information when the Scheduler tells&#10; the MCU to enter a low power state.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microconroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x102a8f070" loc="62:../../tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:../../tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x1027c1670"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerControl" loc="40:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="setControlAsCapture" ref="0x102c25020" loc="55:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <documentation loc="49:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
          <short> &#10; Sets the timer in capture mode.</short>
          <long> &#10; Sets the timer in capture mode.&#10; @param cm configures the capture to occur on none, rising, falling or rising_and_falling edges&#10; Msp430Timer.h has convenience definitions:&#10; MSP430TIMER_CM_NONE, MSP430TIMER_CM_RISING, MSP430TIMER_CM_FALLING, MSP430TIMER_CM_BOTH&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10247c160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x102c26cc0" loc="55:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10247c160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControl" ref="0x102c29390" loc="42:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x102bd15a0"/>
            <typename><typedef-ref name="msp430_compare_control_t" ref="0x102bcf440"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x102c25890" loc="57:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="areEventsEnabled" ref="0x102c247b0" loc="59:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10270c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlAsCompare" ref="0x102c26560" loc="47:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x102c24020" loc="58:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x102c29b30" loc="43:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10270c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearPendingInterrupt" ref="0x102c28350" loc="44:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x102c28da0" loc="46:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x102bd15a0"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x102bcf440"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x102c28b20" loc="46:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x102bd15a0"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x102bcf440"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Capture" loc="39:../../tos/chips/msp430/timer/Msp430Capture.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430Capture.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x102c380e0" loc="44:../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="41:../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Reads the value of the last capture event in TxCCRx&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x10247c520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSynchronous" ref="0x102c35630" loc="79:../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="70:../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set whether the capture should occur synchronously or asynchronously.</short>
          <long>&#10; Set whether the capture should occur synchronously or asynchronously.&#10; TinyOS default is synchronous captures.&#10; WARNING: if the capture signal is asynchronous to the timer clock,&#10;          it could case a race condition (see Timer documentation&#10;          in MSP430F1xx user guide)&#10; @param synchronous TRUE to synchronize the timer capture with the&#10;        next timer clock instead of occurring asynchronously.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x10270c090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="synchronous" ref="0x102c353b0" loc="79:../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x10270c090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x102c342a0" loc="86:../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="81:../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Signalled when an event is captured.</short>
          <long>&#10; Signalled when an event is captured.&#10;&#10; @param time The time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x10247c520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x102c34020" loc="86:../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x10247c520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x102c36be0" loc="68:../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="65:../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Clear the capture overflow flag for when multiple captures occur&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x102c363e0" loc="63:../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="58:../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Determine if a capture overflow is pending.</short>
          <long>&#10; Determine if a capture overflow is pending.&#10;&#10; @return TRUE if the capture register has overflowed&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10270c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEdge" ref="0x102c38a90" loc="56:../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="46:../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set the edge that the capture should occur&#10;&#10; </short>
          <long>&#10; Set the edge that the capture should occur&#10;&#10; @param cm Capture Mode for edge capture.&#10; enums exist for:&#10;   MSP430TIMER_CM_NONE is no capture.&#10;   MSP430TIMER_CM_RISING is rising edge capture.&#10;   MSP430TIMER_CM_FALLING is a falling edge capture.&#10;   MSP430TIMER_CM_BOTH captures on both rising and falling edges.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10247c160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x102c38810" loc="56:../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10247c160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Compare" loc="38:../../tos/chips/msp430/timer/Msp430Compare.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430Compare.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x102c1f3e0" loc="40:../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x10247c520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEvent" ref="0x102c1fd60" loc="41:../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x10247c520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x102c1fae0" loc="41:../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x10247c520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromPrev" ref="0x102c1d790" loc="42:../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x10247c520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x102c1d510" loc="42:../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x10247c520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromNow" ref="0x102c1c2a0" loc="43:../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x10247c520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x102c1c020" loc="43:../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x10247c520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x102c1c990" loc="45:../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Timer" loc="43:../../tos/chips/msp430/timer/Msp430Timer.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x102c0f810" loc="52:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x102c0c2a0" loc="55:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x10247c520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="clockSource" ref="0x102c0c020" loc="55:../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x10247c520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x102c0e020" loc="53:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x102c15aa0" loc="45:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x10247c520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x102c0e760" loc="54:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x102c119b0" loc="47:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x102c0f120" loc="51:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x102c11270" loc="46:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10270c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x102c100e0" loc="48:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMode" ref="0x102c109f0" loc="50:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x102c10770" loc="50:../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInputDivider" ref="0x102c0ccb0" loc="56:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x10247c520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="inputDivider" ref="0x102c0ca30" loc="56:../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x10247c520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerEvent" loc="37:../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x102c4e1f0" loc="39:../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <interfacedef-ref qname="Msp430TimerEvent"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="74:../../tos/interfaces/McuSleep.nc">
      <documentation loc="63:../../tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @date   Oct 26, 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="sleep" ref="0x102b66670" loc="76:../../tos/interfaces/McuSleep.nc">
        <documentation loc="75:../../tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:../../tos/interfaces/McuPowerState.nc">
      <documentation loc="35:../../tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x102818910" loc="52:../../tos/interfaces/McuPowerState.nc">
        <documentation loc="47:../../tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:../../tos/interfaces/Scheduler.nc">
      <documentation loc="42:../../tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x102708020" loc="57:../../tos/interfaces/Scheduler.nc">
        <documentation loc="54:../../tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x102713020" loc="72:../../tos/interfaces/Scheduler.nc">
        <documentation loc="67:../../tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x102708770" loc="65:../../tos/interfaces/Scheduler.nc">
        <documentation loc="59:../../tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10270c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:../../tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x10271a020" loc="67:../../tos/interfaces/TaskBasic.nc">
        <documentation loc="57:../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10270f980"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x10271a870" loc="75:../../tos/interfaces/TaskBasic.nc">
        <documentation loc="69:../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:../../tos/lib/timer/Timer.nc">
      <documentation loc="36:../../tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x102d8a350" loc="53:../../tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x102d8a350"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x102d821f0" loc="136:../../tos/lib/timer/Timer.nc">
        <documentation loc="132:../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x10247c920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x102d87a60" loc="83:../../tos/lib/timer/Timer.nc">
        <documentation loc="80:../../tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x102d85820" loc="114:../../tos/lib/timer/Timer.nc">
        <documentation loc="100:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x10247c920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x10247c920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x102d85250" loc="114:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x10247c920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x102d85590" loc="114:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x10247c920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x102d86a60" loc="98:../../tos/lib/timer/Timer.nc">
        <documentation loc="94:../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10270c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x102d81270" loc="151:../../tos/lib/timer/Timer.nc">
        <documentation loc="146:../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x10247c920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x102d82980" loc="144:../../tos/lib/timer/Timer.nc">
        <documentation loc="138:../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x10247c920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x102d86270" loc="92:../../tos/lib/timer/Timer.nc">
        <documentation loc="86:../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10270c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x102d88020" loc="64:../../tos/lib/timer/Timer.nc">
        <documentation loc="56:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x10247c920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x102d8ac40" loc="64:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x10247c920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x102d84820" loc="129:../../tos/lib/timer/Timer.nc">
        <documentation loc="116:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x10247c920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x10247c920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x102d84250" loc="129:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x10247c920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x102d84590" loc="129:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x10247c920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x102d88ae0" loc="73:../../tos/lib/timer/Timer.nc">
        <documentation loc="66:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x10247c920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x102d88860" loc="73:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x10247c920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x102d87350" loc="78:../../tos/lib/timer/Timer.nc">
        <documentation loc="75:../../tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="51:../../tos/interfaces/Leds.nc">
      <documentation loc="33:../../tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x102d99a60" loc="61:../../tos/interfaces/Leds.nc">
        <documentation loc="58:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x102d97270" loc="67:../../tos/interfaces/Leds.nc">
        <documentation loc="63:../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x102d97a50" loc="72:../../tos/interfaces/Leds.nc">
        <documentation loc="69:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x102d96a20" loc="83:../../tos/interfaces/Leds.nc">
        <documentation loc="79:../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x102d941f0" loc="100:../../tos/interfaces/Leds.nc">
        <documentation loc="96:../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x102d94a00" loc="117:../../tos/interfaces/Leds.nc">
        <documentation loc="103:../../tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10247c160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x102d96270" loc="77:../../tos/interfaces/Leds.nc">
        <documentation loc="74:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x102d925a0" loc="134:../../tos/interfaces/Leds.nc">
        <documentation loc="120:../../tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10247c160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x102d92320" loc="134:../../tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10247c160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x102d992d0" loc="56:../../tos/interfaces/Leds.nc">
        <documentation loc="53:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x102d95270" loc="89:../../tos/interfaces/Leds.nc">
        <documentation loc="86:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x102d95a00" loc="94:../../tos/interfaces/Leds.nc">
        <documentation loc="91:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:../../tos/interfaces/GeneralIO.nc">
      <documentation loc="34:../../tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x102da3390" loc="44:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x102da3ac0" loc="45:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10270c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x102da5540" loc="42:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x102da29b0" loc="47:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10270c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x102da5c40" loc="43:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10270c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x102da2270" loc="46:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x102da8750" loc="40:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x102da8e20" loc="41:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430GeneralIO" loc="43:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x102dc4350" loc="78:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="75:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to input.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x102dc4aa0" loc="80:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10270c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setResistor" ref="0x102de5390" loc="110:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="103:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin pullup / pull down resistor mode.</short>
          <long>&#10; Set pin pullup / pull down resistor mode.&#10; @param mode One of the MSP430_PORT_RESISTOR_* values&#10; @return EINVAL if invalid mode or pin does not support resistor configuration;&#10; FAIL if pin is not an input;&#10; SUCCESS if pin supports resistor configuration, is an input, and mode is valid&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x10270f980"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10247c160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x102de5110" loc="110:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x10247c160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x102dc7bd0" loc="58:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="55:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Toggle pin status.</short>
          <long>&#10; Toggle pin status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x102de99d0" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10270c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getResistor" ref="0x102de5c80" loc="117:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="112:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the pin pullup / pulldown resistor mode.</short>
          <long>&#10; Get the pin pullup / pulldown resistor mode.&#10;&#10; @return one of the MSP430_PORT_RESISTOR_* values&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10247c160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x102de9270" loc="85:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="82:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to output.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x102dc6b90" loc="73:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="68:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Read pin value.</short>
          <long>&#10; Read pin value.&#10;&#10; @return TRUE if pin is high, FALSE otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10270c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectIOFunc" ref="0x102de70e0" loc="99:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="96:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for I/O functionality.</short>
          <long>&#10; Set pin for I/O functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRaw" ref="0x102dc6390" loc="66:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="60:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the port status that contains the pin.</short>
          <long>&#10; Get the port status that contains the pin.&#10;&#10; @return Status of the port that contains the given pin. The x'th&#10; pin on the port will be represented in the x'th bit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x10247c160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x102dcad10" loc="48:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="45:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to high.</short>
          <long>&#10; Set pin to high.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectModuleFunc" ref="0x102de8190" loc="92:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="89:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for module specific functionality.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isIOFunc" ref="0x102de7880" loc="101:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10270c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isModuleFunc" ref="0x102de8920" loc="94:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10270c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x102dc7480" loc="53:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="50:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to low.</short>
          <long>&#10; Set pin to low.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:../../tos/lib/timer/LocalTime.nc">
      <documentation loc="36:../../tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x103027c40" loc="53:../../tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x103027c40"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x1030235a0" loc="61:../../tos/lib/timer/LocalTime.nc">
        <documentation loc="55:../../tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x10247c920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:../../tos/lib/timer/Alarm.nc">
      <documentation loc="36:../../tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x10301e5b0" loc="56:../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x10301e5b0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x10301e7f0" loc="56:../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x10301e7f0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x103049390" loc="109:../../tos/lib/timer/Alarm.nc">
        <documentation loc="105:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x10301e7f0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x10301c3b0" loc="78:../../tos/lib/timer/Alarm.nc">
        <documentation loc="75:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x10301a9d0" loc="103:../../tos/lib/timer/Alarm.nc">
        <documentation loc="90:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x10301e7f0"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x10301e7f0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x10301a400" loc="103:../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x10301e7f0"/></type-var>
          </variable>
          <variable name="dt" ref="0x10301a740" loc="103:../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x10301e7f0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x10301cb90" loc="88:../../tos/lib/timer/Alarm.nc">
        <documentation loc="81:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10270c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x103049b80" loc="116:../../tos/lib/timer/Alarm.nc">
        <documentation loc="111:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x10301e7f0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x10301d390" loc="66:../../tos/lib/timer/Alarm.nc">
        <documentation loc="59:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x10301e7f0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x10301d110" loc="66:../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x10301e7f0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x10301dbc0" loc="73:../../tos/lib/timer/Alarm.nc">
        <documentation loc="68:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:../../tos/lib/timer/Counter.nc">
      <documentation loc="36:../../tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x1030aadf0" loc="57:../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x1030aadf0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x1030a5070" loc="57:../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x1030a5070"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x1030a5990" loc="64:../../tos/lib/timer/Counter.nc">
        <documentation loc="59:../../tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x1030a5070"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x1030a4ad0" loc="76:../../tos/lib/timer/Counter.nc">
        <documentation loc="73:../../tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x1030a4270" loc="71:../../tos/lib/timer/Counter.nc">
        <documentation loc="66:../../tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x10270c090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x1030a3270" loc="82:../../tos/lib/timer/Counter.nc">
        <documentation loc="78:../../tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
