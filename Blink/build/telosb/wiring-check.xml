<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="12:BlinkAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x105cd1020"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x105ae59a0"/></to>
    </wire>
    <wire loc="72:../../tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x105ae59a0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x105cb1590"/></to>
    </wire>
    <wire loc="14:BlinkAppC.nc">
      <from><interface-ref name="Timer0" scoped="" ref="0x105cd67f0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x1060f4370"/></to>
    </wire>
    <wire loc="52:../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x1060f4370"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x105f63610"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="17:BlinkAppC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x105ced8d0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x105cbe860"/></to>
    </wire>
    <wire loc="51:../../tos/system/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x105cbe860"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x105ce12a0"/></to>
    </wire>
    <wire loc="53:../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x105ae6020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x105f5a3e0"/></to>
    </wire>
    <wire loc="67:../../tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x105cb1c00"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x1056683a0"/></to>
    </wire>
    <wire loc="53:../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x1056683a0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x105ac0420"/></to>
    </wire>
    <wire loc="68:../../tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x105cc96c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x105aff020"/></to>
    </wire>
    <wire loc="48:../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x105aff020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x105afc280"/></to>
    </wire>
    <wire loc="71:../../tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x105cc9dc0"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x105ae6020"/></to>
    </wire>
    <wire loc="49:../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x105afc990"/></from>
      <to><interface-ref name="MoteClockInit" scoped="" ref="0x105afd640"/></to>
    </wire>
    <wire loc="46:../../tos/platforms/telosb/MoteClockC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x105afd640"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x105b19580"/></to>
    </wire>
    <wire loc="50:../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x105afb0c0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x105af53f0"/></to>
    </wire>
    <wire loc="56:../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="LedsInit" scoped="" ref="0x105afb7a0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x105d06c40"/></to>
    </wire>
    <wire loc="46:../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x105b19580"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x105b3d7e0"/></to>
    </wire>
    <wire loc="47:../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="Msp430ClockInit" scoped="" ref="0x105b2eae0"/></from>
      <to><interface-ref name="Msp430ClockInit" scoped="" ref="0x105b3c020"/></to>
    </wire>
    <wire loc="48:../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x1059e4510"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x105b3b360"/></to>
    </wire>
    <wire loc="113:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA2" scoped="" ref="0x105b785a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x105c476d0"/></to>
    </wire>
    <wire loc="126:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB0" scoped="" ref="0x105b86020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x105c40b30"/></to>
    </wire>
    <wire loc="108:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA1" scoped="" ref="0x105b6f700"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x105c2a160"/></to>
    </wire>
    <wire loc="149:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB3" scoped="" ref="0x105b93a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x105c4acb0"/></to>
    </wire>
    <wire loc="107:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA1" scoped="" ref="0x105b76aa0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x105c2b480"/></to>
    </wire>
    <wire loc="148:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB3" scoped="" ref="0x105b99020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x105c4a020"/></to>
    </wire>
    <wire loc="170:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB6" scoped="" ref="0x105b90a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x105c7bcb0"/></to>
    </wire>
    <wire loc="154:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB4" scoped="" ref="0x105b805a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x105c68220"/></to>
    </wire>
    <wire loc="99:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA0" scoped="" ref="0x105b79b10"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x105bf29d0"/></to>
    </wire>
    <wire loc="135:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB1" scoped="" ref="0x105b95a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x105c592f0"/></to>
    </wire>
    <wire loc="134:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB1" scoped="" ref="0x105b9b3e0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x105c5a610"/></to>
    </wire>
    <wire loc="133:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB1" scoped="" ref="0x105b855a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x105c37220"/></to>
    </wire>
    <wire loc="115:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA2" scoped="" ref="0x105b8e700"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x105c457a0"/></to>
    </wire>
    <wire loc="156:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB4" scoped="" ref="0x105b92a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x105c662f0"/></to>
    </wire>
    <wire loc="140:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB2" scoped="" ref="0x105b84be0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x105c546d0"/></to>
    </wire>
    <wire loc="114:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA2" scoped="" ref="0x105b75890"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x105c46ac0"/></to>
    </wire>
    <wire loc="93:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerA" scoped="" ref="0x105b69060"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x105bde540"/></to>
    </wire>
    <wire loc="155:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB4" scoped="" ref="0x105b99da0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x105c67610"/></to>
    </wire>
    <wire loc="106:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA1" scoped="" ref="0x105b5f0c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x105c2c020"/></to>
    </wire>
    <wire loc="161:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB5" scoped="" ref="0x105b7fa50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x105c606d0"/></to>
    </wire>
    <wire loc="101:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA0" scoped="" ref="0x105b89690"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x105c32a90"/></to>
    </wire>
    <wire loc="142:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB2" scoped="" ref="0x105b94a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x105c527a0"/></to>
    </wire>
    <wire loc="100:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA0" scoped="" ref="0x105b71cf0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x105c33de0"/></to>
    </wire>
    <wire loc="141:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB2" scoped="" ref="0x105b9a1f0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x105c53ac0"/></to>
    </wire>
    <wire loc="163:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB5" scoped="" ref="0x105b91a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x105c5e7a0"/></to>
    </wire>
    <wire loc="147:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB3" scoped="" ref="0x105b810c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x105c4cb30"/></to>
    </wire>
    <wire loc="120:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerB" scoped="" ref="0x105b886c0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x105bd63e0"/></to>
    </wire>
    <wire loc="162:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB5" scoped="" ref="0x105b98b80"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x105c5fac0"/></to>
    </wire>
    <wire loc="128:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB0" scoped="" ref="0x105b96a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x105c3ecb0"/></to>
    </wire>
    <wire loc="169:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB6" scoped="" ref="0x105b97a20"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x105c7b020"/></to>
    </wire>
    <wire loc="127:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB0" scoped="" ref="0x105b9c570"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x105c3e020"/></to>
    </wire>
    <wire loc="168:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB6" scoped="" ref="0x105b9d020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x105c7db30"/></to>
    </wire>
    <wire loc="94:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x105bdc450"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x105bddd80"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="95:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x105bdcaa0"/></from>
      <to><interface-ref name="VectorTimerA0" scoped="" ref="0x105c76a90"/></to>
    </wire>
    <wire loc="96:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x105bdb120"/></from>
      <to><interface-ref name="VectorTimerA1" scoped="" ref="0x105c72260"/></to>
    </wire>
    <wire loc="102:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x105c31930"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x105bde540"/></to>
    </wire>
    <wire loc="103:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x105c2f020"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x105bddd80"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="109:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x105c29020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x105bde540"/></to>
    </wire>
    <wire loc="110:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x105c277a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x105bddd80"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="116:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x105c44610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x105bde540"/></to>
    </wire>
    <wire loc="117:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x105c43c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x105bddd80"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="121:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x105bd42f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x105bd5bf0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="122:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x105bd4940"/></from>
      <to><interface-ref name="VectorTimerB0" scoped="" ref="0x105c729f0"/></to>
    </wire>
    <wire loc="123:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x105bd3020"/></from>
      <to><interface-ref name="VectorTimerB1" scoped="" ref="0x105c71240"/></to>
    </wire>
    <wire loc="129:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x105c3db40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x105bd63e0"/></to>
    </wire>
    <wire loc="130:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x105c3b2f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x105bd5bf0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x105c58160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x105bd63e0"/></to>
    </wire>
    <wire loc="137:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x105c577a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x105bd5bf0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x105c51610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x105bd63e0"/></to>
    </wire>
    <wire loc="144:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x105c50c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x105bd5bf0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x105c49b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x105bd63e0"/></to>
    </wire>
    <wire loc="151:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x105c6b2f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x105bd5bf0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x105c65160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x105bd63e0"/></to>
    </wire>
    <wire loc="158:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x105c647a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x105bd5bf0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x105c5d610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x105bd63e0"/></to>
    </wire>
    <wire loc="165:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x105c5cc50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x105bd5bf0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x105c7ab40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x105bd63e0"/></to>
    </wire>
    <wire loc="172:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x105c782f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x105bd5bf0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x1055f41d0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x105abf320"/></to>
    </wire>
    <wire loc="55:../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x105abb990"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x1056c8760"/></to>
    </wire>
    <wire loc="53:../../tos/system/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x105d06c40"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x105ce5c30"/></to>
    </wire>
    <wire loc="54:../../tos/system/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x105cff910"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x105d09360"/></to>
    </wire>
    <wire loc="58:../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x105d09360"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x105f36020"/></to>
    </wire>
    <wire loc="55:../../tos/system/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x105d05b10"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x105d086a0"/></to>
    </wire>
    <wire loc="61:../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x105d086a0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x105f51b90"/></to>
    </wire>
    <wire loc="56:../../tos/system/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x105d04e30"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x105d079c0"/></to>
    </wire>
    <wire loc="64:../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x105d079c0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x105f4b710"/></to>
    </wire>
    <wire loc="59:../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x105f542f0"/></from>
      <to><interface-ref name="Port54" scoped="" ref="0x105d71200"/></to>
    </wire>
    <wire loc="486:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port54" scoped="" ref="0x105d71200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e9b740"/></to>
    </wire>
    <wire loc="62:../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x105f50de0"/></from>
      <to><interface-ref name="Port55" scoped="" ref="0x105d6f200"/></to>
    </wire>
    <wire loc="487:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port55" scoped="" ref="0x105d6f200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e96100"/></to>
    </wire>
    <wire loc="65:../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x105f4a930"/></from>
      <to><interface-ref name="Port56" scoped="" ref="0x105d6d200"/></to>
    </wire>
    <wire loc="488:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port56" scoped="" ref="0x105d6d200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e92d10"/></to>
    </wire>
    <wire loc="442:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x105d3b020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e06100"/></to>
    </wire>
    <wire loc="455:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x105d4e020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e2ad10"/></to>
    </wire>
    <wire loc="531:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SDA" scoped="" ref="0x105d7c560"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e47d10"/></to>
    </wire>
    <wire loc="551:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC6" scoped="" ref="0x105da8570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105ec4100"/></to>
    </wire>
    <wire loc="532:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI0" scoped="" ref="0x105da2580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e42740"/></to>
    </wire>
    <wire loc="460:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port30" scoped="" ref="0x105d4a020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e20100"/></to>
    </wire>
    <wire loc="473:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port42" scoped="" ref="0x105d5d200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e74e00"/></to>
    </wire>
    <wire loc="497:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port64" scoped="" ref="0x105d89200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105eced10"/></to>
    </wire>
    <wire loc="535:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD0" scoped="" ref="0x105d9c580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e39d10"/></to>
    </wire>
    <wire loc="545:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC0" scoped="" ref="0x105db4570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105eb4100"/></to>
    </wire>
    <wire loc="557:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSIN" scoped="" ref="0x105dc8580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105ec0d10"/></to>
    </wire>
    <wire loc="445:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x105d35020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105df7100"/></to>
    </wire>
    <wire loc="536:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD0" scoped="" ref="0x105d9a580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e5f740"/></to>
    </wire>
    <wire loc="450:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x105d31020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e18740"/></to>
    </wire>
    <wire loc="463:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port33" scoped="" ref="0x105d44020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e3d100"/></to>
    </wire>
    <wire loc="476:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port45" scoped="" ref="0x105d57200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e65d10"/></to>
    </wire>
    <wire loc="489:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port57" scoped="" ref="0x105d6b200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e8d740"/></to>
    </wire>
    <wire loc="500:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port67" scoped="" ref="0x105d82200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105ec0d10"/></to>
    </wire>
    <wire loc="440:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x105d19020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105de6d10"/></to>
    </wire>
    <wire loc="453:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x105d52020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e34860"/></to>
    </wire>
    <wire loc="466:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port36" scoped="" ref="0x105d65020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e5a100"/></to>
    </wire>
    <wire loc="530:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO0" scoped="" ref="0x105d7e580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e47d10"/></to>
    </wire>
    <wire loc="548:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC3" scoped="" ref="0x105dae570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105ea6100"/></to>
    </wire>
    <wire loc="555:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC1" scoped="" ref="0x105dca570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105ec0d10"/></to>
    </wire>
    <wire loc="541:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK1" scoped="" ref="0x105d92580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105ea1d10"/></to>
    </wire>
    <wire loc="471:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port40" scoped="" ref="0x105d61020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e51a60"/></to>
    </wire>
    <wire loc="484:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port52" scoped="" ref="0x105d75200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e79100"/></to>
    </wire>
    <wire loc="495:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port62" scoped="" ref="0x105d8d200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105eab740"/></to>
    </wire>
    <wire loc="549:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC4" scoped="" ref="0x105dac570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105eced10"/></to>
    </wire>
    <wire loc="538:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE1" scoped="" ref="0x105d98570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e83d10"/></to>
    </wire>
    <wire loc="443:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x105d39020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e01d10"/></to>
    </wire>
    <wire loc="456:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x105d4c020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e25740"/></to>
    </wire>
    <wire loc="493:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port60" scoped="" ref="0x105d69200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105eb4100"/></to>
    </wire>
    <wire loc="461:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port31" scoped="" ref="0x105d48020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e47d10"/></to>
    </wire>
    <wire loc="474:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port43" scoped="" ref="0x105d5b200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e6f740"/></to>
    </wire>
    <wire loc="498:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port65" scoped="" ref="0x105d86200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105ec9740"/></to>
    </wire>
    <wire loc="540:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI1" scoped="" ref="0x105d94580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e79100"/></to>
    </wire>
    <wire loc="438:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x105d26020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105def6d0"/></to>
    </wire>
    <wire loc="451:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x105d2f020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e13100"/></to>
    </wire>
    <wire loc="464:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port34" scoped="" ref="0x105d42020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e39d10"/></to>
    </wire>
    <wire loc="477:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port46" scoped="" ref="0x105d55200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e8c740"/></to>
    </wire>
    <wire loc="542:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD1" scoped="" ref="0x105d90580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e5a100"/></to>
    </wire>
    <wire loc="546:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC1" scoped="" ref="0x105db2570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105eb0d10"/></to>
    </wire>
    <wire loc="552:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC7" scoped="" ref="0x105da5570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105ec0d10"/></to>
    </wire>
    <wire loc="482:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port50" scoped="" ref="0x105d79200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e83d10"/></to>
    </wire>
    <wire loc="543:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD1" scoped="" ref="0x105db6580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e56d10"/></to>
    </wire>
    <wire loc="441:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x105d3d020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105de1740"/></to>
    </wire>
    <wire loc="454:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x105d50020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e2e270"/></to>
    </wire>
    <wire loc="467:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port37" scoped="" ref="0x105d63020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e56d10"/></to>
    </wire>
    <wire loc="539:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO1" scoped="" ref="0x105d96580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e7e740"/></to>
    </wire>
    <wire loc="550:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC5" scoped="" ref="0x105daa570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105ec9740"/></to>
    </wire>
    <wire loc="472:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port41" scoped="" ref="0x105d5f200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e4c460"/></to>
    </wire>
    <wire loc="485:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port53" scoped="" ref="0x105d73200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105ea1d10"/></to>
    </wire>
    <wire loc="496:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port63" scoped="" ref="0x105d8b200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105ea6100"/></to>
    </wire>
    <wire loc="444:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x105d37020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105dfc740"/></to>
    </wire>
    <wire loc="494:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port61" scoped="" ref="0x105d67200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105eb0d10"/></to>
    </wire>
    <wire loc="449:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x105d33020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e1dd10"/></to>
    </wire>
    <wire loc="462:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port32" scoped="" ref="0x105d46020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e42740"/></to>
    </wire>
    <wire loc="475:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port44" scoped="" ref="0x105d59200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e69100"/></to>
    </wire>
    <wire loc="499:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port66" scoped="" ref="0x105d84200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105ec4100"/></to>
    </wire>
    <wire loc="439:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x105d1b020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105dea100"/></to>
    </wire>
    <wire loc="452:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x105d2d020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e0fd10"/></to>
    </wire>
    <wire loc="465:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port35" scoped="" ref="0x105d40020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e5f740"/></to>
    </wire>
    <wire loc="478:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port47" scoped="" ref="0x105d53200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e87100"/></to>
    </wire>
    <wire loc="534:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SCL" scoped="" ref="0x105d9e560"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e3d100"/></to>
    </wire>
    <wire loc="547:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC2" scoped="" ref="0x105db0570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105eab740"/></to>
    </wire>
    <wire loc="533:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK0" scoped="" ref="0x105da0580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e3d100"/></to>
    </wire>
    <wire loc="483:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port51" scoped="" ref="0x105d77200"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e7e740"/></to>
    </wire>
    <wire loc="554:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC0" scoped="" ref="0x105da3570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105ec4100"/></to>
    </wire>
    <wire loc="558:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSOUT" scoped="" ref="0x105dc6580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e8d740"/></to>
    </wire>
    <wire loc="529:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE0" scoped="" ref="0x105d801f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x105e20100"/></to>
    </wire>
    <wire loc="54:../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x105f63610"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x105f591d0"/></to>
    </wire>
    <wire loc="58:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x105f591d0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x1060de150"/></to>
    </wire>
    <wire loc="57:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x105f5a3e0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x106053020"/></to>
    </wire>
    <wire loc="59:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x105f81a80"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x106106790"/></to>
    </wire>
    <wire loc="52:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x106053020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x1065f2c40"/></to>
    </wire>
    <wire loc="61:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x1060d8640"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x10608e2f0"/></to>
    </wire>
    <wire loc="62:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x106089850"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x106053870"/></to>
    </wire>
    <wire loc="53:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x106053870"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x1065ea890"/></to>
    </wire>
    <wire loc="63:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x106105a60"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x1060008c0"/></to>
    </wire>
    <wire loc="50:../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x1060008c0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x106016cf0"/></to>
    </wire>
    <wire loc="51:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x1065f2c40"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x1065d4660"/></to>
    </wire>
    <wire loc="55:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x1065e30a0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x1065f04f0"/></to>
    </wire>
    <wire loc="52:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x1065f04f0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x1065d3020"/></to>
    </wire>
    <wire loc="56:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x1065e7c00"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x1060008c0"/></to>
    </wire>
    <wire loc="54:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x1065cf190"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x1065da340"/></to>
    </wire>
    <wire loc="49:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x1065da340"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x105f928b0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x106618770"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x1065d8a80"/></to>
    </wire>
    <wire loc="50:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x1065d8a80"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x105f8f560"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x106617a80"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x1065d7da0"/></to>
    </wire>
    <wire loc="51:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x1065d7da0"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x105f8d020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="58:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x105f928b0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x105b886c0"/></to>
    </wire>
    <wire loc="59:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x105f8f560"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB0" scoped="" ref="0x105b86020"/></to>
    </wire>
    <wire loc="60:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x105f8d020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB0" scoped="" ref="0x105b9c570"/></to>
    </wire>
    <wire loc="66:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x105f928b0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x105b886c0"/></to>
    </wire>
    <wire loc="67:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x105f8f560"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB2" scoped="" ref="0x105b84be0"/></to>
    </wire>
    <wire loc="68:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x105f8d020"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB2" scoped="" ref="0x105b9a1f0"/></to>
    </wire>
    <wire loc="70:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x105f928b0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x105b886c0"/></to>
    </wire>
    <wire loc="71:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x105f8f560"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB3" scoped="" ref="0x105b810c0"/></to>
    </wire>
    <wire loc="72:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x105f8d020"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB3" scoped="" ref="0x105b99020"/></to>
    </wire>
    <wire loc="74:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x105f928b0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x105b886c0"/></to>
    </wire>
    <wire loc="75:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x105f8f560"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB4" scoped="" ref="0x105b805a0"/></to>
    </wire>
    <wire loc="76:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x105f8d020"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB4" scoped="" ref="0x105b99da0"/></to>
    </wire>
    <wire loc="78:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x105f928b0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x105b886c0"/></to>
    </wire>
    <wire loc="79:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x105f8f560"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB5" scoped="" ref="0x105b7fa50"/></to>
    </wire>
    <wire loc="80:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x105f8d020"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB5" scoped="" ref="0x105b98b80"/></to>
    </wire>
    <wire loc="82:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x105f928b0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x105b886c0"/></to>
    </wire>
    <wire loc="83:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x105f8f560"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB6" scoped="" ref="0x105b9d020"/></to>
    </wire>
    <wire loc="84:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x105f8d020"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB6" scoped="" ref="0x105b97a20"/></to>
    </wire>
    <wire loc="52:../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x10602a0f0"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x105fff8e0"/></to>
    </wire>
    <wire loc="50:../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Counter32khz" scoped="" ref="0x105fff8e0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x105ff8b80"/></to>
    </wire>
    <wire loc="51:../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x10601bc50"/></from>
      <to><interface-ref name="TimerB" scoped="" ref="0x105b886c0"/></to>
    </wire>
    <wire loc="74:../../tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x1060869c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x1055f41d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="71:../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x1060d3a00"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x1055f41d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
  </wiring>
  <components>
    <component qname="MainC" loc="56:../../tos/system/MainC.nc">
      <documentation loc="45:../../tos/system/MainC.nc">
        <short>&#10; MainC is the system interface the TinyOS boot sequence.</short>
        <long>&#10; MainC is the system interface the TinyOS boot sequence. It wires the&#10; boot sequence implementation to the scheduler and hardware resources.&#10;&#10; @author Philip Levis&#10; @date   August 6 2005&#10; @see    TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="40:../../tos/platforms/telosa/PlatformC.nc">
      <documentation loc="34:../../tos/platforms/telosa/PlatformC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre and Cory Sharp&#10; @version $Revision: 1.6 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="3:../../tos/platforms/telosa/PlatformP.nc" safe="">
      <module/>
    </component>
    <component qname="MotePlatformC" loc="1:../../tos/platforms/telosb/MotePlatformC.nc" safe="">
      <module/>
    </component>
    <component qname="MoteClockC" loc="37:../../tos/platforms/telosb/MoteClockC.nc">
      <documentation loc="33:../../tos/platforms/telosb/MoteClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockC" loc="37:../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430ClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockP" loc="43:../../tos/chips/msp430/timer/Msp430ClockP.nc" safe="">
      <module/>
    </component>
    <component qname="Msp430TimerC" loc="37:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA" loc="39(Msp430TimerC.Msp430TimerA):../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:302">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:368">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:352">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB" loc="39(Msp430TimerC.Msp430TimerB):../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:286">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:400">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:384">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA0" loc="39(Msp430TimerC.Msp430TimerA0):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:354">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:370">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA1" loc="39(Msp430TimerC.Msp430TimerA1):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:356">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:372">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA2" loc="39(Msp430TimerC.Msp430TimerA2):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:358">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:374">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB0" loc="39(Msp430TimerC.Msp430TimerB0):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:386">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:402">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB1" loc="39(Msp430TimerC.Msp430TimerB1):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:388">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:404">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB2" loc="39(Msp430TimerC.Msp430TimerB2):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:390">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:406">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB3" loc="39(Msp430TimerC.Msp430TimerB3):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:392">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:408">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB4" loc="39(Msp430TimerC.Msp430TimerB4):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:394">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:410">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB5" loc="39(Msp430TimerC.Msp430TimerB5):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:396">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:412">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB6" loc="39(Msp430TimerC.Msp430TimerB6):../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:398">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:414">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerCommonP" loc="2:../../tos/chips/msp430/timer/Msp430TimerCommonP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="49:../../tos/chips/msp430/McuSleepC.nc" safe="">
      <documentation loc="33:../../tos/chips/msp430/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430. Code for low power calculation copied from older&#10; msp430hardware.h by Vlado Handziski, Joe Polastre, and Cory Sharp.&#10;&#10;&#10; @author Philip Levis&#10; @author Vlado Handziski&#10; @author Joe Polastre&#10; @author Cory Sharp&#10; @date   October 26, 2005&#10; @see  Please refer to TEP 112 for more information about this component and its&#10;          intended use.&#10;&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MoteClockP" loc="38:../../tos/platforms/telosb/MoteClockP.nc">
      <documentation loc="33:../../tos/platforms/telosb/MoteClockP.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="56:../../tos/system/RealMainP.nc" safe="">
      <documentation loc="49:../../tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:../../tos/system/TinySchedulerC.nc">
      <documentation loc="34:../../tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:../../tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="BlinkC" loc="8:BlinkC.nc" safe="">
      <module/>
    </component>
    <component qname="LedsC" loc="45:../../tos/system/LedsC.nc">
      <documentation loc="34:../../tos/system/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="44:../../tos/system/LedsP.nc" safe="">
      <documentation loc="35:../../tos/system/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="40:../../tos/platforms/telosa/PlatformLedsC.nc">
      <documentation loc="34:../../tos/platforms/telosa/PlatformLedsC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC" loc="45:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <documentation loc="35:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
        <short>&#10; HPL for the TI MSP430 family of microprocessors.</short>
        <long>&#10; HPL for the TI MSP430 family of microprocessors. This provides an&#10; abstraction for general-purpose I/O.&#10;&#10; @author Joe Polastre&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC.P10" loc="39(HplMsp430GeneralIOC.P10):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P11" loc="39(HplMsp430GeneralIOC.P11):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P12" loc="39(HplMsp430GeneralIOC.P12):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P13" loc="39(HplMsp430GeneralIOC.P13):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P14" loc="39(HplMsp430GeneralIOC.P14):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P15" loc="39(HplMsp430GeneralIOC.P15):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P16" loc="39(HplMsp430GeneralIOC.P16):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P17" loc="39(HplMsp430GeneralIOC.P17):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P20" loc="39(HplMsp430GeneralIOC.P20):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P21" loc="39(HplMsp430GeneralIOC.P21):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P22" loc="39(HplMsp430GeneralIOC.P22):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P23" loc="39(HplMsp430GeneralIOC.P23):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P24" loc="39(HplMsp430GeneralIOC.P24):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P25" loc="39(HplMsp430GeneralIOC.P25):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P26" loc="39(HplMsp430GeneralIOC.P26):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P27" loc="39(HplMsp430GeneralIOC.P27):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P30" loc="39(HplMsp430GeneralIOC.P30):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P31" loc="39(HplMsp430GeneralIOC.P31):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P32" loc="39(HplMsp430GeneralIOC.P32):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P33" loc="39(HplMsp430GeneralIOC.P33):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P34" loc="39(HplMsp430GeneralIOC.P34):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P35" loc="39(HplMsp430GeneralIOC.P35):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P36" loc="39(HplMsp430GeneralIOC.P36):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P37" loc="39(HplMsp430GeneralIOC.P37):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P40" loc="39(HplMsp430GeneralIOC.P40):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P41" loc="39(HplMsp430GeneralIOC.P41):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P42" loc="39(HplMsp430GeneralIOC.P42):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P43" loc="39(HplMsp430GeneralIOC.P43):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P44" loc="39(HplMsp430GeneralIOC.P44):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P45" loc="39(HplMsp430GeneralIOC.P45):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P46" loc="39(HplMsp430GeneralIOC.P46):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P47" loc="39(HplMsp430GeneralIOC.P47):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P50" loc="39(HplMsp430GeneralIOC.P50):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P51" loc="39(HplMsp430GeneralIOC.P51):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P52" loc="39(HplMsp430GeneralIOC.P52):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P53" loc="39(HplMsp430GeneralIOC.P53):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P54" loc="39(HplMsp430GeneralIOC.P54):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P55" loc="39(HplMsp430GeneralIOC.P55):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P56" loc="39(HplMsp430GeneralIOC.P56):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P57" loc="39(HplMsp430GeneralIOC.P57):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P60" loc="39(HplMsp430GeneralIOC.P60):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P61" loc="39(HplMsp430GeneralIOC.P61):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P62" loc="39(HplMsp430GeneralIOC.P62):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P63" loc="39(HplMsp430GeneralIOC.P63):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P64" loc="39(HplMsp430GeneralIOC.P64):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P65" loc="39(HplMsp430GeneralIOC.P65):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P66" loc="39(HplMsp430GeneralIOC.P66):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P67" loc="39(HplMsp430GeneralIOC.P67):../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led0Impl" loc="42(PlatformLedsC.Led0Impl):../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led1Impl" loc="42(PlatformLedsC.Led1Impl):../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led2Impl" loc="42(PlatformLedsC.Led2Impl):../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="BlinkAppC.Timer0" loc="44(BlinkAppC.Timer0):../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:../../tos/system/TimerMilliP.nc">
      <documentation loc="34:../../tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="43:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
        <short>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.</short>
        <long>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.  TimerMilliC in tos/system/ uses this component to&#10; allocate new timers.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C" loc="41(HilTimerMilliC.AlarmMilli32C):../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmMilli32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom" loc="41(HilTimerMilliC.AlarmMilli32C.AlarmFrom):../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer" loc="37(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer):../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzMapC" loc="48:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <documentation loc="34:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
        <short>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.</short>
        <long>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.  &#10;&#10; Platforms based on the MSP430 are * encouraged to copy in and&#10; override this file, presenting only the * hardware timers that are&#10; available for allocation on that platform.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm" loc="43(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm):../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x105cbd640"/>
            <typename><typedef-ref name="T32khz" ref="0x105cbd9b0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C" loc="41:../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/CounterMilli32C.nc">
        <short>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.</short>
        <long>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC" loc="41:../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
        <short>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.</short>
        <long>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC.Counter" loc="42(Msp430Counter32khzC.Counter):../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x105cbd640"/>
            <typename><typedef-ref name="T32khz" ref="0x105cbd9b0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C.Transform" loc="54(CounterMilli32C.Transform):../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x105ae8e60"/>
            <typename><typedef-ref name="TMilli" ref="0x105cbd200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x1053d1920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x105cbd640"/>
            <typename><typedef-ref name="T32khz" ref="0x105cbd9b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x1053d1520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x1053d1920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.Transform" loc="51(HilTimerMilliC.AlarmMilli32C.Transform):../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x105ae8e60"/>
            <typename><typedef-ref name="TMilli" ref="0x105cbd200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x1053d1920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x105cbd640"/>
            <typename><typedef-ref name="T32khz" ref="0x105cbd9b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x1053d1520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):../../tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x105ae8e60"/>
            <typename><typedef-ref name="TMilli" ref="0x105cbd200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="46(HilTimerMilliC.VirtualizeTimerC):../../tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x105ae8e60"/>
            <typename><typedef-ref name="TMilli" ref="0x105cbd200"/></typename>
          </type-tag>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x105ae8e60"/>
            <typename><typedef-ref name="TMilli" ref="0x105cbd200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerP" loc="39:../../tos/chips/msp430/timer/Msp430TimerP.nc" abstract="" safe="">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxIV_addr" ref="0x105bab890" loc="40:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x1053d1520"/></typename>
          </type-int>
        </constant>
        <constant name="TxR_addr" ref="0x105babc30" loc="41:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x1053d1520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCTL_addr" ref="0x105baa020" loc="42:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x1053d1520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIFG" ref="0x105baa3a0" loc="43:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x1053d1520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCLR" ref="0x105baa720" loc="44:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x1053d1520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIE" ref="0x105baaa90" loc="45:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x1053d1520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL0" ref="0x105baae20" loc="46:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x1053d1520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL1" ref="0x105ba8200" loc="47:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x1053d1520"/></typename>
          </type-int>
        </constant>
        <constant name="isClockSourceAsync" ref="0x105ba85d0" loc="48:../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x105661090"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430TimerCapComP" loc="39:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc" abstract="" safe="">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxCCTLx_addr" ref="0x105bd2e70" loc="40:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x1053d1520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCCRx_addr" ref="0x105bf1270" loc="41:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x1053d1520"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOP" loc="39:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc" abstract="" safe="">
      <documentation loc="2:../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011 Eric B.</short>
        <long>&#10; Copyright (c) 2011 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_in_addr" ref="0x105dc19f0" loc="40:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_out_addr" ref="0x105dc1da0" loc="41:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_dir_addr" ref="0x105dc01a0" loc="42:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_sel_addr" ref="0x105dc0550" loc="43:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="pin" ref="0x105dc08c0" loc="44:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x1053d1160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430GpioC" loc="42:../../tos/chips/msp430/pins/Msp430GpioC.nc" abstract="" safe="">
      <documentation loc="33:../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:../../tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmMilli32C" loc="41:../../tos/chips/msp430/timer/AlarmMilli32C.nc" abstract="">
      <documentation loc="33:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Alarm32khz16C" loc="41:../../tos/chips/msp430/timer/Alarm32khz16C.nc" abstract="">
      <documentation loc="33:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzC" loc="37:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc" abstract="">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430AlarmC" loc="43:../../tos/chips/msp430/timer/Msp430AlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x105fa2cb0" loc="43:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
          <component-ref qname="Msp430AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x105fa2cb0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430CounterC" loc="42:../../tos/chips/msp430/timer/Msp430CounterC.nc" abstract="" safe="">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x105ff9a30" loc="42:../../tos/chips/msp430/timer/Msp430CounterC.nc">
          <component-ref qname="Msp430CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x105ff9a30"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:../../tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x106015570" loc="55:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x106015570"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x106015d40" loc="56:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x106015d40"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x106014160" loc="57:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x106014160"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x106014940" loc="58:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x106014940"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x106014d10" loc="59:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x1053d1160"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x106012540" loc="60:../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x106012540"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformAlarmC" loc="51:../../tos/lib/timer/TransformAlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x105fd46d0" loc="52:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x105fd46d0"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x106023020" loc="53:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x106023020"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x106023410" loc="54:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x106023410"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x106023bf0" loc="55:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x106023bf0"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x106022020" loc="56:../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x1053d1160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:../../tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x106082cc0" loc="46:../../tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x106082cc0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:../../tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x1060b4230" loc="46:../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x1060b4230"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x1060b4560" loc="46:../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:../../tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x106107dd0" loc="46:../../tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x106107dd0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="SoftwareInit" ref="0x105ae6020" loc="58:../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x105ae6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x105ae63a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x105ae59a0" loc="57:../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x105ae59a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x105ae5d20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x105aff020" loc="42:../../tos/platforms/telosa/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x105aff020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x105aff3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x105afb0c0" loc="6:../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteInit" scoped="" ref="0x105afb0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x105afb440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x105afc280" loc="4:../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x105afc280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x105afc600"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteClockInit" ref="0x105afc990" loc="5:../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x105afc990"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x105afcd10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LedsInit" ref="0x105afb7a0" loc="7:../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LedsInit" scoped="" ref="0x105afb7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x105afbb20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x105af53f0" loc="2:../../tos/platforms/telosb/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x105af53f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x105af5770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MoteClockInit" ref="0x105afd640" loc="39:../../tos/platforms/telosb/MoteClockC.nc">
      <component-ref qname="MoteClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x105afd640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x105afd9c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x105b2eae0" loc="40:../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x105b2eae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x105b16980"/>
        <function-ref name="initTimerB" scoped="" ref="0x105b16020"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x105b161b0"/>
        <function-ref name="initTimerA" scoped="" ref="0x105b16340"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x105b2ee60"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x105b164d0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x105b16660"/>
        <function-ref name="initClocks" scoped="" ref="0x105b167f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x105b19580" loc="39:../../tos/chips/msp430/timer/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x105b19580"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x105b19900"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x105b3c020" loc="46:../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x105b3c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x105b3b020"/>
        <function-ref name="initTimerB" scoped="" ref="0x105b3c530"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x105b3c6c0"/>
        <function-ref name="initTimerA" scoped="" ref="0x105b3c850"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x105b3c3a0"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x105b3c9e0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x105b3cb70"/>
        <function-ref name="initClocks" scoped="" ref="0x105b3cd00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x105b3b360" loc="47:../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x105b3b360"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x105b3b6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x105b3d7e0" loc="45:../../tos/chips/msp430/timer/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x105b3d7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x105b3db60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA2" ref="0x105b785a0" loc="42:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA2" scoped="" ref="0x105b785a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x105b78920"/>
        <function-ref name="getControl" scoped="" ref="0x105b78ab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x105b78c40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x105b78dd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x105b77020"/>
        <function-ref name="disableEvents" scoped="" ref="0x105b771b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x105b77340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x105b774d0"/>
        <function-ref name="setControl" scoped="" ref="0x105b77660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB0" ref="0x105b86020" loc="51:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB0" scoped="" ref="0x105b86020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x105b863a0"/>
        <function-ref name="getControl" scoped="" ref="0x105b86530"/>
        <function-ref name="enableEvents" scoped="" ref="0x105b866c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x105b86850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x105b869e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x105b86b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x105b86d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x105b85020"/>
        <function-ref name="setControl" scoped="" ref="0x105b851b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA1" ref="0x105b6f700" loc="47:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA1" scoped="" ref="0x105b6f700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105b6fa80"/>
        <function-ref name="setSynchronous" scoped="" ref="0x105b6fc10"/>
        <function-ref name="captured" scoped="" ref="0x105b6fda0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x105b8e020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x105b8e1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x105b8e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB3" ref="0x105b93a20" loc="68:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB3" scoped="" ref="0x105b93a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105b93da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x105b92020"/>
        <function-ref name="captured" scoped="" ref="0x105b921b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x105b92340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x105b924d0"/>
        <function-ref name="setEdge" scoped="" ref="0x105b92660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA1" ref="0x105b76aa0" loc="44:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA1" scoped="" ref="0x105b76aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105b76e20"/>
        <function-ref name="setEvent" scoped="" ref="0x105b75020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x105b751b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x105b75340"/>
        <function-ref name="fired" scoped="" ref="0x105b754d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB3" ref="0x105b99020" loc="61:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB3" scoped="" ref="0x105b99020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105b993a0"/>
        <function-ref name="setEvent" scoped="" ref="0x105b99530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x105b996c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x105b99850"/>
        <function-ref name="fired" scoped="" ref="0x105b999e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB6" ref="0x105b90a20" loc="71:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB6" scoped="" ref="0x105b90a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105b90da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x105b8f020"/>
        <function-ref name="captured" scoped="" ref="0x105b8f1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x105b8f340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x105b8f4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x105b8f660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB4" ref="0x105b805a0" loc="55:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB4" scoped="" ref="0x105b805a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x105b80920"/>
        <function-ref name="getControl" scoped="" ref="0x105b80ab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x105b80c40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x105b80dd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x105b7f020"/>
        <function-ref name="disableEvents" scoped="" ref="0x105b7f1b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x105b7f340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x105b7f4d0"/>
        <function-ref name="setControl" scoped="" ref="0x105b7f660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA0" ref="0x105b79b10" loc="40:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA0" scoped="" ref="0x105b79b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x105b60020"/>
        <function-ref name="getControl" scoped="" ref="0x105b601b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x105b60340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x105b604d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x105b60660"/>
        <function-ref name="disableEvents" scoped="" ref="0x105b607f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x105b60980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x105b60b10"/>
        <function-ref name="setControl" scoped="" ref="0x105b60ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB1" ref="0x105b95a20" loc="66:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB1" scoped="" ref="0x105b95a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105b95da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x105b94020"/>
        <function-ref name="captured" scoped="" ref="0x105b941b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x105b94340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x105b944d0"/>
        <function-ref name="setEdge" scoped="" ref="0x105b94660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB1" ref="0x105b9b3e0" loc="59:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB1" scoped="" ref="0x105b9b3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105b9b760"/>
        <function-ref name="setEvent" scoped="" ref="0x105b9b8f0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x105b9ba80"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x105b9bc10"/>
        <function-ref name="fired" scoped="" ref="0x105b9bda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB1" ref="0x105b855a0" loc="52:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB1" scoped="" ref="0x105b855a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x105b85a20"/>
        <function-ref name="getControl" scoped="" ref="0x105b85bb0"/>
        <function-ref name="enableEvents" scoped="" ref="0x105b85d40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x105b84020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x105b841b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x105b84340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x105b844d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x105b84660"/>
        <function-ref name="setControl" scoped="" ref="0x105b847f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA2" ref="0x105b8e700" loc="48:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA2" scoped="" ref="0x105b8e700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105b8ea80"/>
        <function-ref name="setSynchronous" scoped="" ref="0x105b8ec10"/>
        <function-ref name="captured" scoped="" ref="0x105b8eda0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x105b88020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x105b881b0"/>
        <function-ref name="setEdge" scoped="" ref="0x105b88340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB4" ref="0x105b92a20" loc="69:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB4" scoped="" ref="0x105b92a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105b92da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x105b91020"/>
        <function-ref name="captured" scoped="" ref="0x105b911b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x105b91340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x105b914d0"/>
        <function-ref name="setEdge" scoped="" ref="0x105b91660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB2" ref="0x105b84be0" loc="53:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB2" scoped="" ref="0x105b84be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x105b83020"/>
        <function-ref name="getControl" scoped="" ref="0x105b831b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x105b83340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x105b834d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x105b83660"/>
        <function-ref name="disableEvents" scoped="" ref="0x105b837f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x105b83980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x105b83b10"/>
        <function-ref name="setControl" scoped="" ref="0x105b83ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA2" ref="0x105b75890" loc="45:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA2" scoped="" ref="0x105b75890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105b75c10"/>
        <function-ref name="setEvent" scoped="" ref="0x105b75da0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x105b70020"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x105b701b0"/>
        <function-ref name="fired" scoped="" ref="0x105b70340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerA" ref="0x105b69060" loc="39:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerA" scoped="" ref="0x105b69060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x105b693e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x105b69570"/>
        <function-ref name="enableEvents" scoped="" ref="0x105b69700"/>
        <function-ref name="get" scoped="" ref="0x105b69890"/>
        <function-ref name="disableEvents" scoped="" ref="0x105b69a20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x105b69bb0"/>
        <function-ref name="getMode" scoped="" ref="0x105b69d40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x105b68020"/>
        <function-ref name="overflow" scoped="" ref="0x105b681b0"/>
        <function-ref name="setMode" scoped="" ref="0x105b68340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x105b684d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB4" ref="0x105b99da0" loc="62:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB4" scoped="" ref="0x105b99da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105b98180"/>
        <function-ref name="setEvent" scoped="" ref="0x105b98310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x105b984a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x105b98630"/>
        <function-ref name="fired" scoped="" ref="0x105b987c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA1" ref="0x105b5f0c0" loc="41:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA1" scoped="" ref="0x105b5f0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x105b5f440"/>
        <function-ref name="getControl" scoped="" ref="0x105b5f5d0"/>
        <function-ref name="enableEvents" scoped="" ref="0x105b5f760"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x105b5f8f0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x105b5fa80"/>
        <function-ref name="disableEvents" scoped="" ref="0x105b5fc10"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x105b5fda0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x105b78020"/>
        <function-ref name="setControl" scoped="" ref="0x105b781b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB5" ref="0x105b7fa50" loc="56:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB5" scoped="" ref="0x105b7fa50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x105b7fdd0"/>
        <function-ref name="getControl" scoped="" ref="0x105b9e020"/>
        <function-ref name="enableEvents" scoped="" ref="0x105b9e1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x105b9e340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x105b9e4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x105b9e660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x105b9e7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x105b9e980"/>
        <function-ref name="setControl" scoped="" ref="0x105b9eb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA0" ref="0x105b89690" loc="46:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA0" scoped="" ref="0x105b89690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105b89a10"/>
        <function-ref name="setSynchronous" scoped="" ref="0x105b89ba0"/>
        <function-ref name="captured" scoped="" ref="0x105b89d30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x105b6f020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x105b6f1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x105b6f340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB2" ref="0x105b94a20" loc="67:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB2" scoped="" ref="0x105b94a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105b94da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x105b93020"/>
        <function-ref name="captured" scoped="" ref="0x105b931b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x105b93340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x105b934d0"/>
        <function-ref name="setEdge" scoped="" ref="0x105b93660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA0" ref="0x105b71cf0" loc="43:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA0" scoped="" ref="0x105b71cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105b760a0"/>
        <function-ref name="setEvent" scoped="" ref="0x105b76230"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x105b763c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x105b76550"/>
        <function-ref name="fired" scoped="" ref="0x105b766e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB2" ref="0x105b9a1f0" loc="60:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB2" scoped="" ref="0x105b9a1f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105b9a570"/>
        <function-ref name="setEvent" scoped="" ref="0x105b9a700"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x105b9a890"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x105b9aa20"/>
        <function-ref name="fired" scoped="" ref="0x105b9abb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB5" ref="0x105b91a20" loc="70:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB5" scoped="" ref="0x105b91a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105b91da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x105b90020"/>
        <function-ref name="captured" scoped="" ref="0x105b901b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x105b90340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x105b904d0"/>
        <function-ref name="setEdge" scoped="" ref="0x105b90660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB3" ref="0x105b810c0" loc="54:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB3" scoped="" ref="0x105b810c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x105b81440"/>
        <function-ref name="getControl" scoped="" ref="0x105b815d0"/>
        <function-ref name="enableEvents" scoped="" ref="0x105b81760"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x105b818f0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x105b81a80"/>
        <function-ref name="disableEvents" scoped="" ref="0x105b81c10"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x105b81da0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x105b80020"/>
        <function-ref name="setControl" scoped="" ref="0x105b801b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerB" ref="0x105b886c0" loc="50:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerB" scoped="" ref="0x105b886c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x105b88a40"/>
        <function-ref name="setClockSource" scoped="" ref="0x105b88bd0"/>
        <function-ref name="enableEvents" scoped="" ref="0x105b88d60"/>
        <function-ref name="get" scoped="" ref="0x105b87020"/>
        <function-ref name="disableEvents" scoped="" ref="0x105b871b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x105b87340"/>
        <function-ref name="getMode" scoped="" ref="0x105b874d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x105b87660"/>
        <function-ref name="overflow" scoped="" ref="0x105b877f0"/>
        <function-ref name="setMode" scoped="" ref="0x105b87980"/>
        <function-ref name="setInputDivider" scoped="" ref="0x105b87b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB5" ref="0x105b98b80" loc="63:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB5" scoped="" ref="0x105b98b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105b97020"/>
        <function-ref name="setEvent" scoped="" ref="0x105b971b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x105b97340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x105b974d0"/>
        <function-ref name="fired" scoped="" ref="0x105b97660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB0" ref="0x105b96a20" loc="65:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB0" scoped="" ref="0x105b96a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105b96da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x105b95020"/>
        <function-ref name="captured" scoped="" ref="0x105b951b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x105b95340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x105b954d0"/>
        <function-ref name="setEdge" scoped="" ref="0x105b95660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB6" ref="0x105b97a20" loc="64:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB6" scoped="" ref="0x105b97a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105b96020"/>
        <function-ref name="setEvent" scoped="" ref="0x105b961b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x105b96340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x105b964d0"/>
        <function-ref name="fired" scoped="" ref="0x105b96660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB0" ref="0x105b9c570" loc="58:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB0" scoped="" ref="0x105b9c570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105b9c8f0"/>
        <function-ref name="setEvent" scoped="" ref="0x105b9ca80"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x105b9cc10"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x105b9cda0"/>
        <function-ref name="fired" scoped="" ref="0x105b9b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB6" ref="0x105b9d020" loc="57:../../tos/chips/msp430/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB6" scoped="" ref="0x105b9d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x105b9d3a0"/>
        <function-ref name="getControl" scoped="" ref="0x105b9d530"/>
        <function-ref name="enableEvents" scoped="" ref="0x105b9d6c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x105b9d850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x105b9d9e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x105b9db70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x105b9dd00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x105b9c020"/>
        <function-ref name="setControl" scoped="" ref="0x105b9c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x105bdcaa0" loc="53:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x105bdcaa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x105bdce20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x105bdc450" loc="52:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x105bdc450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x105bdc7d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x105bdb120" loc="54:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x105bdb120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x105bdb4a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x105bddd80" loc="51:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x105bddd80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x1053d1160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x105bdc180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x105bde540" loc="50:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x105bde540"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x105bde8c0"/>
        <function-ref name="setClockSource" scoped="" ref="0x105bdea50"/>
        <function-ref name="enableEvents" scoped="" ref="0x105bdebe0"/>
        <function-ref name="get" scoped="" ref="0x105bded70"/>
        <function-ref name="disableEvents" scoped="" ref="0x105bdd020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x105bdd1b0"/>
        <function-ref name="getMode" scoped="" ref="0x105bdd340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x105bdd4d0"/>
        <function-ref name="overflow" scoped="" ref="0x105bdd660"/>
        <function-ref name="setMode" scoped="" ref="0x105bdd7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x105bdd980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x105bd4940" loc="53:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x105bd4940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x105bd4cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x105bd42f0" loc="52:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x105bd42f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x105bd4670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x105bd3020" loc="54:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x105bd3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x105bd33a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x105bd5bf0" loc="51:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x105bd5bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x1053d1160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x105bd4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x105bd63e0" loc="50:../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x105bd63e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x105bd6760"/>
        <function-ref name="setClockSource" scoped="" ref="0x105bd68f0"/>
        <function-ref name="enableEvents" scoped="" ref="0x105bd6a80"/>
        <function-ref name="get" scoped="" ref="0x105bd6c10"/>
        <function-ref name="disableEvents" scoped="" ref="0x105bd6da0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x105bd5020"/>
        <function-ref name="getMode" scoped="" ref="0x105bd51b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x105bd5340"/>
        <function-ref name="overflow" scoped="" ref="0x105bd54d0"/>
        <function-ref name="setMode" scoped="" ref="0x105bd5660"/>
        <function-ref name="setInputDivider" scoped="" ref="0x105bd57f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x105c32a90" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x105c32a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105c32e10"/>
        <function-ref name="setSynchronous" scoped="" ref="0x105c31020"/>
        <function-ref name="captured" scoped="" ref="0x105c311b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x105c31340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x105c314d0"/>
        <function-ref name="setEdge" scoped="" ref="0x105c31660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x105bf29d0" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x105bf29d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x105bf2d50"/>
        <function-ref name="getControl" scoped="" ref="0x105c33020"/>
        <function-ref name="enableEvents" scoped="" ref="0x105c331b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x105c33340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x105c334d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x105c33660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x105c337f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x105c33980"/>
        <function-ref name="setControl" scoped="" ref="0x105c33b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x105c2f020" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x105c2f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x105c2f3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x105c33de0" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x105c33de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105c32180"/>
        <function-ref name="setEvent" scoped="" ref="0x105c32310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x105c324a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x105c32630"/>
        <function-ref name="fired" scoped="" ref="0x105c327c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x105c31930" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x105c31930"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x105c31cb0"/>
        <function-ref name="setClockSource" scoped="" ref="0x105c31e40"/>
        <function-ref name="enableEvents" scoped="" ref="0x105c30020"/>
        <function-ref name="get" scoped="" ref="0x105c301b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x105c30340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x105c304d0"/>
        <function-ref name="getMode" scoped="" ref="0x105c30660"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x105c307f0"/>
        <function-ref name="overflow" scoped="" ref="0x105c30980"/>
        <function-ref name="setMode" scoped="" ref="0x105c30b10"/>
        <function-ref name="setInputDivider" scoped="" ref="0x105c30ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x105c2a160" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x105c2a160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105c2a4e0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x105c2a670"/>
        <function-ref name="captured" scoped="" ref="0x105c2a800"/>
        <function-ref name="clearOverflow" scoped="" ref="0x105c2a990"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x105c2ab20"/>
        <function-ref name="setEdge" scoped="" ref="0x105c2acb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x105c2c020" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x105c2c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x105c2c3a0"/>
        <function-ref name="getControl" scoped="" ref="0x105c2c530"/>
        <function-ref name="enableEvents" scoped="" ref="0x105c2c6c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x105c2c850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x105c2c9e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x105c2cb70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x105c2cd00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x105c2b020"/>
        <function-ref name="setControl" scoped="" ref="0x105c2b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x105c277a0" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x105c277a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x105c27b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x105c2b480" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x105c2b480"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105c2b800"/>
        <function-ref name="setEvent" scoped="" ref="0x105c2b990"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x105c2bb20"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x105c2bcb0"/>
        <function-ref name="fired" scoped="" ref="0x105c2be40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x105c29020" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x105c29020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x105c293a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x105c29530"/>
        <function-ref name="enableEvents" scoped="" ref="0x105c296c0"/>
        <function-ref name="get" scoped="" ref="0x105c29850"/>
        <function-ref name="disableEvents" scoped="" ref="0x105c299e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x105c29b70"/>
        <function-ref name="getMode" scoped="" ref="0x105c29d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x105c27020"/>
        <function-ref name="overflow" scoped="" ref="0x105c271b0"/>
        <function-ref name="setMode" scoped="" ref="0x105c27340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x105c274d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x105c457a0" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x105c457a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105c45b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x105c45cb0"/>
        <function-ref name="captured" scoped="" ref="0x105c45e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x105c44020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x105c441b0"/>
        <function-ref name="setEdge" scoped="" ref="0x105c44340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x105c476d0" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x105c476d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x105c47a50"/>
        <function-ref name="getControl" scoped="" ref="0x105c47be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x105c47d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x105c46020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x105c461b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x105c46340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x105c464d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x105c46660"/>
        <function-ref name="setControl" scoped="" ref="0x105c467f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x105c43c50" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x105c43c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x105c42020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x105c46ac0" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x105c46ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105c46e40"/>
        <function-ref name="setEvent" scoped="" ref="0x105c45020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x105c451b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x105c45340"/>
        <function-ref name="fired" scoped="" ref="0x105c454d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x105c44610" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x105c44610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x105c44990"/>
        <function-ref name="setClockSource" scoped="" ref="0x105c44b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x105c44cb0"/>
        <function-ref name="get" scoped="" ref="0x105c44e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x105c43020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x105c431b0"/>
        <function-ref name="getMode" scoped="" ref="0x105c43340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x105c434d0"/>
        <function-ref name="overflow" scoped="" ref="0x105c43660"/>
        <function-ref name="setMode" scoped="" ref="0x105c437f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x105c43980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x105c3ecb0" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x105c3ecb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105c3d0a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x105c3d230"/>
        <function-ref name="captured" scoped="" ref="0x105c3d3c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x105c3d550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x105c3d6e0"/>
        <function-ref name="setEdge" scoped="" ref="0x105c3d870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x105c40b30" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x105c40b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x105c3f020"/>
        <function-ref name="getControl" scoped="" ref="0x105c3f1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x105c3f340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x105c3f4d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x105c3f660"/>
        <function-ref name="disableEvents" scoped="" ref="0x105c3f7f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x105c3f980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x105c3fb10"/>
        <function-ref name="setControl" scoped="" ref="0x105c3fca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x105c3b2f0" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x105c3b2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x105c3b670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x105c3e020" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x105c3e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105c3e3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x105c3e530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x105c3e6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x105c3e850"/>
        <function-ref name="fired" scoped="" ref="0x105c3e9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x105c3db40" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x105c3db40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x105c3c020"/>
        <function-ref name="setClockSource" scoped="" ref="0x105c3c1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x105c3c340"/>
        <function-ref name="get" scoped="" ref="0x105c3c4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x105c3c660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x105c3c7f0"/>
        <function-ref name="getMode" scoped="" ref="0x105c3c980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x105c3cb10"/>
        <function-ref name="overflow" scoped="" ref="0x105c3cca0"/>
        <function-ref name="setMode" scoped="" ref="0x105c3ce30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x105c3b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x105c592f0" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x105c592f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105c59670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x105c59800"/>
        <function-ref name="captured" scoped="" ref="0x105c59990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x105c59b20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x105c59cb0"/>
        <function-ref name="setEdge" scoped="" ref="0x105c59e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x105c37220" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x105c37220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x105c375a0"/>
        <function-ref name="getControl" scoped="" ref="0x105c37730"/>
        <function-ref name="enableEvents" scoped="" ref="0x105c378c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x105c37a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x105c37be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x105c37d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x105c5a020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x105c5a1b0"/>
        <function-ref name="setControl" scoped="" ref="0x105c5a340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x105c577a0" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x105c577a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x105c57b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x105c5a610" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x105c5a610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105c5a990"/>
        <function-ref name="setEvent" scoped="" ref="0x105c5ab20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x105c5acb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x105c5ae40"/>
        <function-ref name="fired" scoped="" ref="0x105c59020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x105c58160" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x105c58160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x105c584e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x105c58670"/>
        <function-ref name="enableEvents" scoped="" ref="0x105c58800"/>
        <function-ref name="get" scoped="" ref="0x105c58990"/>
        <function-ref name="disableEvents" scoped="" ref="0x105c58b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x105c58cb0"/>
        <function-ref name="getMode" scoped="" ref="0x105c58e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x105c57020"/>
        <function-ref name="overflow" scoped="" ref="0x105c571b0"/>
        <function-ref name="setMode" scoped="" ref="0x105c57340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x105c574d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x105c527a0" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x105c527a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105c52b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x105c52cb0"/>
        <function-ref name="captured" scoped="" ref="0x105c52e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x105c51020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x105c511b0"/>
        <function-ref name="setEdge" scoped="" ref="0x105c51340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x105c546d0" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x105c546d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x105c54a50"/>
        <function-ref name="getControl" scoped="" ref="0x105c54be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x105c54d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x105c53020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x105c531b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x105c53340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x105c534d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x105c53660"/>
        <function-ref name="setControl" scoped="" ref="0x105c537f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x105c50c50" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x105c50c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x105c4e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x105c53ac0" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x105c53ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105c53e40"/>
        <function-ref name="setEvent" scoped="" ref="0x105c52020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x105c521b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x105c52340"/>
        <function-ref name="fired" scoped="" ref="0x105c524d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x105c51610" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x105c51610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x105c51990"/>
        <function-ref name="setClockSource" scoped="" ref="0x105c51b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x105c51cb0"/>
        <function-ref name="get" scoped="" ref="0x105c51e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x105c50020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x105c501b0"/>
        <function-ref name="getMode" scoped="" ref="0x105c50340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x105c504d0"/>
        <function-ref name="overflow" scoped="" ref="0x105c50660"/>
        <function-ref name="setMode" scoped="" ref="0x105c507f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x105c50980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x105c4acb0" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x105c4acb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105c490a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x105c49230"/>
        <function-ref name="captured" scoped="" ref="0x105c493c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x105c49550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x105c496e0"/>
        <function-ref name="setEdge" scoped="" ref="0x105c49870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x105c4cb30" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x105c4cb30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x105c4b020"/>
        <function-ref name="getControl" scoped="" ref="0x105c4b1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x105c4b340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x105c4b4d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x105c4b660"/>
        <function-ref name="disableEvents" scoped="" ref="0x105c4b7f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x105c4b980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x105c4bb10"/>
        <function-ref name="setControl" scoped="" ref="0x105c4bca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x105c6b2f0" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x105c6b2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x105c6b670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x105c4a020" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x105c4a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105c4a3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x105c4a530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x105c4a6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x105c4a850"/>
        <function-ref name="fired" scoped="" ref="0x105c4a9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x105c49b40" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x105c49b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x105c6c020"/>
        <function-ref name="setClockSource" scoped="" ref="0x105c6c1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x105c6c340"/>
        <function-ref name="get" scoped="" ref="0x105c6c4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x105c6c660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x105c6c7f0"/>
        <function-ref name="getMode" scoped="" ref="0x105c6c980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x105c6cb10"/>
        <function-ref name="overflow" scoped="" ref="0x105c6cca0"/>
        <function-ref name="setMode" scoped="" ref="0x105c6ce30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x105c6b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x105c662f0" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x105c662f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105c66670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x105c66800"/>
        <function-ref name="captured" scoped="" ref="0x105c66990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x105c66b20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x105c66cb0"/>
        <function-ref name="setEdge" scoped="" ref="0x105c66e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x105c68220" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x105c68220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x105c685a0"/>
        <function-ref name="getControl" scoped="" ref="0x105c68730"/>
        <function-ref name="enableEvents" scoped="" ref="0x105c688c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x105c68a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x105c68be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x105c68d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x105c67020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x105c671b0"/>
        <function-ref name="setControl" scoped="" ref="0x105c67340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x105c647a0" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x105c647a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x105c64b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x105c67610" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x105c67610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105c67990"/>
        <function-ref name="setEvent" scoped="" ref="0x105c67b20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x105c67cb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x105c67e40"/>
        <function-ref name="fired" scoped="" ref="0x105c66020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x105c65160" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x105c65160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x105c654e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x105c65670"/>
        <function-ref name="enableEvents" scoped="" ref="0x105c65800"/>
        <function-ref name="get" scoped="" ref="0x105c65990"/>
        <function-ref name="disableEvents" scoped="" ref="0x105c65b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x105c65cb0"/>
        <function-ref name="getMode" scoped="" ref="0x105c65e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x105c64020"/>
        <function-ref name="overflow" scoped="" ref="0x105c641b0"/>
        <function-ref name="setMode" scoped="" ref="0x105c64340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x105c644d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x105c5e7a0" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x105c5e7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105c5eb20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x105c5ecb0"/>
        <function-ref name="captured" scoped="" ref="0x105c5ee40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x105c5d020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x105c5d1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x105c5d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x105c606d0" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x105c606d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x105c60a50"/>
        <function-ref name="getControl" scoped="" ref="0x105c60be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x105c60d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x105c5f020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x105c5f1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x105c5f340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x105c5f4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x105c5f660"/>
        <function-ref name="setControl" scoped="" ref="0x105c5f7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x105c5cc50" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x105c5cc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x105c5b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x105c5fac0" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x105c5fac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105c5fe40"/>
        <function-ref name="setEvent" scoped="" ref="0x105c5e020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x105c5e1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x105c5e340"/>
        <function-ref name="fired" scoped="" ref="0x105c5e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x105c5d610" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x105c5d610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x105c5d990"/>
        <function-ref name="setClockSource" scoped="" ref="0x105c5db20"/>
        <function-ref name="enableEvents" scoped="" ref="0x105c5dcb0"/>
        <function-ref name="get" scoped="" ref="0x105c5de40"/>
        <function-ref name="disableEvents" scoped="" ref="0x105c5c020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x105c5c1b0"/>
        <function-ref name="getMode" scoped="" ref="0x105c5c340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x105c5c4d0"/>
        <function-ref name="overflow" scoped="" ref="0x105c5c660"/>
        <function-ref name="setMode" scoped="" ref="0x105c5c7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x105c5c980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x105c7bcb0" loc="46:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x105c7bcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105c7a0a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x105c7a230"/>
        <function-ref name="captured" scoped="" ref="0x105c7a3c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x105c7a550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x105c7a6e0"/>
        <function-ref name="setEdge" scoped="" ref="0x105c7a870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x105c7db30" loc="44:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x105c7db30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x105c7c020"/>
        <function-ref name="getControl" scoped="" ref="0x105c7c1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x105c7c340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x105c7c4d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x105c7c660"/>
        <function-ref name="disableEvents" scoped="" ref="0x105c7c7f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x105c7c980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x105c7cb10"/>
        <function-ref name="setControl" scoped="" ref="0x105c7cca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x105c782f0" loc="48:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x105c782f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x105c78670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x105c7b020" loc="45:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x105c7b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105c7b3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x105c7b530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x105c7b6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x105c7b850"/>
        <function-ref name="fired" scoped="" ref="0x105c7b9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x105c7ab40" loc="47:../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x105c7ab40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x105c79020"/>
        <function-ref name="setClockSource" scoped="" ref="0x105c791b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x105c79340"/>
        <function-ref name="get" scoped="" ref="0x105c794d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x105c79660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x105c797f0"/>
        <function-ref name="getMode" scoped="" ref="0x105c79980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x105c79b10"/>
        <function-ref name="overflow" scoped="" ref="0x105c79ca0"/>
        <function-ref name="setMode" scoped="" ref="0x105c79e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x105c78020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB1" ref="0x105c71240" loc="7:../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB1" scoped="" ref="0x105c71240"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x105c715c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA0" ref="0x105c76a90" loc="4:../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA0" scoped="" ref="0x105c76a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x105c76e10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA1" ref="0x105c72260" loc="5:../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA1" scoped="" ref="0x105c72260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x105c725e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB0" ref="0x105c729f0" loc="6:../../tos/chips/msp430/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB0" scoped="" ref="0x105c729f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x105c72d70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x1059e4510" loc="55:../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x1059e4510"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x1059e4890"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x1056c8760" loc="51:../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x1056c8760"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x1056c8ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x10576dcc0" loc="52:../../tos/chips/msp430/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerState" scoped="" ref="0x10576dcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x1058020a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430ClockInit" ref="0x105b17b40" loc="39:../../tos/platforms/telosb/MoteClockP.nc">
      <component-ref qname="MoteClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x105b17b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x105cb0b10"/>
        <function-ref name="initTimerB" scoped="" ref="0x105cb01b0"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x105cb0340"/>
        <function-ref name="initTimerA" scoped="" ref="0x105cb04d0"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x105cb0020"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x105cb0660"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x105cb07f0"/>
        <function-ref name="initClocks" scoped="" ref="0x105cb0980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x105cc9dc0" loc="60:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x105cc9dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x105cc8180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x105cb1590" loc="57:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x105cb1590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x105cb1910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x105cc96c0" loc="59:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PlatformInit" scoped="" ref="0x105cc96c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x105cc9a40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x105cb1c00" loc="58:../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x105cb1c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x105cc9020"/>
        <function-ref name="taskLoop" scoped="" ref="0x105cc91b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x105cc9340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x1055f41d0" loc="48:../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x1055f41d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x1053d1160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x1055f4550"/>
        <function-ref name="runTask" scoped="" ref="0x1055f46e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x1056683a0" loc="47:../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x1056683a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x105668720"/>
        <function-ref name="taskLoop" scoped="" ref="0x1056688b0"/>
        <function-ref name="runNextTask" scoped="" ref="0x105668a40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x105abf320" loc="56:../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x105abf320"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x1053d1160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x105abf6a0"/>
        <function-ref name="runTask" scoped="" ref="0x105abf830"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x105abb990" loc="57:../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x105abb990"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x105abbd10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x105ac0420" loc="55:../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x105ac0420"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x105ac07a0"/>
        <function-ref name="taskLoop" scoped="" ref="0x105ac0930"/>
        <function-ref name="runNextTask" scoped="" ref="0x105ac0ac0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer0" ref="0x105cd67f0" loc="10:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer0" scoped="" ref="0x105cd67f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x105ae8e60"/>
            <typename><typedef-ref name="TMilli" ref="0x105cbd200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x105cd4cf0"/>
        <function-ref name="fired" scoped="" ref="0x105cba300"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x105cd40d0"/>
        <function-ref name="isOneShot" scoped="" ref="0x105cbac00"/>
        <function-ref name="getdt" scoped="" ref="0x105cd3660"/>
        <function-ref name="gett0" scoped="" ref="0x105cd31e0"/>
        <function-ref name="isRunning" scoped="" ref="0x105cba780"/>
        <function-ref name="startPeriodic" scoped="" ref="0x105cbb480"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x105cd46e0"/>
        <function-ref name="startOneShot" scoped="" ref="0x105cbb950"/>
        <function-ref name="stop" scoped="" ref="0x105cbbe20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x105cd1020" loc="14:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x105cd1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x105cd13a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x105ced8d0" loc="13:BlinkC.nc">
      <component-ref qname="BlinkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x105ced8d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x105cedc50"/>
        <function-ref name="led0Toggle" scoped="" ref="0x105cedde0"/>
        <function-ref name="led1On" scoped="" ref="0x105cd2020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x105cd21b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x105cd2340"/>
        <function-ref name="get" scoped="" ref="0x105cd24d0"/>
        <function-ref name="led1Off" scoped="" ref="0x105cd2660"/>
        <function-ref name="led2Off" scoped="" ref="0x105cd2ca0"/>
        <function-ref name="set" scoped="" ref="0x105cd27f0"/>
        <function-ref name="led0On" scoped="" ref="0x105cd2980"/>
        <function-ref name="led2On" scoped="" ref="0x105cd2b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x105cbe860" loc="46:../../tos/system/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x105cbe860"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x105cbebe0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x105cbed70"/>
        <function-ref name="led1On" scoped="" ref="0x105ce7020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x105ce71b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x105ce7340"/>
        <function-ref name="get" scoped="" ref="0x105ce74d0"/>
        <function-ref name="led1Off" scoped="" ref="0x105ce7660"/>
        <function-ref name="led2Off" scoped="" ref="0x105ce7ca0"/>
        <function-ref name="set" scoped="" ref="0x105ce77f0"/>
        <function-ref name="led0On" scoped="" ref="0x105ce7980"/>
        <function-ref name="led2On" scoped="" ref="0x105ce7b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x105cff910" loc="50:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x105cff910"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105cffc90"/>
        <function-ref name="isInput" scoped="" ref="0x105cffe20"/>
        <function-ref name="toggle" scoped="" ref="0x105d05020"/>
        <function-ref name="isOutput" scoped="" ref="0x105d051b0"/>
        <function-ref name="get" scoped="" ref="0x105d05340"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d054d0"/>
        <function-ref name="set" scoped="" ref="0x105d05660"/>
        <function-ref name="clr" scoped="" ref="0x105d057f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x105ce5c30" loc="46:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x105ce5c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x105ce1020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x105d05b10" loc="51:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x105d05b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d04020"/>
        <function-ref name="isInput" scoped="" ref="0x105d041b0"/>
        <function-ref name="toggle" scoped="" ref="0x105d04340"/>
        <function-ref name="isOutput" scoped="" ref="0x105d044d0"/>
        <function-ref name="get" scoped="" ref="0x105d04660"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d047f0"/>
        <function-ref name="set" scoped="" ref="0x105d04980"/>
        <function-ref name="clr" scoped="" ref="0x105d04b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x105ce12a0" loc="47:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x105ce12a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x105ce1620"/>
        <function-ref name="led0Toggle" scoped="" ref="0x105ce17b0"/>
        <function-ref name="led1On" scoped="" ref="0x105ce1940"/>
        <function-ref name="led1Toggle" scoped="" ref="0x105ce1ad0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x105ce1c60"/>
        <function-ref name="get" scoped="" ref="0x105ce1df0"/>
        <function-ref name="led1Off" scoped="" ref="0x105ce0020"/>
        <function-ref name="led2Off" scoped="" ref="0x105ce0660"/>
        <function-ref name="set" scoped="" ref="0x105ce01b0"/>
        <function-ref name="led0On" scoped="" ref="0x105ce0340"/>
        <function-ref name="led2On" scoped="" ref="0x105ce04d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x105d04e30" loc="52:../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x105d04e30"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105cfe1e0"/>
        <function-ref name="isInput" scoped="" ref="0x105cfe370"/>
        <function-ref name="toggle" scoped="" ref="0x105cfe500"/>
        <function-ref name="isOutput" scoped="" ref="0x105cfe690"/>
        <function-ref name="get" scoped="" ref="0x105cfe820"/>
        <function-ref name="makeOutput" scoped="" ref="0x105cfe9b0"/>
        <function-ref name="set" scoped="" ref="0x105cfeb40"/>
        <function-ref name="clr" scoped="" ref="0x105cfecd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x105d09360" loc="41:../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x105d09360"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d096e0"/>
        <function-ref name="isInput" scoped="" ref="0x105d09870"/>
        <function-ref name="toggle" scoped="" ref="0x105d09a00"/>
        <function-ref name="isOutput" scoped="" ref="0x105d09b90"/>
        <function-ref name="get" scoped="" ref="0x105d09d20"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d08020"/>
        <function-ref name="set" scoped="" ref="0x105d081b0"/>
        <function-ref name="clr" scoped="" ref="0x105d08340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x105d086a0" loc="42:../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x105d086a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d08a20"/>
        <function-ref name="isInput" scoped="" ref="0x105d08bb0"/>
        <function-ref name="toggle" scoped="" ref="0x105d08d40"/>
        <function-ref name="isOutput" scoped="" ref="0x105d07020"/>
        <function-ref name="get" scoped="" ref="0x105d071b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d07340"/>
        <function-ref name="set" scoped="" ref="0x105d074d0"/>
        <function-ref name="clr" scoped="" ref="0x105d07660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x105d06c40" loc="44:../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x105d06c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x105d2a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x105d079c0" loc="43:../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x105d079c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d07d40"/>
        <function-ref name="isInput" scoped="" ref="0x105d06020"/>
        <function-ref name="toggle" scoped="" ref="0x105d061b0"/>
        <function-ref name="isOutput" scoped="" ref="0x105d06340"/>
        <function-ref name="get" scoped="" ref="0x105d064d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d06660"/>
        <function-ref name="set" scoped="" ref="0x105d067f0"/>
        <function-ref name="clr" scoped="" ref="0x105d06980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x105d3b020" loc="53:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x105d3b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d3b3a0"/>
        <function-ref name="isInput" scoped="" ref="0x105d3b530"/>
        <function-ref name="setResistor" scoped="" ref="0x105d3b6c0"/>
        <function-ref name="toggle" scoped="" ref="0x105d3b850"/>
        <function-ref name="isOutput" scoped="" ref="0x105d3b9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d3bb70"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d3bd00"/>
        <function-ref name="get" scoped="" ref="0x105d3a020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d3a1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x105d3a340"/>
        <function-ref name="set" scoped="" ref="0x105d3a4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d3a660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d3a7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d3aa80"/>
        <function-ref name="clr" scoped="" ref="0x105d3ac10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x105d4e020" loc="66:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x105d4e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d4e3a0"/>
        <function-ref name="isInput" scoped="" ref="0x105d4e530"/>
        <function-ref name="setResistor" scoped="" ref="0x105d4e6c0"/>
        <function-ref name="toggle" scoped="" ref="0x105d4e850"/>
        <function-ref name="isOutput" scoped="" ref="0x105d4e9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d4eb70"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d4ed00"/>
        <function-ref name="get" scoped="" ref="0x105d4d020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d4d1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x105d4d340"/>
        <function-ref name="set" scoped="" ref="0x105d4d4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d4d660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d4d7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d4da80"/>
        <function-ref name="clr" scoped="" ref="0x105d4dc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SDA" ref="0x105d7c560" loc="145:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SDA" scoped="" ref="0x105d7c560"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d7c8e0"/>
        <function-ref name="isInput" scoped="" ref="0x105d7ca70"/>
        <function-ref name="setResistor" scoped="" ref="0x105d7cc00"/>
        <function-ref name="toggle" scoped="" ref="0x105d7cd90"/>
        <function-ref name="isOutput" scoped="" ref="0x105d7b020"/>
        <function-ref name="getResistor" scoped="" ref="0x105d7b1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d7b340"/>
        <function-ref name="get" scoped="" ref="0x105d7b4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d7b660"/>
        <function-ref name="getRaw" scoped="" ref="0x105d7b7f0"/>
        <function-ref name="set" scoped="" ref="0x105d7b980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d7bb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d7bca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105da2020"/>
        <function-ref name="clr" scoped="" ref="0x105da21b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC6" ref="0x105da8570" loc="165:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC6" scoped="" ref="0x105da8570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105da88f0"/>
        <function-ref name="isInput" scoped="" ref="0x105da8a80"/>
        <function-ref name="setResistor" scoped="" ref="0x105da8c10"/>
        <function-ref name="toggle" scoped="" ref="0x105da8da0"/>
        <function-ref name="isOutput" scoped="" ref="0x105da6020"/>
        <function-ref name="getResistor" scoped="" ref="0x105da61b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105da6340"/>
        <function-ref name="get" scoped="" ref="0x105da64d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105da6660"/>
        <function-ref name="getRaw" scoped="" ref="0x105da67f0"/>
        <function-ref name="set" scoped="" ref="0x105da6980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105da6b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105da6ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105da5020"/>
        <function-ref name="clr" scoped="" ref="0x105da51b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI0" ref="0x105da2580" loc="146:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI0" scoped="" ref="0x105da2580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105da2900"/>
        <function-ref name="isInput" scoped="" ref="0x105da2a90"/>
        <function-ref name="setResistor" scoped="" ref="0x105da2c20"/>
        <function-ref name="toggle" scoped="" ref="0x105da2db0"/>
        <function-ref name="isOutput" scoped="" ref="0x105da1020"/>
        <function-ref name="getResistor" scoped="" ref="0x105da11b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105da1340"/>
        <function-ref name="get" scoped="" ref="0x105da14d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105da1660"/>
        <function-ref name="getRaw" scoped="" ref="0x105da17f0"/>
        <function-ref name="set" scoped="" ref="0x105da1980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105da1b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105da1ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105da0020"/>
        <function-ref name="clr" scoped="" ref="0x105da01b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port30" ref="0x105d4a020" loc="71:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port30" scoped="" ref="0x105d4a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d4a3a0"/>
        <function-ref name="isInput" scoped="" ref="0x105d4a530"/>
        <function-ref name="setResistor" scoped="" ref="0x105d4a6c0"/>
        <function-ref name="toggle" scoped="" ref="0x105d4a850"/>
        <function-ref name="isOutput" scoped="" ref="0x105d4a9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d4ab70"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d4ad00"/>
        <function-ref name="get" scoped="" ref="0x105d49020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d491b0"/>
        <function-ref name="getRaw" scoped="" ref="0x105d49340"/>
        <function-ref name="set" scoped="" ref="0x105d494d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d49660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d497f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d49a80"/>
        <function-ref name="clr" scoped="" ref="0x105d49c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port42" ref="0x105d5d200" loc="84:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port42" scoped="" ref="0x105d5d200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d5d580"/>
        <function-ref name="isInput" scoped="" ref="0x105d5d710"/>
        <function-ref name="setResistor" scoped="" ref="0x105d5d8a0"/>
        <function-ref name="toggle" scoped="" ref="0x105d5da30"/>
        <function-ref name="isOutput" scoped="" ref="0x105d5dbc0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d5dd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d5c020"/>
        <function-ref name="get" scoped="" ref="0x105d5c1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d5c340"/>
        <function-ref name="getRaw" scoped="" ref="0x105d5c4d0"/>
        <function-ref name="set" scoped="" ref="0x105d5c660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d5c7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d5c980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d5cc10"/>
        <function-ref name="clr" scoped="" ref="0x105d5cda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port54" ref="0x105d71200" loc="97:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port54" scoped="" ref="0x105d71200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d71580"/>
        <function-ref name="isInput" scoped="" ref="0x105d71710"/>
        <function-ref name="setResistor" scoped="" ref="0x105d718a0"/>
        <function-ref name="toggle" scoped="" ref="0x105d71a30"/>
        <function-ref name="isOutput" scoped="" ref="0x105d71bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d71d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d70020"/>
        <function-ref name="get" scoped="" ref="0x105d701b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d70340"/>
        <function-ref name="getRaw" scoped="" ref="0x105d704d0"/>
        <function-ref name="set" scoped="" ref="0x105d70660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d707f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d70980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d70c10"/>
        <function-ref name="clr" scoped="" ref="0x105d70da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port64" ref="0x105d89200" loc="108:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port64" scoped="" ref="0x105d89200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d89580"/>
        <function-ref name="isInput" scoped="" ref="0x105d89710"/>
        <function-ref name="setResistor" scoped="" ref="0x105d898a0"/>
        <function-ref name="toggle" scoped="" ref="0x105d89a30"/>
        <function-ref name="isOutput" scoped="" ref="0x105d89bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d89d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d88020"/>
        <function-ref name="get" scoped="" ref="0x105d881b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d88340"/>
        <function-ref name="getRaw" scoped="" ref="0x105d884d0"/>
        <function-ref name="set" scoped="" ref="0x105d88660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d887f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d88980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d88c10"/>
        <function-ref name="clr" scoped="" ref="0x105d88da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD0" ref="0x105d9c580" loc="149:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD0" scoped="" ref="0x105d9c580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d9c900"/>
        <function-ref name="isInput" scoped="" ref="0x105d9ca90"/>
        <function-ref name="setResistor" scoped="" ref="0x105d9cc20"/>
        <function-ref name="toggle" scoped="" ref="0x105d9cdb0"/>
        <function-ref name="isOutput" scoped="" ref="0x105d9b020"/>
        <function-ref name="getResistor" scoped="" ref="0x105d9b1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d9b340"/>
        <function-ref name="get" scoped="" ref="0x105d9b4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d9b660"/>
        <function-ref name="getRaw" scoped="" ref="0x105d9b7f0"/>
        <function-ref name="set" scoped="" ref="0x105d9b980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d9bb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d9bca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d9a020"/>
        <function-ref name="clr" scoped="" ref="0x105d9a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC0" ref="0x105db4570" loc="159:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC0" scoped="" ref="0x105db4570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105db48f0"/>
        <function-ref name="isInput" scoped="" ref="0x105db4a80"/>
        <function-ref name="setResistor" scoped="" ref="0x105db4c10"/>
        <function-ref name="toggle" scoped="" ref="0x105db4da0"/>
        <function-ref name="isOutput" scoped="" ref="0x105db3020"/>
        <function-ref name="getResistor" scoped="" ref="0x105db31b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105db3340"/>
        <function-ref name="get" scoped="" ref="0x105db34d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105db3660"/>
        <function-ref name="getRaw" scoped="" ref="0x105db37f0"/>
        <function-ref name="set" scoped="" ref="0x105db3980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105db3b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105db3ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105db2020"/>
        <function-ref name="clr" scoped="" ref="0x105db21b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSIN" ref="0x105dc8580" loc="171:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSIN" scoped="" ref="0x105dc8580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105dc8900"/>
        <function-ref name="isInput" scoped="" ref="0x105dc8a90"/>
        <function-ref name="setResistor" scoped="" ref="0x105dc8c20"/>
        <function-ref name="toggle" scoped="" ref="0x105dc8db0"/>
        <function-ref name="isOutput" scoped="" ref="0x105dc7020"/>
        <function-ref name="getResistor" scoped="" ref="0x105dc71b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105dc7340"/>
        <function-ref name="get" scoped="" ref="0x105dc74d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105dc7660"/>
        <function-ref name="getRaw" scoped="" ref="0x105dc77f0"/>
        <function-ref name="set" scoped="" ref="0x105dc7980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105dc7b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105dc7ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105dc6020"/>
        <function-ref name="clr" scoped="" ref="0x105dc61b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x105d35020" loc="56:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x105d35020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d353a0"/>
        <function-ref name="isInput" scoped="" ref="0x105d35530"/>
        <function-ref name="setResistor" scoped="" ref="0x105d356c0"/>
        <function-ref name="toggle" scoped="" ref="0x105d35850"/>
        <function-ref name="isOutput" scoped="" ref="0x105d359e0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d35b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d35d00"/>
        <function-ref name="get" scoped="" ref="0x105d34020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d341b0"/>
        <function-ref name="getRaw" scoped="" ref="0x105d34340"/>
        <function-ref name="set" scoped="" ref="0x105d344d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d34660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d347f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d34a80"/>
        <function-ref name="clr" scoped="" ref="0x105d34c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD0" ref="0x105d9a580" loc="150:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD0" scoped="" ref="0x105d9a580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d9a900"/>
        <function-ref name="isInput" scoped="" ref="0x105d9aa90"/>
        <function-ref name="setResistor" scoped="" ref="0x105d9ac20"/>
        <function-ref name="toggle" scoped="" ref="0x105d9adb0"/>
        <function-ref name="isOutput" scoped="" ref="0x105d99020"/>
        <function-ref name="getResistor" scoped="" ref="0x105d991b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d99340"/>
        <function-ref name="get" scoped="" ref="0x105d994d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d99660"/>
        <function-ref name="getRaw" scoped="" ref="0x105d997f0"/>
        <function-ref name="set" scoped="" ref="0x105d99980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d99b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d99ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d98020"/>
        <function-ref name="clr" scoped="" ref="0x105d981b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x105d31020" loc="61:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x105d31020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d313a0"/>
        <function-ref name="isInput" scoped="" ref="0x105d31530"/>
        <function-ref name="setResistor" scoped="" ref="0x105d316c0"/>
        <function-ref name="toggle" scoped="" ref="0x105d31850"/>
        <function-ref name="isOutput" scoped="" ref="0x105d319e0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d31b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d31d00"/>
        <function-ref name="get" scoped="" ref="0x105d30020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d301b0"/>
        <function-ref name="getRaw" scoped="" ref="0x105d30340"/>
        <function-ref name="set" scoped="" ref="0x105d304d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d30660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d307f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d30a80"/>
        <function-ref name="clr" scoped="" ref="0x105d30c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port33" ref="0x105d44020" loc="74:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port33" scoped="" ref="0x105d44020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d443a0"/>
        <function-ref name="isInput" scoped="" ref="0x105d44530"/>
        <function-ref name="setResistor" scoped="" ref="0x105d446c0"/>
        <function-ref name="toggle" scoped="" ref="0x105d44850"/>
        <function-ref name="isOutput" scoped="" ref="0x105d449e0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d44b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d44d00"/>
        <function-ref name="get" scoped="" ref="0x105d43020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d431b0"/>
        <function-ref name="getRaw" scoped="" ref="0x105d43340"/>
        <function-ref name="set" scoped="" ref="0x105d434d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d43660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d437f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d43a80"/>
        <function-ref name="clr" scoped="" ref="0x105d43c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port45" ref="0x105d57200" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port45" scoped="" ref="0x105d57200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d57580"/>
        <function-ref name="isInput" scoped="" ref="0x105d57710"/>
        <function-ref name="setResistor" scoped="" ref="0x105d578a0"/>
        <function-ref name="toggle" scoped="" ref="0x105d57a30"/>
        <function-ref name="isOutput" scoped="" ref="0x105d57bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d57d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d56020"/>
        <function-ref name="get" scoped="" ref="0x105d561b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d56340"/>
        <function-ref name="getRaw" scoped="" ref="0x105d564d0"/>
        <function-ref name="set" scoped="" ref="0x105d56660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d567f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d56980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d56c10"/>
        <function-ref name="clr" scoped="" ref="0x105d56da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port57" ref="0x105d6b200" loc="100:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port57" scoped="" ref="0x105d6b200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d6b580"/>
        <function-ref name="isInput" scoped="" ref="0x105d6b710"/>
        <function-ref name="setResistor" scoped="" ref="0x105d6b8a0"/>
        <function-ref name="toggle" scoped="" ref="0x105d6ba30"/>
        <function-ref name="isOutput" scoped="" ref="0x105d6bbc0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d6bd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d6a020"/>
        <function-ref name="get" scoped="" ref="0x105d6a1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d6a340"/>
        <function-ref name="getRaw" scoped="" ref="0x105d6a4d0"/>
        <function-ref name="set" scoped="" ref="0x105d6a660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d6a7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d6a980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d6ac10"/>
        <function-ref name="clr" scoped="" ref="0x105d6ada0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port67" ref="0x105d82200" loc="111:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port67" scoped="" ref="0x105d82200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d82580"/>
        <function-ref name="isInput" scoped="" ref="0x105d82710"/>
        <function-ref name="setResistor" scoped="" ref="0x105d828a0"/>
        <function-ref name="toggle" scoped="" ref="0x105d82a30"/>
        <function-ref name="isOutput" scoped="" ref="0x105d82bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d82d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d81020"/>
        <function-ref name="get" scoped="" ref="0x105d811b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d81340"/>
        <function-ref name="getRaw" scoped="" ref="0x105d814d0"/>
        <function-ref name="set" scoped="" ref="0x105d81660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d817f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d81980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d81c10"/>
        <function-ref name="clr" scoped="" ref="0x105d81da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x105d19020" loc="51:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x105d19020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d193a0"/>
        <function-ref name="isInput" scoped="" ref="0x105d19530"/>
        <function-ref name="setResistor" scoped="" ref="0x105d196c0"/>
        <function-ref name="toggle" scoped="" ref="0x105d19850"/>
        <function-ref name="isOutput" scoped="" ref="0x105d199e0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d19b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d19d00"/>
        <function-ref name="get" scoped="" ref="0x105d3e020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d3e1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x105d3e340"/>
        <function-ref name="set" scoped="" ref="0x105d3e4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d3e660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d3e7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d3ea80"/>
        <function-ref name="clr" scoped="" ref="0x105d3ec10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x105d52020" loc="64:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x105d52020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d524a0"/>
        <function-ref name="isInput" scoped="" ref="0x105d52630"/>
        <function-ref name="setResistor" scoped="" ref="0x105d527c0"/>
        <function-ref name="toggle" scoped="" ref="0x105d52950"/>
        <function-ref name="isOutput" scoped="" ref="0x105d52ae0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d52c70"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d52e00"/>
        <function-ref name="get" scoped="" ref="0x105d51020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d511b0"/>
        <function-ref name="getRaw" scoped="" ref="0x105d51340"/>
        <function-ref name="set" scoped="" ref="0x105d514d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d51660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d517f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d51a80"/>
        <function-ref name="clr" scoped="" ref="0x105d51c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port36" ref="0x105d65020" loc="77:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port36" scoped="" ref="0x105d65020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d653a0"/>
        <function-ref name="isInput" scoped="" ref="0x105d65530"/>
        <function-ref name="setResistor" scoped="" ref="0x105d656c0"/>
        <function-ref name="toggle" scoped="" ref="0x105d65850"/>
        <function-ref name="isOutput" scoped="" ref="0x105d659e0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d65b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d65d00"/>
        <function-ref name="get" scoped="" ref="0x105d64020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d641b0"/>
        <function-ref name="getRaw" scoped="" ref="0x105d64340"/>
        <function-ref name="set" scoped="" ref="0x105d644d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d64660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d647f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d64a80"/>
        <function-ref name="clr" scoped="" ref="0x105d64c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO0" ref="0x105d7e580" loc="144:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO0" scoped="" ref="0x105d7e580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d7e900"/>
        <function-ref name="isInput" scoped="" ref="0x105d7ea90"/>
        <function-ref name="setResistor" scoped="" ref="0x105d7ec20"/>
        <function-ref name="toggle" scoped="" ref="0x105d7edb0"/>
        <function-ref name="isOutput" scoped="" ref="0x105d7d020"/>
        <function-ref name="getResistor" scoped="" ref="0x105d7d1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d7d340"/>
        <function-ref name="get" scoped="" ref="0x105d7d4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d7d660"/>
        <function-ref name="getRaw" scoped="" ref="0x105d7d7f0"/>
        <function-ref name="set" scoped="" ref="0x105d7d980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d7db10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d7dca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d7c020"/>
        <function-ref name="clr" scoped="" ref="0x105d7c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC3" ref="0x105dae570" loc="162:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC3" scoped="" ref="0x105dae570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105dae8f0"/>
        <function-ref name="isInput" scoped="" ref="0x105daea80"/>
        <function-ref name="setResistor" scoped="" ref="0x105daec10"/>
        <function-ref name="toggle" scoped="" ref="0x105daeda0"/>
        <function-ref name="isOutput" scoped="" ref="0x105dad020"/>
        <function-ref name="getResistor" scoped="" ref="0x105dad1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105dad340"/>
        <function-ref name="get" scoped="" ref="0x105dad4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105dad660"/>
        <function-ref name="getRaw" scoped="" ref="0x105dad7f0"/>
        <function-ref name="set" scoped="" ref="0x105dad980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105dadb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105dadca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105dac020"/>
        <function-ref name="clr" scoped="" ref="0x105dac1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC1" ref="0x105dca570" loc="169:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC1" scoped="" ref="0x105dca570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105dca8f0"/>
        <function-ref name="isInput" scoped="" ref="0x105dcaa80"/>
        <function-ref name="setResistor" scoped="" ref="0x105dcac10"/>
        <function-ref name="toggle" scoped="" ref="0x105dcada0"/>
        <function-ref name="isOutput" scoped="" ref="0x105dc9020"/>
        <function-ref name="getResistor" scoped="" ref="0x105dc91b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105dc9340"/>
        <function-ref name="get" scoped="" ref="0x105dc94d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105dc9660"/>
        <function-ref name="getRaw" scoped="" ref="0x105dc97f0"/>
        <function-ref name="set" scoped="" ref="0x105dc9980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105dc9b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105dc9ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105dc8020"/>
        <function-ref name="clr" scoped="" ref="0x105dc81b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK1" ref="0x105d92580" loc="155:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK1" scoped="" ref="0x105d92580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d92900"/>
        <function-ref name="isInput" scoped="" ref="0x105d92a90"/>
        <function-ref name="setResistor" scoped="" ref="0x105d92c20"/>
        <function-ref name="toggle" scoped="" ref="0x105d92db0"/>
        <function-ref name="isOutput" scoped="" ref="0x105d91020"/>
        <function-ref name="getResistor" scoped="" ref="0x105d911b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d91340"/>
        <function-ref name="get" scoped="" ref="0x105d914d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d91660"/>
        <function-ref name="getRaw" scoped="" ref="0x105d917f0"/>
        <function-ref name="set" scoped="" ref="0x105d91980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d91b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d91ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d90020"/>
        <function-ref name="clr" scoped="" ref="0x105d901b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port40" ref="0x105d61020" loc="82:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port40" scoped="" ref="0x105d61020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d615a0"/>
        <function-ref name="isInput" scoped="" ref="0x105d61730"/>
        <function-ref name="setResistor" scoped="" ref="0x105d618c0"/>
        <function-ref name="toggle" scoped="" ref="0x105d61a50"/>
        <function-ref name="isOutput" scoped="" ref="0x105d61be0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d61d70"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d60020"/>
        <function-ref name="get" scoped="" ref="0x105d601b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d60340"/>
        <function-ref name="getRaw" scoped="" ref="0x105d604d0"/>
        <function-ref name="set" scoped="" ref="0x105d60660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d607f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d60980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d60c10"/>
        <function-ref name="clr" scoped="" ref="0x105d60da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port52" ref="0x105d75200" loc="95:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port52" scoped="" ref="0x105d75200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d75580"/>
        <function-ref name="isInput" scoped="" ref="0x105d75710"/>
        <function-ref name="setResistor" scoped="" ref="0x105d758a0"/>
        <function-ref name="toggle" scoped="" ref="0x105d75a30"/>
        <function-ref name="isOutput" scoped="" ref="0x105d75bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d75d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d74020"/>
        <function-ref name="get" scoped="" ref="0x105d741b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d74340"/>
        <function-ref name="getRaw" scoped="" ref="0x105d744d0"/>
        <function-ref name="set" scoped="" ref="0x105d74660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d747f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d74980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d74c10"/>
        <function-ref name="clr" scoped="" ref="0x105d74da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port62" ref="0x105d8d200" loc="106:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port62" scoped="" ref="0x105d8d200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d8d580"/>
        <function-ref name="isInput" scoped="" ref="0x105d8d710"/>
        <function-ref name="setResistor" scoped="" ref="0x105d8d8a0"/>
        <function-ref name="toggle" scoped="" ref="0x105d8da30"/>
        <function-ref name="isOutput" scoped="" ref="0x105d8dbc0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d8dd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d8c020"/>
        <function-ref name="get" scoped="" ref="0x105d8c1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d8c340"/>
        <function-ref name="getRaw" scoped="" ref="0x105d8c4d0"/>
        <function-ref name="set" scoped="" ref="0x105d8c660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d8c7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d8c980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d8cc10"/>
        <function-ref name="clr" scoped="" ref="0x105d8cda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC4" ref="0x105dac570" loc="163:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC4" scoped="" ref="0x105dac570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105dac8f0"/>
        <function-ref name="isInput" scoped="" ref="0x105daca80"/>
        <function-ref name="setResistor" scoped="" ref="0x105dacc10"/>
        <function-ref name="toggle" scoped="" ref="0x105dacda0"/>
        <function-ref name="isOutput" scoped="" ref="0x105dab020"/>
        <function-ref name="getResistor" scoped="" ref="0x105dab1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105dab340"/>
        <function-ref name="get" scoped="" ref="0x105dab4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105dab660"/>
        <function-ref name="getRaw" scoped="" ref="0x105dab7f0"/>
        <function-ref name="set" scoped="" ref="0x105dab980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105dabb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105dabca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105daa020"/>
        <function-ref name="clr" scoped="" ref="0x105daa1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE1" ref="0x105d98570" loc="152:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE1" scoped="" ref="0x105d98570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d988f0"/>
        <function-ref name="isInput" scoped="" ref="0x105d98a80"/>
        <function-ref name="setResistor" scoped="" ref="0x105d98c10"/>
        <function-ref name="toggle" scoped="" ref="0x105d98da0"/>
        <function-ref name="isOutput" scoped="" ref="0x105d97020"/>
        <function-ref name="getResistor" scoped="" ref="0x105d971b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d97340"/>
        <function-ref name="get" scoped="" ref="0x105d974d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d97660"/>
        <function-ref name="getRaw" scoped="" ref="0x105d977f0"/>
        <function-ref name="set" scoped="" ref="0x105d97980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d97b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d97ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d96020"/>
        <function-ref name="clr" scoped="" ref="0x105d961b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x105d39020" loc="54:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x105d39020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d393a0"/>
        <function-ref name="isInput" scoped="" ref="0x105d39530"/>
        <function-ref name="setResistor" scoped="" ref="0x105d396c0"/>
        <function-ref name="toggle" scoped="" ref="0x105d39850"/>
        <function-ref name="isOutput" scoped="" ref="0x105d399e0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d39b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d39d00"/>
        <function-ref name="get" scoped="" ref="0x105d38020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d381b0"/>
        <function-ref name="getRaw" scoped="" ref="0x105d38340"/>
        <function-ref name="set" scoped="" ref="0x105d384d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d38660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d387f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d38a80"/>
        <function-ref name="clr" scoped="" ref="0x105d38c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x105d4c020" loc="67:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x105d4c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d4c3a0"/>
        <function-ref name="isInput" scoped="" ref="0x105d4c530"/>
        <function-ref name="setResistor" scoped="" ref="0x105d4c6c0"/>
        <function-ref name="toggle" scoped="" ref="0x105d4c850"/>
        <function-ref name="isOutput" scoped="" ref="0x105d4c9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d4cb70"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d4cd00"/>
        <function-ref name="get" scoped="" ref="0x105d4b020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d4b1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x105d4b340"/>
        <function-ref name="set" scoped="" ref="0x105d4b4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d4b660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d4b7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d4ba80"/>
        <function-ref name="clr" scoped="" ref="0x105d4bc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port60" ref="0x105d69200" loc="104:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port60" scoped="" ref="0x105d69200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d69580"/>
        <function-ref name="isInput" scoped="" ref="0x105d69710"/>
        <function-ref name="setResistor" scoped="" ref="0x105d698a0"/>
        <function-ref name="toggle" scoped="" ref="0x105d69a30"/>
        <function-ref name="isOutput" scoped="" ref="0x105d69bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d69d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d68020"/>
        <function-ref name="get" scoped="" ref="0x105d681b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d68340"/>
        <function-ref name="getRaw" scoped="" ref="0x105d684d0"/>
        <function-ref name="set" scoped="" ref="0x105d68660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d687f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d68980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d68c10"/>
        <function-ref name="clr" scoped="" ref="0x105d68da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port31" ref="0x105d48020" loc="72:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port31" scoped="" ref="0x105d48020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d483a0"/>
        <function-ref name="isInput" scoped="" ref="0x105d48530"/>
        <function-ref name="setResistor" scoped="" ref="0x105d486c0"/>
        <function-ref name="toggle" scoped="" ref="0x105d48850"/>
        <function-ref name="isOutput" scoped="" ref="0x105d489e0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d48b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d48d00"/>
        <function-ref name="get" scoped="" ref="0x105d47020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d471b0"/>
        <function-ref name="getRaw" scoped="" ref="0x105d47340"/>
        <function-ref name="set" scoped="" ref="0x105d474d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d47660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d477f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d47a80"/>
        <function-ref name="clr" scoped="" ref="0x105d47c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port43" ref="0x105d5b200" loc="85:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port43" scoped="" ref="0x105d5b200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d5b580"/>
        <function-ref name="isInput" scoped="" ref="0x105d5b710"/>
        <function-ref name="setResistor" scoped="" ref="0x105d5b8a0"/>
        <function-ref name="toggle" scoped="" ref="0x105d5ba30"/>
        <function-ref name="isOutput" scoped="" ref="0x105d5bbc0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d5bd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d5a020"/>
        <function-ref name="get" scoped="" ref="0x105d5a1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d5a340"/>
        <function-ref name="getRaw" scoped="" ref="0x105d5a4d0"/>
        <function-ref name="set" scoped="" ref="0x105d5a660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d5a7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d5a980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d5ac10"/>
        <function-ref name="clr" scoped="" ref="0x105d5ada0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port55" ref="0x105d6f200" loc="98:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port55" scoped="" ref="0x105d6f200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d6f580"/>
        <function-ref name="isInput" scoped="" ref="0x105d6f710"/>
        <function-ref name="setResistor" scoped="" ref="0x105d6f8a0"/>
        <function-ref name="toggle" scoped="" ref="0x105d6fa30"/>
        <function-ref name="isOutput" scoped="" ref="0x105d6fbc0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d6fd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d6e020"/>
        <function-ref name="get" scoped="" ref="0x105d6e1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d6e340"/>
        <function-ref name="getRaw" scoped="" ref="0x105d6e4d0"/>
        <function-ref name="set" scoped="" ref="0x105d6e660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d6e7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d6e980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d6ec10"/>
        <function-ref name="clr" scoped="" ref="0x105d6eda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port65" ref="0x105d86200" loc="109:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port65" scoped="" ref="0x105d86200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d86580"/>
        <function-ref name="isInput" scoped="" ref="0x105d86710"/>
        <function-ref name="setResistor" scoped="" ref="0x105d868a0"/>
        <function-ref name="toggle" scoped="" ref="0x105d86a30"/>
        <function-ref name="isOutput" scoped="" ref="0x105d86bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d86d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d85020"/>
        <function-ref name="get" scoped="" ref="0x105d851b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d85340"/>
        <function-ref name="getRaw" scoped="" ref="0x105d854d0"/>
        <function-ref name="set" scoped="" ref="0x105d85660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d857f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d85980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d85c10"/>
        <function-ref name="clr" scoped="" ref="0x105d85da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI1" ref="0x105d94580" loc="154:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI1" scoped="" ref="0x105d94580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d94900"/>
        <function-ref name="isInput" scoped="" ref="0x105d94a90"/>
        <function-ref name="setResistor" scoped="" ref="0x105d94c20"/>
        <function-ref name="toggle" scoped="" ref="0x105d94db0"/>
        <function-ref name="isOutput" scoped="" ref="0x105d93020"/>
        <function-ref name="getResistor" scoped="" ref="0x105d931b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d93340"/>
        <function-ref name="get" scoped="" ref="0x105d934d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d93660"/>
        <function-ref name="getRaw" scoped="" ref="0x105d937f0"/>
        <function-ref name="set" scoped="" ref="0x105d93980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d93b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d93ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d92020"/>
        <function-ref name="clr" scoped="" ref="0x105d921b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x105d26020" loc="49:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x105d26020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d263a0"/>
        <function-ref name="isInput" scoped="" ref="0x105d26530"/>
        <function-ref name="setResistor" scoped="" ref="0x105d266c0"/>
        <function-ref name="toggle" scoped="" ref="0x105d26850"/>
        <function-ref name="isOutput" scoped="" ref="0x105d269e0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d26b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d26d00"/>
        <function-ref name="get" scoped="" ref="0x105d25020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d251b0"/>
        <function-ref name="getRaw" scoped="" ref="0x105d25340"/>
        <function-ref name="set" scoped="" ref="0x105d254d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d25660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d257f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d25a80"/>
        <function-ref name="clr" scoped="" ref="0x105d25c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x105d2f020" loc="62:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x105d2f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d2f3a0"/>
        <function-ref name="isInput" scoped="" ref="0x105d2f530"/>
        <function-ref name="setResistor" scoped="" ref="0x105d2f6c0"/>
        <function-ref name="toggle" scoped="" ref="0x105d2f850"/>
        <function-ref name="isOutput" scoped="" ref="0x105d2f9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d2fb70"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d2fd00"/>
        <function-ref name="get" scoped="" ref="0x105d2e020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d2e1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x105d2e340"/>
        <function-ref name="set" scoped="" ref="0x105d2e4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d2e660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d2e7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d2ea80"/>
        <function-ref name="clr" scoped="" ref="0x105d2ec10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port34" ref="0x105d42020" loc="75:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port34" scoped="" ref="0x105d42020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d423a0"/>
        <function-ref name="isInput" scoped="" ref="0x105d42530"/>
        <function-ref name="setResistor" scoped="" ref="0x105d426c0"/>
        <function-ref name="toggle" scoped="" ref="0x105d42850"/>
        <function-ref name="isOutput" scoped="" ref="0x105d429e0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d42b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d42d00"/>
        <function-ref name="get" scoped="" ref="0x105d41020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d411b0"/>
        <function-ref name="getRaw" scoped="" ref="0x105d41340"/>
        <function-ref name="set" scoped="" ref="0x105d414d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d41660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d417f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d41a80"/>
        <function-ref name="clr" scoped="" ref="0x105d41c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port46" ref="0x105d55200" loc="88:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port46" scoped="" ref="0x105d55200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d55580"/>
        <function-ref name="isInput" scoped="" ref="0x105d55710"/>
        <function-ref name="setResistor" scoped="" ref="0x105d558a0"/>
        <function-ref name="toggle" scoped="" ref="0x105d55a30"/>
        <function-ref name="isOutput" scoped="" ref="0x105d55bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d55d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d54020"/>
        <function-ref name="get" scoped="" ref="0x105d541b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d54340"/>
        <function-ref name="getRaw" scoped="" ref="0x105d544d0"/>
        <function-ref name="set" scoped="" ref="0x105d54660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d547f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d54980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d54c10"/>
        <function-ref name="clr" scoped="" ref="0x105d54da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD1" ref="0x105d90580" loc="156:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD1" scoped="" ref="0x105d90580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d90900"/>
        <function-ref name="isInput" scoped="" ref="0x105d90a90"/>
        <function-ref name="setResistor" scoped="" ref="0x105d90c20"/>
        <function-ref name="toggle" scoped="" ref="0x105d90db0"/>
        <function-ref name="isOutput" scoped="" ref="0x105d8f020"/>
        <function-ref name="getResistor" scoped="" ref="0x105d8f1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d8f340"/>
        <function-ref name="get" scoped="" ref="0x105d8f4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d8f660"/>
        <function-ref name="getRaw" scoped="" ref="0x105d8f7f0"/>
        <function-ref name="set" scoped="" ref="0x105d8f980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d8fb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d8fca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105db6020"/>
        <function-ref name="clr" scoped="" ref="0x105db61b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC1" ref="0x105db2570" loc="160:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC1" scoped="" ref="0x105db2570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105db28f0"/>
        <function-ref name="isInput" scoped="" ref="0x105db2a80"/>
        <function-ref name="setResistor" scoped="" ref="0x105db2c10"/>
        <function-ref name="toggle" scoped="" ref="0x105db2da0"/>
        <function-ref name="isOutput" scoped="" ref="0x105db1020"/>
        <function-ref name="getResistor" scoped="" ref="0x105db11b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105db1340"/>
        <function-ref name="get" scoped="" ref="0x105db14d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105db1660"/>
        <function-ref name="getRaw" scoped="" ref="0x105db17f0"/>
        <function-ref name="set" scoped="" ref="0x105db1980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105db1b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105db1ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105db0020"/>
        <function-ref name="clr" scoped="" ref="0x105db01b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC7" ref="0x105da5570" loc="166:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC7" scoped="" ref="0x105da5570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105da58f0"/>
        <function-ref name="isInput" scoped="" ref="0x105da5a80"/>
        <function-ref name="setResistor" scoped="" ref="0x105da5c10"/>
        <function-ref name="toggle" scoped="" ref="0x105da5da0"/>
        <function-ref name="isOutput" scoped="" ref="0x105da4020"/>
        <function-ref name="getResistor" scoped="" ref="0x105da41b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105da4340"/>
        <function-ref name="get" scoped="" ref="0x105da44d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105da4660"/>
        <function-ref name="getRaw" scoped="" ref="0x105da47f0"/>
        <function-ref name="set" scoped="" ref="0x105da4980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105da4b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105da4ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105da3020"/>
        <function-ref name="clr" scoped="" ref="0x105da31b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port50" ref="0x105d79200" loc="93:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port50" scoped="" ref="0x105d79200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d79580"/>
        <function-ref name="isInput" scoped="" ref="0x105d79710"/>
        <function-ref name="setResistor" scoped="" ref="0x105d798a0"/>
        <function-ref name="toggle" scoped="" ref="0x105d79a30"/>
        <function-ref name="isOutput" scoped="" ref="0x105d79bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d79d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d78020"/>
        <function-ref name="get" scoped="" ref="0x105d781b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d78340"/>
        <function-ref name="getRaw" scoped="" ref="0x105d784d0"/>
        <function-ref name="set" scoped="" ref="0x105d78660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d787f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d78980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d78c10"/>
        <function-ref name="clr" scoped="" ref="0x105d78da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD1" ref="0x105db6580" loc="157:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD1" scoped="" ref="0x105db6580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105db6900"/>
        <function-ref name="isInput" scoped="" ref="0x105db6a90"/>
        <function-ref name="setResistor" scoped="" ref="0x105db6c20"/>
        <function-ref name="toggle" scoped="" ref="0x105db6db0"/>
        <function-ref name="isOutput" scoped="" ref="0x105db5020"/>
        <function-ref name="getResistor" scoped="" ref="0x105db51b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105db5340"/>
        <function-ref name="get" scoped="" ref="0x105db54d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105db5660"/>
        <function-ref name="getRaw" scoped="" ref="0x105db57f0"/>
        <function-ref name="set" scoped="" ref="0x105db5980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105db5b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105db5ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105db4020"/>
        <function-ref name="clr" scoped="" ref="0x105db41b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x105d3d020" loc="52:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x105d3d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d3d3a0"/>
        <function-ref name="isInput" scoped="" ref="0x105d3d530"/>
        <function-ref name="setResistor" scoped="" ref="0x105d3d6c0"/>
        <function-ref name="toggle" scoped="" ref="0x105d3d850"/>
        <function-ref name="isOutput" scoped="" ref="0x105d3d9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d3db70"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d3dd00"/>
        <function-ref name="get" scoped="" ref="0x105d3c020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d3c1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x105d3c340"/>
        <function-ref name="set" scoped="" ref="0x105d3c4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d3c660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d3c7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d3ca80"/>
        <function-ref name="clr" scoped="" ref="0x105d3cc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x105d50020" loc="65:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x105d50020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d503a0"/>
        <function-ref name="isInput" scoped="" ref="0x105d50530"/>
        <function-ref name="setResistor" scoped="" ref="0x105d506c0"/>
        <function-ref name="toggle" scoped="" ref="0x105d50850"/>
        <function-ref name="isOutput" scoped="" ref="0x105d509e0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d50b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d50d00"/>
        <function-ref name="get" scoped="" ref="0x105d4f020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d4f1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x105d4f340"/>
        <function-ref name="set" scoped="" ref="0x105d4f4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d4f660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d4f7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d4fa80"/>
        <function-ref name="clr" scoped="" ref="0x105d4fc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port37" ref="0x105d63020" loc="78:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port37" scoped="" ref="0x105d63020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d633a0"/>
        <function-ref name="isInput" scoped="" ref="0x105d63530"/>
        <function-ref name="setResistor" scoped="" ref="0x105d636c0"/>
        <function-ref name="toggle" scoped="" ref="0x105d63850"/>
        <function-ref name="isOutput" scoped="" ref="0x105d639e0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d63b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d63d00"/>
        <function-ref name="get" scoped="" ref="0x105d62020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d621b0"/>
        <function-ref name="getRaw" scoped="" ref="0x105d62340"/>
        <function-ref name="set" scoped="" ref="0x105d624d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d62660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d627f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d62a80"/>
        <function-ref name="clr" scoped="" ref="0x105d62c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO1" ref="0x105d96580" loc="153:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO1" scoped="" ref="0x105d96580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d96900"/>
        <function-ref name="isInput" scoped="" ref="0x105d96a90"/>
        <function-ref name="setResistor" scoped="" ref="0x105d96c20"/>
        <function-ref name="toggle" scoped="" ref="0x105d96db0"/>
        <function-ref name="isOutput" scoped="" ref="0x105d95020"/>
        <function-ref name="getResistor" scoped="" ref="0x105d951b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d95340"/>
        <function-ref name="get" scoped="" ref="0x105d954d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d95660"/>
        <function-ref name="getRaw" scoped="" ref="0x105d957f0"/>
        <function-ref name="set" scoped="" ref="0x105d95980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d95b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d95ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d94020"/>
        <function-ref name="clr" scoped="" ref="0x105d941b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC5" ref="0x105daa570" loc="164:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC5" scoped="" ref="0x105daa570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105daa8f0"/>
        <function-ref name="isInput" scoped="" ref="0x105daaa80"/>
        <function-ref name="setResistor" scoped="" ref="0x105daac10"/>
        <function-ref name="toggle" scoped="" ref="0x105daada0"/>
        <function-ref name="isOutput" scoped="" ref="0x105da9020"/>
        <function-ref name="getResistor" scoped="" ref="0x105da91b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105da9340"/>
        <function-ref name="get" scoped="" ref="0x105da94d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105da9660"/>
        <function-ref name="getRaw" scoped="" ref="0x105da97f0"/>
        <function-ref name="set" scoped="" ref="0x105da9980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105da9b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105da9ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105da8020"/>
        <function-ref name="clr" scoped="" ref="0x105da81b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port41" ref="0x105d5f200" loc="83:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port41" scoped="" ref="0x105d5f200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d5f580"/>
        <function-ref name="isInput" scoped="" ref="0x105d5f710"/>
        <function-ref name="setResistor" scoped="" ref="0x105d5f8a0"/>
        <function-ref name="toggle" scoped="" ref="0x105d5fa30"/>
        <function-ref name="isOutput" scoped="" ref="0x105d5fbc0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d5fd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d5e020"/>
        <function-ref name="get" scoped="" ref="0x105d5e1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d5e340"/>
        <function-ref name="getRaw" scoped="" ref="0x105d5e4d0"/>
        <function-ref name="set" scoped="" ref="0x105d5e660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d5e7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d5e980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d5ec10"/>
        <function-ref name="clr" scoped="" ref="0x105d5eda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port53" ref="0x105d73200" loc="96:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port53" scoped="" ref="0x105d73200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d73580"/>
        <function-ref name="isInput" scoped="" ref="0x105d73710"/>
        <function-ref name="setResistor" scoped="" ref="0x105d738a0"/>
        <function-ref name="toggle" scoped="" ref="0x105d73a30"/>
        <function-ref name="isOutput" scoped="" ref="0x105d73bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d73d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d72020"/>
        <function-ref name="get" scoped="" ref="0x105d721b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d72340"/>
        <function-ref name="getRaw" scoped="" ref="0x105d724d0"/>
        <function-ref name="set" scoped="" ref="0x105d72660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d727f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d72980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d72c10"/>
        <function-ref name="clr" scoped="" ref="0x105d72da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port63" ref="0x105d8b200" loc="107:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port63" scoped="" ref="0x105d8b200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d8b580"/>
        <function-ref name="isInput" scoped="" ref="0x105d8b710"/>
        <function-ref name="setResistor" scoped="" ref="0x105d8b8a0"/>
        <function-ref name="toggle" scoped="" ref="0x105d8ba30"/>
        <function-ref name="isOutput" scoped="" ref="0x105d8bbc0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d8bd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d8a020"/>
        <function-ref name="get" scoped="" ref="0x105d8a1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d8a340"/>
        <function-ref name="getRaw" scoped="" ref="0x105d8a4d0"/>
        <function-ref name="set" scoped="" ref="0x105d8a660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d8a7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d8a980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d8ac10"/>
        <function-ref name="clr" scoped="" ref="0x105d8ada0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x105d37020" loc="55:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x105d37020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d373a0"/>
        <function-ref name="isInput" scoped="" ref="0x105d37530"/>
        <function-ref name="setResistor" scoped="" ref="0x105d376c0"/>
        <function-ref name="toggle" scoped="" ref="0x105d37850"/>
        <function-ref name="isOutput" scoped="" ref="0x105d379e0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d37b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d37d00"/>
        <function-ref name="get" scoped="" ref="0x105d36020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d361b0"/>
        <function-ref name="getRaw" scoped="" ref="0x105d36340"/>
        <function-ref name="set" scoped="" ref="0x105d364d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d36660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d367f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d36a80"/>
        <function-ref name="clr" scoped="" ref="0x105d36c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port61" ref="0x105d67200" loc="105:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port61" scoped="" ref="0x105d67200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d67580"/>
        <function-ref name="isInput" scoped="" ref="0x105d67710"/>
        <function-ref name="setResistor" scoped="" ref="0x105d678a0"/>
        <function-ref name="toggle" scoped="" ref="0x105d67a30"/>
        <function-ref name="isOutput" scoped="" ref="0x105d67bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d67d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d8e020"/>
        <function-ref name="get" scoped="" ref="0x105d8e1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d8e340"/>
        <function-ref name="getRaw" scoped="" ref="0x105d8e4d0"/>
        <function-ref name="set" scoped="" ref="0x105d8e660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d8e7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d8e980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d8ec10"/>
        <function-ref name="clr" scoped="" ref="0x105d8eda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x105d33020" loc="60:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x105d33020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d333a0"/>
        <function-ref name="isInput" scoped="" ref="0x105d33530"/>
        <function-ref name="setResistor" scoped="" ref="0x105d336c0"/>
        <function-ref name="toggle" scoped="" ref="0x105d33850"/>
        <function-ref name="isOutput" scoped="" ref="0x105d339e0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d33b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d33d00"/>
        <function-ref name="get" scoped="" ref="0x105d32020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d321b0"/>
        <function-ref name="getRaw" scoped="" ref="0x105d32340"/>
        <function-ref name="set" scoped="" ref="0x105d324d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d32660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d327f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d32a80"/>
        <function-ref name="clr" scoped="" ref="0x105d32c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port32" ref="0x105d46020" loc="73:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port32" scoped="" ref="0x105d46020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d463a0"/>
        <function-ref name="isInput" scoped="" ref="0x105d46530"/>
        <function-ref name="setResistor" scoped="" ref="0x105d466c0"/>
        <function-ref name="toggle" scoped="" ref="0x105d46850"/>
        <function-ref name="isOutput" scoped="" ref="0x105d469e0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d46b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d46d00"/>
        <function-ref name="get" scoped="" ref="0x105d45020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d451b0"/>
        <function-ref name="getRaw" scoped="" ref="0x105d45340"/>
        <function-ref name="set" scoped="" ref="0x105d454d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d45660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d457f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d45a80"/>
        <function-ref name="clr" scoped="" ref="0x105d45c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port44" ref="0x105d59200" loc="86:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port44" scoped="" ref="0x105d59200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d59580"/>
        <function-ref name="isInput" scoped="" ref="0x105d59710"/>
        <function-ref name="setResistor" scoped="" ref="0x105d598a0"/>
        <function-ref name="toggle" scoped="" ref="0x105d59a30"/>
        <function-ref name="isOutput" scoped="" ref="0x105d59bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d59d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d58020"/>
        <function-ref name="get" scoped="" ref="0x105d581b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d58340"/>
        <function-ref name="getRaw" scoped="" ref="0x105d584d0"/>
        <function-ref name="set" scoped="" ref="0x105d58660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d587f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d58980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d58c10"/>
        <function-ref name="clr" scoped="" ref="0x105d58da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port56" ref="0x105d6d200" loc="99:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port56" scoped="" ref="0x105d6d200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d6d580"/>
        <function-ref name="isInput" scoped="" ref="0x105d6d710"/>
        <function-ref name="setResistor" scoped="" ref="0x105d6d8a0"/>
        <function-ref name="toggle" scoped="" ref="0x105d6da30"/>
        <function-ref name="isOutput" scoped="" ref="0x105d6dbc0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d6dd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d6c020"/>
        <function-ref name="get" scoped="" ref="0x105d6c1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d6c340"/>
        <function-ref name="getRaw" scoped="" ref="0x105d6c4d0"/>
        <function-ref name="set" scoped="" ref="0x105d6c660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d6c7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d6c980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d6cc10"/>
        <function-ref name="clr" scoped="" ref="0x105d6cda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port66" ref="0x105d84200" loc="110:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port66" scoped="" ref="0x105d84200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d84580"/>
        <function-ref name="isInput" scoped="" ref="0x105d84710"/>
        <function-ref name="setResistor" scoped="" ref="0x105d848a0"/>
        <function-ref name="toggle" scoped="" ref="0x105d84a30"/>
        <function-ref name="isOutput" scoped="" ref="0x105d84bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d84d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d83020"/>
        <function-ref name="get" scoped="" ref="0x105d831b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d83340"/>
        <function-ref name="getRaw" scoped="" ref="0x105d834d0"/>
        <function-ref name="set" scoped="" ref="0x105d83660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d837f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d83980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d83c10"/>
        <function-ref name="clr" scoped="" ref="0x105d83da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x105d1b020" loc="50:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x105d1b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d1b3a0"/>
        <function-ref name="isInput" scoped="" ref="0x105d1b530"/>
        <function-ref name="setResistor" scoped="" ref="0x105d1b6c0"/>
        <function-ref name="toggle" scoped="" ref="0x105d1b850"/>
        <function-ref name="isOutput" scoped="" ref="0x105d1b9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d1bb70"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d1bd00"/>
        <function-ref name="get" scoped="" ref="0x105d1a020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d1a1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x105d1a340"/>
        <function-ref name="set" scoped="" ref="0x105d1a4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d1a660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d1a7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d1aa80"/>
        <function-ref name="clr" scoped="" ref="0x105d1ac10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x105d2d020" loc="63:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x105d2d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d2d3a0"/>
        <function-ref name="isInput" scoped="" ref="0x105d2d530"/>
        <function-ref name="setResistor" scoped="" ref="0x105d2d6c0"/>
        <function-ref name="toggle" scoped="" ref="0x105d2d850"/>
        <function-ref name="isOutput" scoped="" ref="0x105d2d9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d2db70"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d2dd00"/>
        <function-ref name="get" scoped="" ref="0x105d2c020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d2c1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x105d2c340"/>
        <function-ref name="set" scoped="" ref="0x105d2c4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d2c660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d2c7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d2ca80"/>
        <function-ref name="clr" scoped="" ref="0x105d2cc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port35" ref="0x105d40020" loc="76:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port35" scoped="" ref="0x105d40020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d403a0"/>
        <function-ref name="isInput" scoped="" ref="0x105d40530"/>
        <function-ref name="setResistor" scoped="" ref="0x105d406c0"/>
        <function-ref name="toggle" scoped="" ref="0x105d40850"/>
        <function-ref name="isOutput" scoped="" ref="0x105d409e0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d40b70"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d40d00"/>
        <function-ref name="get" scoped="" ref="0x105d3f020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d3f1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x105d3f340"/>
        <function-ref name="set" scoped="" ref="0x105d3f4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d3f660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d3f7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d3fa80"/>
        <function-ref name="clr" scoped="" ref="0x105d3fc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port47" ref="0x105d53200" loc="89:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port47" scoped="" ref="0x105d53200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d53580"/>
        <function-ref name="isInput" scoped="" ref="0x105d53710"/>
        <function-ref name="setResistor" scoped="" ref="0x105d538a0"/>
        <function-ref name="toggle" scoped="" ref="0x105d53a30"/>
        <function-ref name="isOutput" scoped="" ref="0x105d53bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d53d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d7a020"/>
        <function-ref name="get" scoped="" ref="0x105d7a1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d7a340"/>
        <function-ref name="getRaw" scoped="" ref="0x105d7a4d0"/>
        <function-ref name="set" scoped="" ref="0x105d7a660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d7a7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d7a980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d7ac10"/>
        <function-ref name="clr" scoped="" ref="0x105d7ada0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SCL" ref="0x105d9e560" loc="148:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SCL" scoped="" ref="0x105d9e560"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d9e8e0"/>
        <function-ref name="isInput" scoped="" ref="0x105d9ea70"/>
        <function-ref name="setResistor" scoped="" ref="0x105d9ec00"/>
        <function-ref name="toggle" scoped="" ref="0x105d9ed90"/>
        <function-ref name="isOutput" scoped="" ref="0x105d9d020"/>
        <function-ref name="getResistor" scoped="" ref="0x105d9d1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d9d340"/>
        <function-ref name="get" scoped="" ref="0x105d9d4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d9d660"/>
        <function-ref name="getRaw" scoped="" ref="0x105d9d7f0"/>
        <function-ref name="set" scoped="" ref="0x105d9d980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d9db10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d9dca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d9c020"/>
        <function-ref name="clr" scoped="" ref="0x105d9c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC2" ref="0x105db0570" loc="161:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC2" scoped="" ref="0x105db0570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105db08f0"/>
        <function-ref name="isInput" scoped="" ref="0x105db0a80"/>
        <function-ref name="setResistor" scoped="" ref="0x105db0c10"/>
        <function-ref name="toggle" scoped="" ref="0x105db0da0"/>
        <function-ref name="isOutput" scoped="" ref="0x105daf020"/>
        <function-ref name="getResistor" scoped="" ref="0x105daf1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105daf340"/>
        <function-ref name="get" scoped="" ref="0x105daf4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105daf660"/>
        <function-ref name="getRaw" scoped="" ref="0x105daf7f0"/>
        <function-ref name="set" scoped="" ref="0x105daf980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105dafb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105dafca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105dae020"/>
        <function-ref name="clr" scoped="" ref="0x105dae1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK0" ref="0x105da0580" loc="147:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK0" scoped="" ref="0x105da0580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105da0900"/>
        <function-ref name="isInput" scoped="" ref="0x105da0a90"/>
        <function-ref name="setResistor" scoped="" ref="0x105da0c20"/>
        <function-ref name="toggle" scoped="" ref="0x105da0db0"/>
        <function-ref name="isOutput" scoped="" ref="0x105d9f020"/>
        <function-ref name="getResistor" scoped="" ref="0x105d9f1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d9f340"/>
        <function-ref name="get" scoped="" ref="0x105d9f4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d9f660"/>
        <function-ref name="getRaw" scoped="" ref="0x105d9f7f0"/>
        <function-ref name="set" scoped="" ref="0x105d9f980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d9fb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d9fca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d9e020"/>
        <function-ref name="clr" scoped="" ref="0x105d9e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port51" ref="0x105d77200" loc="94:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port51" scoped="" ref="0x105d77200"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d77580"/>
        <function-ref name="isInput" scoped="" ref="0x105d77710"/>
        <function-ref name="setResistor" scoped="" ref="0x105d778a0"/>
        <function-ref name="toggle" scoped="" ref="0x105d77a30"/>
        <function-ref name="isOutput" scoped="" ref="0x105d77bc0"/>
        <function-ref name="getResistor" scoped="" ref="0x105d77d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d76020"/>
        <function-ref name="get" scoped="" ref="0x105d761b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d76340"/>
        <function-ref name="getRaw" scoped="" ref="0x105d764d0"/>
        <function-ref name="set" scoped="" ref="0x105d76660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d767f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d76980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d76c10"/>
        <function-ref name="clr" scoped="" ref="0x105d76da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC0" ref="0x105da3570" loc="168:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC0" scoped="" ref="0x105da3570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105da38f0"/>
        <function-ref name="isInput" scoped="" ref="0x105da3a80"/>
        <function-ref name="setResistor" scoped="" ref="0x105da3c10"/>
        <function-ref name="toggle" scoped="" ref="0x105da3da0"/>
        <function-ref name="isOutput" scoped="" ref="0x105dcb020"/>
        <function-ref name="getResistor" scoped="" ref="0x105dcb1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105dcb340"/>
        <function-ref name="get" scoped="" ref="0x105dcb4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105dcb660"/>
        <function-ref name="getRaw" scoped="" ref="0x105dcb7f0"/>
        <function-ref name="set" scoped="" ref="0x105dcb980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105dcbb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105dcbca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105dca020"/>
        <function-ref name="clr" scoped="" ref="0x105dca1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSOUT" ref="0x105dc6580" loc="172:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSOUT" scoped="" ref="0x105dc6580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105dc6900"/>
        <function-ref name="isInput" scoped="" ref="0x105dc6a90"/>
        <function-ref name="setResistor" scoped="" ref="0x105dc6c20"/>
        <function-ref name="toggle" scoped="" ref="0x105dc6db0"/>
        <function-ref name="isOutput" scoped="" ref="0x105dc5020"/>
        <function-ref name="getResistor" scoped="" ref="0x105dc51b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105dc5340"/>
        <function-ref name="get" scoped="" ref="0x105dc54d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105dc5660"/>
        <function-ref name="getRaw" scoped="" ref="0x105dc57f0"/>
        <function-ref name="set" scoped="" ref="0x105dc5980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105dc5b10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105dc5ca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105dc4020"/>
        <function-ref name="clr" scoped="" ref="0x105dc41b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE0" ref="0x105d801f0" loc="143:../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE0" scoped="" ref="0x105d801f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105d80970"/>
        <function-ref name="isInput" scoped="" ref="0x105d80b00"/>
        <function-ref name="setResistor" scoped="" ref="0x105d80c90"/>
        <function-ref name="toggle" scoped="" ref="0x105d80e20"/>
        <function-ref name="isOutput" scoped="" ref="0x105d7f020"/>
        <function-ref name="getResistor" scoped="" ref="0x105d7f1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105d7f340"/>
        <function-ref name="get" scoped="" ref="0x105d7f4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105d7f660"/>
        <function-ref name="getRaw" scoped="" ref="0x105d7f7f0"/>
        <function-ref name="set" scoped="" ref="0x105d7f980"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105d7fb10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105d7fca0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105d7e020"/>
        <function-ref name="clr" scoped="" ref="0x105d7e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105def6d0" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P10"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105def6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105defa50"/>
        <function-ref name="isInput" scoped="" ref="0x105defbe0"/>
        <function-ref name="setResistor" scoped="" ref="0x105defd70"/>
        <function-ref name="toggle" scoped="" ref="0x105dee020"/>
        <function-ref name="isOutput" scoped="" ref="0x105dee1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x105dee340"/>
        <function-ref name="makeOutput" scoped="" ref="0x105dee4d0"/>
        <function-ref name="get" scoped="" ref="0x105dee660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105dee7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x105dee980"/>
        <function-ref name="set" scoped="" ref="0x105deeb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105deeca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105deee30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105ded120"/>
        <function-ref name="clr" scoped="" ref="0x105ded2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105dea100" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P11"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105dea100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105dea480"/>
        <function-ref name="isInput" scoped="" ref="0x105dea610"/>
        <function-ref name="setResistor" scoped="" ref="0x105dea7a0"/>
        <function-ref name="toggle" scoped="" ref="0x105dea930"/>
        <function-ref name="isOutput" scoped="" ref="0x105deaac0"/>
        <function-ref name="getResistor" scoped="" ref="0x105deac50"/>
        <function-ref name="makeOutput" scoped="" ref="0x105deade0"/>
        <function-ref name="get" scoped="" ref="0x105de9020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105de91b0"/>
        <function-ref name="getRaw" scoped="" ref="0x105de9340"/>
        <function-ref name="set" scoped="" ref="0x105de94d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105de9660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105de97f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105de9a80"/>
        <function-ref name="clr" scoped="" ref="0x105de9c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105de6d10" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P12"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105de6d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105de50e0"/>
        <function-ref name="isInput" scoped="" ref="0x105de5270"/>
        <function-ref name="setResistor" scoped="" ref="0x105de5400"/>
        <function-ref name="toggle" scoped="" ref="0x105de5590"/>
        <function-ref name="isOutput" scoped="" ref="0x105de5720"/>
        <function-ref name="getResistor" scoped="" ref="0x105de58b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105de5a40"/>
        <function-ref name="get" scoped="" ref="0x105de5bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105de5d60"/>
        <function-ref name="getRaw" scoped="" ref="0x105de4020"/>
        <function-ref name="set" scoped="" ref="0x105de41b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105de4340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105de44d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105de4760"/>
        <function-ref name="clr" scoped="" ref="0x105de48f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105de1740" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P13"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105de1740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105de1ac0"/>
        <function-ref name="isInput" scoped="" ref="0x105de1c50"/>
        <function-ref name="setResistor" scoped="" ref="0x105de1de0"/>
        <function-ref name="toggle" scoped="" ref="0x105e0a020"/>
        <function-ref name="isOutput" scoped="" ref="0x105e0a1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x105e0a340"/>
        <function-ref name="makeOutput" scoped="" ref="0x105e0a4d0"/>
        <function-ref name="get" scoped="" ref="0x105e0a660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105e0a7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x105e0a980"/>
        <function-ref name="set" scoped="" ref="0x105e0ab10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105e0aca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105e0ae30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105e09120"/>
        <function-ref name="clr" scoped="" ref="0x105e092b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105e06100" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P14"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105e06100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105e06480"/>
        <function-ref name="isInput" scoped="" ref="0x105e06610"/>
        <function-ref name="setResistor" scoped="" ref="0x105e067a0"/>
        <function-ref name="toggle" scoped="" ref="0x105e06930"/>
        <function-ref name="isOutput" scoped="" ref="0x105e06ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x105e06c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x105e06de0"/>
        <function-ref name="get" scoped="" ref="0x105e05020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105e051b0"/>
        <function-ref name="getRaw" scoped="" ref="0x105e05340"/>
        <function-ref name="set" scoped="" ref="0x105e054d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105e05660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105e057f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105e05a80"/>
        <function-ref name="clr" scoped="" ref="0x105e05c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105e01d10" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P15"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105e01d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105e000e0"/>
        <function-ref name="isInput" scoped="" ref="0x105e00270"/>
        <function-ref name="setResistor" scoped="" ref="0x105e00400"/>
        <function-ref name="toggle" scoped="" ref="0x105e00590"/>
        <function-ref name="isOutput" scoped="" ref="0x105e00720"/>
        <function-ref name="getResistor" scoped="" ref="0x105e008b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105e00a40"/>
        <function-ref name="get" scoped="" ref="0x105e00bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105e00d60"/>
        <function-ref name="getRaw" scoped="" ref="0x105dff020"/>
        <function-ref name="set" scoped="" ref="0x105dff1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105dff340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105dff4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105dff760"/>
        <function-ref name="clr" scoped="" ref="0x105dff8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105dfc740" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P16"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105dfc740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105dfcac0"/>
        <function-ref name="isInput" scoped="" ref="0x105dfcc50"/>
        <function-ref name="setResistor" scoped="" ref="0x105dfcde0"/>
        <function-ref name="toggle" scoped="" ref="0x105dfb020"/>
        <function-ref name="isOutput" scoped="" ref="0x105dfb1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x105dfb340"/>
        <function-ref name="makeOutput" scoped="" ref="0x105dfb4d0"/>
        <function-ref name="get" scoped="" ref="0x105dfb660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105dfb7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x105dfb980"/>
        <function-ref name="set" scoped="" ref="0x105dfbb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105dfbca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105dfbe30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105dfa120"/>
        <function-ref name="clr" scoped="" ref="0x105dfa2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105df7100" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P17"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105df7100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105df7480"/>
        <function-ref name="isInput" scoped="" ref="0x105df7610"/>
        <function-ref name="setResistor" scoped="" ref="0x105df77a0"/>
        <function-ref name="toggle" scoped="" ref="0x105df7930"/>
        <function-ref name="isOutput" scoped="" ref="0x105df7ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x105df7c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x105df7de0"/>
        <function-ref name="get" scoped="" ref="0x105df6020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105df61b0"/>
        <function-ref name="getRaw" scoped="" ref="0x105df6340"/>
        <function-ref name="set" scoped="" ref="0x105df64d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105df6660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105df67f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105df6a80"/>
        <function-ref name="clr" scoped="" ref="0x105df6c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105e1dd10" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P20"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105e1dd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105e1c0e0"/>
        <function-ref name="isInput" scoped="" ref="0x105e1c270"/>
        <function-ref name="setResistor" scoped="" ref="0x105e1c400"/>
        <function-ref name="toggle" scoped="" ref="0x105e1c590"/>
        <function-ref name="isOutput" scoped="" ref="0x105e1c720"/>
        <function-ref name="getResistor" scoped="" ref="0x105e1c8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105e1ca40"/>
        <function-ref name="get" scoped="" ref="0x105e1cbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105e1cd60"/>
        <function-ref name="getRaw" scoped="" ref="0x105e1b020"/>
        <function-ref name="set" scoped="" ref="0x105e1b1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105e1b340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105e1b4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105e1b760"/>
        <function-ref name="clr" scoped="" ref="0x105e1b8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105e18740" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P21"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105e18740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105e18ac0"/>
        <function-ref name="isInput" scoped="" ref="0x105e18c50"/>
        <function-ref name="setResistor" scoped="" ref="0x105e18de0"/>
        <function-ref name="toggle" scoped="" ref="0x105e17020"/>
        <function-ref name="isOutput" scoped="" ref="0x105e171b0"/>
        <function-ref name="getResistor" scoped="" ref="0x105e17340"/>
        <function-ref name="makeOutput" scoped="" ref="0x105e174d0"/>
        <function-ref name="get" scoped="" ref="0x105e17660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105e177f0"/>
        <function-ref name="getRaw" scoped="" ref="0x105e17980"/>
        <function-ref name="set" scoped="" ref="0x105e17b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105e17ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105e17e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105e16120"/>
        <function-ref name="clr" scoped="" ref="0x105e162b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105e13100" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P22"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105e13100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105e13480"/>
        <function-ref name="isInput" scoped="" ref="0x105e13610"/>
        <function-ref name="setResistor" scoped="" ref="0x105e137a0"/>
        <function-ref name="toggle" scoped="" ref="0x105e13930"/>
        <function-ref name="isOutput" scoped="" ref="0x105e13ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x105e13c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x105e13de0"/>
        <function-ref name="get" scoped="" ref="0x105e12020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105e121b0"/>
        <function-ref name="getRaw" scoped="" ref="0x105e12340"/>
        <function-ref name="set" scoped="" ref="0x105e124d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105e12660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105e127f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105e12a80"/>
        <function-ref name="clr" scoped="" ref="0x105e12c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105e0fd10" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P23"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105e0fd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105e0e0e0"/>
        <function-ref name="isInput" scoped="" ref="0x105e0e270"/>
        <function-ref name="setResistor" scoped="" ref="0x105e0e400"/>
        <function-ref name="toggle" scoped="" ref="0x105e0e590"/>
        <function-ref name="isOutput" scoped="" ref="0x105e0e720"/>
        <function-ref name="getResistor" scoped="" ref="0x105e0e8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105e0ea40"/>
        <function-ref name="get" scoped="" ref="0x105e0ebd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105e0ed60"/>
        <function-ref name="getRaw" scoped="" ref="0x105e0d020"/>
        <function-ref name="set" scoped="" ref="0x105e0d1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105e0d340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105e0d4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105e0d760"/>
        <function-ref name="clr" scoped="" ref="0x105e0d8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105e34860" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P24"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105e34860"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105e34be0"/>
        <function-ref name="isInput" scoped="" ref="0x105e34d70"/>
        <function-ref name="setResistor" scoped="" ref="0x105e32020"/>
        <function-ref name="toggle" scoped="" ref="0x105e321b0"/>
        <function-ref name="isOutput" scoped="" ref="0x105e32340"/>
        <function-ref name="getResistor" scoped="" ref="0x105e324d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105e32660"/>
        <function-ref name="get" scoped="" ref="0x105e327f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105e32980"/>
        <function-ref name="getRaw" scoped="" ref="0x105e32b10"/>
        <function-ref name="set" scoped="" ref="0x105e32ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105e32e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105e31020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105e312b0"/>
        <function-ref name="clr" scoped="" ref="0x105e31440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105e2e270" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P25"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105e2e270"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105e2e5f0"/>
        <function-ref name="isInput" scoped="" ref="0x105e2e780"/>
        <function-ref name="setResistor" scoped="" ref="0x105e2e910"/>
        <function-ref name="toggle" scoped="" ref="0x105e2eaa0"/>
        <function-ref name="isOutput" scoped="" ref="0x105e2ec30"/>
        <function-ref name="getResistor" scoped="" ref="0x105e2edc0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105e2d020"/>
        <function-ref name="get" scoped="" ref="0x105e2d1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105e2d340"/>
        <function-ref name="getRaw" scoped="" ref="0x105e2d4d0"/>
        <function-ref name="set" scoped="" ref="0x105e2d660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105e2d7f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105e2d980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105e2dc10"/>
        <function-ref name="clr" scoped="" ref="0x105e2dda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105e2ad10" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P26"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105e2ad10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105e290e0"/>
        <function-ref name="isInput" scoped="" ref="0x105e29270"/>
        <function-ref name="setResistor" scoped="" ref="0x105e29400"/>
        <function-ref name="toggle" scoped="" ref="0x105e29590"/>
        <function-ref name="isOutput" scoped="" ref="0x105e29720"/>
        <function-ref name="getResistor" scoped="" ref="0x105e298b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105e29a40"/>
        <function-ref name="get" scoped="" ref="0x105e29bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105e29d60"/>
        <function-ref name="getRaw" scoped="" ref="0x105e28020"/>
        <function-ref name="set" scoped="" ref="0x105e281b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105e28340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105e284d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105e28760"/>
        <function-ref name="clr" scoped="" ref="0x105e288f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105e25740" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P27"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105e25740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105e25ac0"/>
        <function-ref name="isInput" scoped="" ref="0x105e25c50"/>
        <function-ref name="setResistor" scoped="" ref="0x105e25de0"/>
        <function-ref name="toggle" scoped="" ref="0x105e24020"/>
        <function-ref name="isOutput" scoped="" ref="0x105e241b0"/>
        <function-ref name="getResistor" scoped="" ref="0x105e24340"/>
        <function-ref name="makeOutput" scoped="" ref="0x105e244d0"/>
        <function-ref name="get" scoped="" ref="0x105e24660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105e247f0"/>
        <function-ref name="getRaw" scoped="" ref="0x105e24980"/>
        <function-ref name="set" scoped="" ref="0x105e24b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105e24ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105e24e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105e23120"/>
        <function-ref name="clr" scoped="" ref="0x105e232b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105e20100" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P30"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105e20100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105e20480"/>
        <function-ref name="isInput" scoped="" ref="0x105e20610"/>
        <function-ref name="setResistor" scoped="" ref="0x105e207a0"/>
        <function-ref name="toggle" scoped="" ref="0x105e20930"/>
        <function-ref name="isOutput" scoped="" ref="0x105e20ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x105e20c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x105e20de0"/>
        <function-ref name="get" scoped="" ref="0x105e4a020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105e4a1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x105e4a340"/>
        <function-ref name="set" scoped="" ref="0x105e4a4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105e4a660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105e4a7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105e4aa80"/>
        <function-ref name="clr" scoped="" ref="0x105e4ac10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105e47d10" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P31"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105e47d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105e460e0"/>
        <function-ref name="isInput" scoped="" ref="0x105e46270"/>
        <function-ref name="setResistor" scoped="" ref="0x105e46400"/>
        <function-ref name="toggle" scoped="" ref="0x105e46590"/>
        <function-ref name="isOutput" scoped="" ref="0x105e46720"/>
        <function-ref name="getResistor" scoped="" ref="0x105e468b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105e46a40"/>
        <function-ref name="get" scoped="" ref="0x105e46bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105e46d60"/>
        <function-ref name="getRaw" scoped="" ref="0x105e45020"/>
        <function-ref name="set" scoped="" ref="0x105e451b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105e45340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105e454d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105e45760"/>
        <function-ref name="clr" scoped="" ref="0x105e458f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105e42740" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P32"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105e42740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105e42ac0"/>
        <function-ref name="isInput" scoped="" ref="0x105e42c50"/>
        <function-ref name="setResistor" scoped="" ref="0x105e42de0"/>
        <function-ref name="toggle" scoped="" ref="0x105e41020"/>
        <function-ref name="isOutput" scoped="" ref="0x105e411b0"/>
        <function-ref name="getResistor" scoped="" ref="0x105e41340"/>
        <function-ref name="makeOutput" scoped="" ref="0x105e414d0"/>
        <function-ref name="get" scoped="" ref="0x105e41660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105e417f0"/>
        <function-ref name="getRaw" scoped="" ref="0x105e41980"/>
        <function-ref name="set" scoped="" ref="0x105e41b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105e41ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105e41e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105e40120"/>
        <function-ref name="clr" scoped="" ref="0x105e402b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105e3d100" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P33"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105e3d100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105e3d480"/>
        <function-ref name="isInput" scoped="" ref="0x105e3d610"/>
        <function-ref name="setResistor" scoped="" ref="0x105e3d7a0"/>
        <function-ref name="toggle" scoped="" ref="0x105e3d930"/>
        <function-ref name="isOutput" scoped="" ref="0x105e3dac0"/>
        <function-ref name="getResistor" scoped="" ref="0x105e3dc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x105e3dde0"/>
        <function-ref name="get" scoped="" ref="0x105e3c020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105e3c1b0"/>
        <function-ref name="getRaw" scoped="" ref="0x105e3c340"/>
        <function-ref name="set" scoped="" ref="0x105e3c4d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105e3c660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105e3c7f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105e3ca80"/>
        <function-ref name="clr" scoped="" ref="0x105e3cc10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105e39d10" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P34"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105e39d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105e370e0"/>
        <function-ref name="isInput" scoped="" ref="0x105e37270"/>
        <function-ref name="setResistor" scoped="" ref="0x105e37400"/>
        <function-ref name="toggle" scoped="" ref="0x105e37590"/>
        <function-ref name="isOutput" scoped="" ref="0x105e37720"/>
        <function-ref name="getResistor" scoped="" ref="0x105e378b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105e37a40"/>
        <function-ref name="get" scoped="" ref="0x105e37bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105e37d60"/>
        <function-ref name="getRaw" scoped="" ref="0x105e36020"/>
        <function-ref name="set" scoped="" ref="0x105e361b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105e36340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105e364d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105e36760"/>
        <function-ref name="clr" scoped="" ref="0x105e368f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105e5f740" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P35"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105e5f740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105e5fac0"/>
        <function-ref name="isInput" scoped="" ref="0x105e5fc50"/>
        <function-ref name="setResistor" scoped="" ref="0x105e5fde0"/>
        <function-ref name="toggle" scoped="" ref="0x105e5e020"/>
        <function-ref name="isOutput" scoped="" ref="0x105e5e1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x105e5e340"/>
        <function-ref name="makeOutput" scoped="" ref="0x105e5e4d0"/>
        <function-ref name="get" scoped="" ref="0x105e5e660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105e5e7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x105e5e980"/>
        <function-ref name="set" scoped="" ref="0x105e5eb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105e5eca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105e5ee30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105e5d120"/>
        <function-ref name="clr" scoped="" ref="0x105e5d2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105e5a100" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P36"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105e5a100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105e5a480"/>
        <function-ref name="isInput" scoped="" ref="0x105e5a610"/>
        <function-ref name="setResistor" scoped="" ref="0x105e5a7a0"/>
        <function-ref name="toggle" scoped="" ref="0x105e5a930"/>
        <function-ref name="isOutput" scoped="" ref="0x105e5aac0"/>
        <function-ref name="getResistor" scoped="" ref="0x105e5ac50"/>
        <function-ref name="makeOutput" scoped="" ref="0x105e5ade0"/>
        <function-ref name="get" scoped="" ref="0x105e59020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105e591b0"/>
        <function-ref name="getRaw" scoped="" ref="0x105e59340"/>
        <function-ref name="set" scoped="" ref="0x105e594d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105e59660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105e597f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105e59a80"/>
        <function-ref name="clr" scoped="" ref="0x105e59c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105e56d10" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P37"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105e56d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105e550e0"/>
        <function-ref name="isInput" scoped="" ref="0x105e55270"/>
        <function-ref name="setResistor" scoped="" ref="0x105e55400"/>
        <function-ref name="toggle" scoped="" ref="0x105e55590"/>
        <function-ref name="isOutput" scoped="" ref="0x105e55720"/>
        <function-ref name="getResistor" scoped="" ref="0x105e558b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105e55a40"/>
        <function-ref name="get" scoped="" ref="0x105e55bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105e55d60"/>
        <function-ref name="getRaw" scoped="" ref="0x105e54020"/>
        <function-ref name="set" scoped="" ref="0x105e541b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105e54340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105e544d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105e54760"/>
        <function-ref name="clr" scoped="" ref="0x105e548f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105e51a60" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P40"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105e51a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105e51de0"/>
        <function-ref name="isInput" scoped="" ref="0x105e50020"/>
        <function-ref name="setResistor" scoped="" ref="0x105e501b0"/>
        <function-ref name="toggle" scoped="" ref="0x105e50340"/>
        <function-ref name="isOutput" scoped="" ref="0x105e504d0"/>
        <function-ref name="getResistor" scoped="" ref="0x105e50660"/>
        <function-ref name="makeOutput" scoped="" ref="0x105e507f0"/>
        <function-ref name="get" scoped="" ref="0x105e50980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105e50b10"/>
        <function-ref name="getRaw" scoped="" ref="0x105e50ca0"/>
        <function-ref name="set" scoped="" ref="0x105e50e30"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105e4f020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105e4f1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105e4f440"/>
        <function-ref name="clr" scoped="" ref="0x105e4f5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105e4c460" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P41"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105e4c460"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105e4c7e0"/>
        <function-ref name="isInput" scoped="" ref="0x105e4c970"/>
        <function-ref name="setResistor" scoped="" ref="0x105e4cb00"/>
        <function-ref name="toggle" scoped="" ref="0x105e4cc90"/>
        <function-ref name="isOutput" scoped="" ref="0x105e4ce20"/>
        <function-ref name="getResistor" scoped="" ref="0x105e4b020"/>
        <function-ref name="makeOutput" scoped="" ref="0x105e4b1b0"/>
        <function-ref name="get" scoped="" ref="0x105e4b340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105e4b4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x105e4b660"/>
        <function-ref name="set" scoped="" ref="0x105e4b7f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105e4b980"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105e4bb10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105e4bda0"/>
        <function-ref name="clr" scoped="" ref="0x105e76020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105e74e00" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P42"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105e74e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105e731c0"/>
        <function-ref name="isInput" scoped="" ref="0x105e73350"/>
        <function-ref name="setResistor" scoped="" ref="0x105e734e0"/>
        <function-ref name="toggle" scoped="" ref="0x105e73670"/>
        <function-ref name="isOutput" scoped="" ref="0x105e73800"/>
        <function-ref name="getResistor" scoped="" ref="0x105e73990"/>
        <function-ref name="makeOutput" scoped="" ref="0x105e73b20"/>
        <function-ref name="get" scoped="" ref="0x105e73cb0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105e73e40"/>
        <function-ref name="getRaw" scoped="" ref="0x105e72020"/>
        <function-ref name="set" scoped="" ref="0x105e721b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105e72340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105e724d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105e72760"/>
        <function-ref name="clr" scoped="" ref="0x105e728f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105e6f740" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P43"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105e6f740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105e6fac0"/>
        <function-ref name="isInput" scoped="" ref="0x105e6fc50"/>
        <function-ref name="setResistor" scoped="" ref="0x105e6fde0"/>
        <function-ref name="toggle" scoped="" ref="0x105e6e020"/>
        <function-ref name="isOutput" scoped="" ref="0x105e6e1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x105e6e340"/>
        <function-ref name="makeOutput" scoped="" ref="0x105e6e4d0"/>
        <function-ref name="get" scoped="" ref="0x105e6e660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105e6e7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x105e6e980"/>
        <function-ref name="set" scoped="" ref="0x105e6eb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105e6eca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105e6ee30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105e6d120"/>
        <function-ref name="clr" scoped="" ref="0x105e6d2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105e69100" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P44"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105e69100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105e69480"/>
        <function-ref name="isInput" scoped="" ref="0x105e69610"/>
        <function-ref name="setResistor" scoped="" ref="0x105e697a0"/>
        <function-ref name="toggle" scoped="" ref="0x105e69930"/>
        <function-ref name="isOutput" scoped="" ref="0x105e69ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x105e69c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x105e69de0"/>
        <function-ref name="get" scoped="" ref="0x105e68020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105e681b0"/>
        <function-ref name="getRaw" scoped="" ref="0x105e68340"/>
        <function-ref name="set" scoped="" ref="0x105e684d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105e68660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105e687f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105e68a80"/>
        <function-ref name="clr" scoped="" ref="0x105e68c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105e65d10" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P45"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105e65d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105e640e0"/>
        <function-ref name="isInput" scoped="" ref="0x105e64270"/>
        <function-ref name="setResistor" scoped="" ref="0x105e64400"/>
        <function-ref name="toggle" scoped="" ref="0x105e64590"/>
        <function-ref name="isOutput" scoped="" ref="0x105e64720"/>
        <function-ref name="getResistor" scoped="" ref="0x105e648b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105e64a40"/>
        <function-ref name="get" scoped="" ref="0x105e64bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105e64d60"/>
        <function-ref name="getRaw" scoped="" ref="0x105e63020"/>
        <function-ref name="set" scoped="" ref="0x105e631b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105e63340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105e634d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105e63760"/>
        <function-ref name="clr" scoped="" ref="0x105e638f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105e8c740" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P46"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105e8c740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105e8cac0"/>
        <function-ref name="isInput" scoped="" ref="0x105e8cc50"/>
        <function-ref name="setResistor" scoped="" ref="0x105e8cde0"/>
        <function-ref name="toggle" scoped="" ref="0x105e8b020"/>
        <function-ref name="isOutput" scoped="" ref="0x105e8b1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x105e8b340"/>
        <function-ref name="makeOutput" scoped="" ref="0x105e8b4d0"/>
        <function-ref name="get" scoped="" ref="0x105e8b660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105e8b7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x105e8b980"/>
        <function-ref name="set" scoped="" ref="0x105e8bb10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105e8bca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105e8be30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105e8a120"/>
        <function-ref name="clr" scoped="" ref="0x105e8a2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105e87100" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P47"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105e87100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105e87480"/>
        <function-ref name="isInput" scoped="" ref="0x105e87610"/>
        <function-ref name="setResistor" scoped="" ref="0x105e877a0"/>
        <function-ref name="toggle" scoped="" ref="0x105e87930"/>
        <function-ref name="isOutput" scoped="" ref="0x105e87ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x105e87c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x105e87de0"/>
        <function-ref name="get" scoped="" ref="0x105e86020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105e861b0"/>
        <function-ref name="getRaw" scoped="" ref="0x105e86340"/>
        <function-ref name="set" scoped="" ref="0x105e864d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105e86660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105e867f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105e86a80"/>
        <function-ref name="clr" scoped="" ref="0x105e86c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105e83d10" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P50"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105e83d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105e820e0"/>
        <function-ref name="isInput" scoped="" ref="0x105e82270"/>
        <function-ref name="setResistor" scoped="" ref="0x105e82400"/>
        <function-ref name="toggle" scoped="" ref="0x105e82590"/>
        <function-ref name="isOutput" scoped="" ref="0x105e82720"/>
        <function-ref name="getResistor" scoped="" ref="0x105e828b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105e82a40"/>
        <function-ref name="get" scoped="" ref="0x105e82bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105e82d60"/>
        <function-ref name="getRaw" scoped="" ref="0x105e81020"/>
        <function-ref name="set" scoped="" ref="0x105e811b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105e81340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105e814d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105e81760"/>
        <function-ref name="clr" scoped="" ref="0x105e818f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105e7e740" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P51"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105e7e740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105e7eac0"/>
        <function-ref name="isInput" scoped="" ref="0x105e7ec50"/>
        <function-ref name="setResistor" scoped="" ref="0x105e7ede0"/>
        <function-ref name="toggle" scoped="" ref="0x105e7d020"/>
        <function-ref name="isOutput" scoped="" ref="0x105e7d1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x105e7d340"/>
        <function-ref name="makeOutput" scoped="" ref="0x105e7d4d0"/>
        <function-ref name="get" scoped="" ref="0x105e7d660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105e7d7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x105e7d980"/>
        <function-ref name="set" scoped="" ref="0x105e7db10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105e7dca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105e7de30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105e7c120"/>
        <function-ref name="clr" scoped="" ref="0x105e7c2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105e79100" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P52"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105e79100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105e79480"/>
        <function-ref name="isInput" scoped="" ref="0x105e79610"/>
        <function-ref name="setResistor" scoped="" ref="0x105e797a0"/>
        <function-ref name="toggle" scoped="" ref="0x105e79930"/>
        <function-ref name="isOutput" scoped="" ref="0x105e79ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x105e79c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x105e79de0"/>
        <function-ref name="get" scoped="" ref="0x105e78020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105e781b0"/>
        <function-ref name="getRaw" scoped="" ref="0x105e78340"/>
        <function-ref name="set" scoped="" ref="0x105e784d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105e78660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105e787f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105e78a80"/>
        <function-ref name="clr" scoped="" ref="0x105e78c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105ea1d10" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P53"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105ea1d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105e9f0e0"/>
        <function-ref name="isInput" scoped="" ref="0x105e9f270"/>
        <function-ref name="setResistor" scoped="" ref="0x105e9f400"/>
        <function-ref name="toggle" scoped="" ref="0x105e9f590"/>
        <function-ref name="isOutput" scoped="" ref="0x105e9f720"/>
        <function-ref name="getResistor" scoped="" ref="0x105e9f8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105e9fa40"/>
        <function-ref name="get" scoped="" ref="0x105e9fbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105e9fd60"/>
        <function-ref name="getRaw" scoped="" ref="0x105e9e020"/>
        <function-ref name="set" scoped="" ref="0x105e9e1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105e9e340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105e9e4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105e9e760"/>
        <function-ref name="clr" scoped="" ref="0x105e9e8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105e9b740" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P54"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105e9b740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105e9bac0"/>
        <function-ref name="isInput" scoped="" ref="0x105e9bc50"/>
        <function-ref name="setResistor" scoped="" ref="0x105e9bde0"/>
        <function-ref name="toggle" scoped="" ref="0x105e9a020"/>
        <function-ref name="isOutput" scoped="" ref="0x105e9a1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x105e9a340"/>
        <function-ref name="makeOutput" scoped="" ref="0x105e9a4d0"/>
        <function-ref name="get" scoped="" ref="0x105e9a660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105e9a7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x105e9a980"/>
        <function-ref name="set" scoped="" ref="0x105e9ab10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105e9aca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105e9ae30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105e99120"/>
        <function-ref name="clr" scoped="" ref="0x105e992b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105e96100" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P55"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105e96100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105e96480"/>
        <function-ref name="isInput" scoped="" ref="0x105e96610"/>
        <function-ref name="setResistor" scoped="" ref="0x105e967a0"/>
        <function-ref name="toggle" scoped="" ref="0x105e96930"/>
        <function-ref name="isOutput" scoped="" ref="0x105e96ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x105e96c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x105e96de0"/>
        <function-ref name="get" scoped="" ref="0x105e95020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105e951b0"/>
        <function-ref name="getRaw" scoped="" ref="0x105e95340"/>
        <function-ref name="set" scoped="" ref="0x105e954d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105e95660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105e957f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105e95a80"/>
        <function-ref name="clr" scoped="" ref="0x105e95c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105e92d10" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P56"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105e92d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105e910e0"/>
        <function-ref name="isInput" scoped="" ref="0x105e91270"/>
        <function-ref name="setResistor" scoped="" ref="0x105e91400"/>
        <function-ref name="toggle" scoped="" ref="0x105e91590"/>
        <function-ref name="isOutput" scoped="" ref="0x105e91720"/>
        <function-ref name="getResistor" scoped="" ref="0x105e918b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105e91a40"/>
        <function-ref name="get" scoped="" ref="0x105e91bd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105e91d60"/>
        <function-ref name="getRaw" scoped="" ref="0x105e90020"/>
        <function-ref name="set" scoped="" ref="0x105e901b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105e90340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105e904d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105e90760"/>
        <function-ref name="clr" scoped="" ref="0x105e908f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105e8d740" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P57"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105e8d740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105e8dac0"/>
        <function-ref name="isInput" scoped="" ref="0x105e8dc50"/>
        <function-ref name="setResistor" scoped="" ref="0x105e8dde0"/>
        <function-ref name="toggle" scoped="" ref="0x105eb8020"/>
        <function-ref name="isOutput" scoped="" ref="0x105eb81b0"/>
        <function-ref name="getResistor" scoped="" ref="0x105eb8340"/>
        <function-ref name="makeOutput" scoped="" ref="0x105eb84d0"/>
        <function-ref name="get" scoped="" ref="0x105eb8660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105eb87f0"/>
        <function-ref name="getRaw" scoped="" ref="0x105eb8980"/>
        <function-ref name="set" scoped="" ref="0x105eb8b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105eb8ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105eb8e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105eb7120"/>
        <function-ref name="clr" scoped="" ref="0x105eb72b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105eb4100" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P60"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105eb4100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105eb4480"/>
        <function-ref name="isInput" scoped="" ref="0x105eb4610"/>
        <function-ref name="setResistor" scoped="" ref="0x105eb47a0"/>
        <function-ref name="toggle" scoped="" ref="0x105eb4930"/>
        <function-ref name="isOutput" scoped="" ref="0x105eb4ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x105eb4c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x105eb4de0"/>
        <function-ref name="get" scoped="" ref="0x105eb3020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105eb31b0"/>
        <function-ref name="getRaw" scoped="" ref="0x105eb3340"/>
        <function-ref name="set" scoped="" ref="0x105eb34d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105eb3660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105eb37f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105eb3a80"/>
        <function-ref name="clr" scoped="" ref="0x105eb3c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105eb0d10" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P61"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105eb0d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105eaf0e0"/>
        <function-ref name="isInput" scoped="" ref="0x105eaf270"/>
        <function-ref name="setResistor" scoped="" ref="0x105eaf400"/>
        <function-ref name="toggle" scoped="" ref="0x105eaf590"/>
        <function-ref name="isOutput" scoped="" ref="0x105eaf720"/>
        <function-ref name="getResistor" scoped="" ref="0x105eaf8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105eafa40"/>
        <function-ref name="get" scoped="" ref="0x105eafbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105eafd60"/>
        <function-ref name="getRaw" scoped="" ref="0x105eae020"/>
        <function-ref name="set" scoped="" ref="0x105eae1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105eae340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105eae4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105eae760"/>
        <function-ref name="clr" scoped="" ref="0x105eae8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105eab740" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P62"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105eab740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105eabac0"/>
        <function-ref name="isInput" scoped="" ref="0x105eabc50"/>
        <function-ref name="setResistor" scoped="" ref="0x105eabde0"/>
        <function-ref name="toggle" scoped="" ref="0x105eaa020"/>
        <function-ref name="isOutput" scoped="" ref="0x105eaa1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x105eaa340"/>
        <function-ref name="makeOutput" scoped="" ref="0x105eaa4d0"/>
        <function-ref name="get" scoped="" ref="0x105eaa660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105eaa7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x105eaa980"/>
        <function-ref name="set" scoped="" ref="0x105eaab10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105eaaca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105eaae30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105ea9120"/>
        <function-ref name="clr" scoped="" ref="0x105ea92b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105ea6100" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P63"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105ea6100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105ea6480"/>
        <function-ref name="isInput" scoped="" ref="0x105ea6610"/>
        <function-ref name="setResistor" scoped="" ref="0x105ea67a0"/>
        <function-ref name="toggle" scoped="" ref="0x105ea6930"/>
        <function-ref name="isOutput" scoped="" ref="0x105ea6ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x105ea6c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x105ea6de0"/>
        <function-ref name="get" scoped="" ref="0x105ea4020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105ea41b0"/>
        <function-ref name="getRaw" scoped="" ref="0x105ea4340"/>
        <function-ref name="set" scoped="" ref="0x105ea44d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105ea4660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105ea47f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105ea4a80"/>
        <function-ref name="clr" scoped="" ref="0x105ea4c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105eced10" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P64"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105eced10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105ecd0e0"/>
        <function-ref name="isInput" scoped="" ref="0x105ecd270"/>
        <function-ref name="setResistor" scoped="" ref="0x105ecd400"/>
        <function-ref name="toggle" scoped="" ref="0x105ecd590"/>
        <function-ref name="isOutput" scoped="" ref="0x105ecd720"/>
        <function-ref name="getResistor" scoped="" ref="0x105ecd8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105ecda40"/>
        <function-ref name="get" scoped="" ref="0x105ecdbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105ecdd60"/>
        <function-ref name="getRaw" scoped="" ref="0x105ecc020"/>
        <function-ref name="set" scoped="" ref="0x105ecc1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105ecc340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105ecc4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105ecc760"/>
        <function-ref name="clr" scoped="" ref="0x105ecc8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105ec9740" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P65"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105ec9740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105ec9ac0"/>
        <function-ref name="isInput" scoped="" ref="0x105ec9c50"/>
        <function-ref name="setResistor" scoped="" ref="0x105ec9de0"/>
        <function-ref name="toggle" scoped="" ref="0x105ec8020"/>
        <function-ref name="isOutput" scoped="" ref="0x105ec81b0"/>
        <function-ref name="getResistor" scoped="" ref="0x105ec8340"/>
        <function-ref name="makeOutput" scoped="" ref="0x105ec84d0"/>
        <function-ref name="get" scoped="" ref="0x105ec8660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105ec87f0"/>
        <function-ref name="getRaw" scoped="" ref="0x105ec8980"/>
        <function-ref name="set" scoped="" ref="0x105ec8b10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105ec8ca0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105ec8e30"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105ec7120"/>
        <function-ref name="clr" scoped="" ref="0x105ec72b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105ec4100" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P66"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105ec4100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105ec4480"/>
        <function-ref name="isInput" scoped="" ref="0x105ec4610"/>
        <function-ref name="setResistor" scoped="" ref="0x105ec47a0"/>
        <function-ref name="toggle" scoped="" ref="0x105ec4930"/>
        <function-ref name="isOutput" scoped="" ref="0x105ec4ac0"/>
        <function-ref name="getResistor" scoped="" ref="0x105ec4c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x105ec4de0"/>
        <function-ref name="get" scoped="" ref="0x105ec3020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105ec31b0"/>
        <function-ref name="getRaw" scoped="" ref="0x105ec3340"/>
        <function-ref name="set" scoped="" ref="0x105ec34d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105ec3660"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105ec37f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105ec3a80"/>
        <function-ref name="clr" scoped="" ref="0x105ec3c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x105ec0d10" loc="47:../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P67"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x105ec0d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105ebf0e0"/>
        <function-ref name="isInput" scoped="" ref="0x105ebf270"/>
        <function-ref name="setResistor" scoped="" ref="0x105ebf400"/>
        <function-ref name="toggle" scoped="" ref="0x105ebf590"/>
        <function-ref name="isOutput" scoped="" ref="0x105ebf720"/>
        <function-ref name="getResistor" scoped="" ref="0x105ebf8b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105ebfa40"/>
        <function-ref name="get" scoped="" ref="0x105ebfbd0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105ebfd60"/>
        <function-ref name="getRaw" scoped="" ref="0x105ebe020"/>
        <function-ref name="set" scoped="" ref="0x105ebe1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105ebe340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105ebe4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105ebe760"/>
        <function-ref name="clr" scoped="" ref="0x105ebe8f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x105f542f0" loc="44:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x105f542f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105f54670"/>
        <function-ref name="isInput" scoped="" ref="0x105f54800"/>
        <function-ref name="setResistor" scoped="" ref="0x105f54990"/>
        <function-ref name="toggle" scoped="" ref="0x105f54b20"/>
        <function-ref name="isOutput" scoped="" ref="0x105f54cb0"/>
        <function-ref name="getResistor" scoped="" ref="0x105f54e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x105f53020"/>
        <function-ref name="get" scoped="" ref="0x105f531b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105f53340"/>
        <function-ref name="getRaw" scoped="" ref="0x105f534d0"/>
        <function-ref name="set" scoped="" ref="0x105f53660"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105f537f0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105f53980"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105f53c10"/>
        <function-ref name="clr" scoped="" ref="0x105f53da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x105f36020" loc="43:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x105f36020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105f363a0"/>
        <function-ref name="isInput" scoped="" ref="0x105f36530"/>
        <function-ref name="toggle" scoped="" ref="0x105f366c0"/>
        <function-ref name="isOutput" scoped="" ref="0x105f36850"/>
        <function-ref name="get" scoped="" ref="0x105f369e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105f36b70"/>
        <function-ref name="set" scoped="" ref="0x105f36d00"/>
        <function-ref name="clr" scoped="" ref="0x105f54020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x105f50de0" loc="44:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x105f50de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105f4e180"/>
        <function-ref name="isInput" scoped="" ref="0x105f4e310"/>
        <function-ref name="setResistor" scoped="" ref="0x105f4e4a0"/>
        <function-ref name="toggle" scoped="" ref="0x105f4e630"/>
        <function-ref name="isOutput" scoped="" ref="0x105f4e7c0"/>
        <function-ref name="getResistor" scoped="" ref="0x105f4e950"/>
        <function-ref name="makeOutput" scoped="" ref="0x105f4eae0"/>
        <function-ref name="get" scoped="" ref="0x105f4ec70"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105f4ee00"/>
        <function-ref name="getRaw" scoped="" ref="0x105f4d020"/>
        <function-ref name="set" scoped="" ref="0x105f4d1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105f4d340"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105f4d4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105f4d760"/>
        <function-ref name="clr" scoped="" ref="0x105f4d8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x105f51b90" loc="43:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x105f51b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105f50020"/>
        <function-ref name="isInput" scoped="" ref="0x105f501b0"/>
        <function-ref name="toggle" scoped="" ref="0x105f50340"/>
        <function-ref name="isOutput" scoped="" ref="0x105f504d0"/>
        <function-ref name="get" scoped="" ref="0x105f50660"/>
        <function-ref name="makeOutput" scoped="" ref="0x105f507f0"/>
        <function-ref name="set" scoped="" ref="0x105f50980"/>
        <function-ref name="clr" scoped="" ref="0x105f50b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x105f4a930" loc="44:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x105f4a930"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105f4acb0"/>
        <function-ref name="isInput" scoped="" ref="0x105f4ae40"/>
        <function-ref name="setResistor" scoped="" ref="0x105f49020"/>
        <function-ref name="toggle" scoped="" ref="0x105f491b0"/>
        <function-ref name="isOutput" scoped="" ref="0x105f49340"/>
        <function-ref name="getResistor" scoped="" ref="0x105f494d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105f49660"/>
        <function-ref name="get" scoped="" ref="0x105f497f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x105f49980"/>
        <function-ref name="getRaw" scoped="" ref="0x105f49b10"/>
        <function-ref name="set" scoped="" ref="0x105f49ca0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x105f49e30"/>
        <function-ref name="isIOFunc" scoped="" ref="0x105f48020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x105f482b0"/>
        <function-ref name="clr" scoped="" ref="0x105f48440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x105f4b710" loc="43:../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x105f4b710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x105f4ba90"/>
        <function-ref name="isInput" scoped="" ref="0x105f4bc20"/>
        <function-ref name="toggle" scoped="" ref="0x105f4bdb0"/>
        <function-ref name="isOutput" scoped="" ref="0x105f4a020"/>
        <function-ref name="get" scoped="" ref="0x105f4a1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x105f4a340"/>
        <function-ref name="set" scoped="" ref="0x105f4a4d0"/>
        <function-ref name="clr" scoped="" ref="0x105f4a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x1060f4370" loc="45:../../tos/system/TimerMilliC.nc">
      <component-ref qname="BlinkAppC.Timer0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x1060f4370"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x105ae8e60"/>
            <typename><typedef-ref name="TMilli" ref="0x105cbd200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x1060f0870"/>
        <function-ref name="fired" scoped="" ref="0x1060f3e40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x1060f1c00"/>
        <function-ref name="isOneShot" scoped="" ref="0x1060f1780"/>
        <function-ref name="getdt" scoped="" ref="0x1060ef1e0"/>
        <function-ref name="gett0" scoped="" ref="0x1060f0cf0"/>
        <function-ref name="isRunning" scoped="" ref="0x1060f1300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x1060f3020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x1060f0260"/>
        <function-ref name="startOneShot" scoped="" ref="0x1060f34f0"/>
        <function-ref name="stop" scoped="" ref="0x1060f39c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x105f63610" loc="49:../../tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x105f63610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x105ae8e60"/>
            <typename><typedef-ref name="TMilli" ref="0x105cbd200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x1053d1160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x105f5fc40"/>
        <function-ref name="fired" scoped="" ref="0x105f611e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x105f5f020"/>
        <function-ref name="isOneShot" scoped="" ref="0x105f61ae0"/>
        <function-ref name="getdt" scoped="" ref="0x105f5e590"/>
        <function-ref name="gett0" scoped="" ref="0x105f5e110"/>
        <function-ref name="isRunning" scoped="" ref="0x105f61660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x105f62390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x105f5f630"/>
        <function-ref name="startOneShot" scoped="" ref="0x105f62860"/>
        <function-ref name="stop" scoped="" ref="0x105f62d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x105f591d0" loc="46:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x105f591d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x105ae8e60"/>
            <typename><typedef-ref name="TMilli" ref="0x105cbd200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x1053d1160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x105f86630"/>
        <function-ref name="fired" scoped="" ref="0x105f58c30"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x105f579d0"/>
        <function-ref name="isOneShot" scoped="" ref="0x105f57550"/>
        <function-ref name="getdt" scoped="" ref="0x105f84020"/>
        <function-ref name="gett0" scoped="" ref="0x105f86ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x105f570d0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x105f59dc0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x105f86020"/>
        <function-ref name="startOneShot" scoped="" ref="0x105f582e0"/>
        <function-ref name="stop" scoped="" ref="0x105f587b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x105f81a80" loc="47:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x105f81a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x105ae8e60"/>
            <typename><typedef-ref name="TMilli" ref="0x105cbd200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x105f836f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x105f5a3e0" loc="45:../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x105f5a3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x105f5a760"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x106053870" loc="44:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x106053870"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x105ae8e60"/>
            <typename><typedef-ref name="TMilli" ref="0x105cbd200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x1053d1920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x106083090"/>
        <function-ref name="fired" scoped="" ref="0x106050090"/>
        <function-ref name="startAt" scoped="" ref="0x106050a10"/>
        <function-ref name="isRunning" scoped="" ref="0x106050550"/>
        <function-ref name="getAlarm" scoped="" ref="0x106083550"/>
        <function-ref name="start" scoped="" ref="0x1060526a0"/>
        <function-ref name="stop" scoped="" ref="0x106052bb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x106053020" loc="43:../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x106053020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x1060533a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x1065f04f0" loc="44:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x1065f04f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x105cbd640"/>
            <typename><typedef-ref name="T32khz" ref="0x105cbd9b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x1053d1520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x1065eddb0"/>
        <function-ref name="fired" scoped="" ref="0x1065efda0"/>
        <function-ref name="startAt" scoped="" ref="0x1065ed760"/>
        <function-ref name="isRunning" scoped="" ref="0x1065ed2a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x1065ec2a0"/>
        <function-ref name="start" scoped="" ref="0x1065ef3d0"/>
        <function-ref name="stop" scoped="" ref="0x1065ef8e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x1065f2c40" loc="43:../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x1065f2c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x1065f0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x1065d7da0" loc="41:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x1065d7da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x1065d6180"/>
        <function-ref name="setEvent" scoped="" ref="0x1065d6310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x1065d64a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x1065d6630"/>
        <function-ref name="fired" scoped="" ref="0x1065d67c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x1065da340" loc="39:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x1065da340"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x1065da6c0"/>
        <function-ref name="setClockSource" scoped="" ref="0x1065da850"/>
        <function-ref name="enableEvents" scoped="" ref="0x1065da9e0"/>
        <function-ref name="get" scoped="" ref="0x1065dab70"/>
        <function-ref name="disableEvents" scoped="" ref="0x1065dad00"/>
        <function-ref name="clearOverflow" scoped="" ref="0x1065d8020"/>
        <function-ref name="getMode" scoped="" ref="0x1065d81b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x1065d8340"/>
        <function-ref name="overflow" scoped="" ref="0x1065d84d0"/>
        <function-ref name="setMode" scoped="" ref="0x1065d8660"/>
        <function-ref name="setInputDivider" scoped="" ref="0x1065d87f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x1065d8a80" loc="40:../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x1065d8a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x1065d8e00"/>
        <function-ref name="getControl" scoped="" ref="0x1065d7020"/>
        <function-ref name="enableEvents" scoped="" ref="0x1065d71b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x1065d7340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x1065d74d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x1065d7660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x1065d77f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x1065d7980"/>
        <function-ref name="setControl" scoped="" ref="0x1065d7b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x105f8d020" loc="52:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x105f8d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x1053d1160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x105f8d3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x105f8d530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x105f8d6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x105f8d850"/>
        <function-ref name="fired" scoped="" ref="0x105f8d9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x105f928b0" loc="50:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x105f928b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x1053d1160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x105f92c30"/>
        <function-ref name="setClockSource" scoped="" ref="0x105f92dc0"/>
        <function-ref name="enableEvents" scoped="" ref="0x105f91020"/>
        <function-ref name="get" scoped="" ref="0x105f911b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x105f91340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x105f914d0"/>
        <function-ref name="getMode" scoped="" ref="0x105f91660"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x105f917f0"/>
        <function-ref name="overflow" scoped="" ref="0x105f91980"/>
        <function-ref name="setMode" scoped="" ref="0x105f91b10"/>
        <function-ref name="setInputDivider" scoped="" ref="0x105f91ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x105f8f560" loc="51:../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x105f8f560"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x1053d1160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x105f8f8e0"/>
        <function-ref name="getControl" scoped="" ref="0x105f8fa70"/>
        <function-ref name="enableEvents" scoped="" ref="0x105f8fc00"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x105f8fd90"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x105f8e020"/>
        <function-ref name="disableEvents" scoped="" ref="0x105f8e1b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x105f8e340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x105f8e4d0"/>
        <function-ref name="setControl" scoped="" ref="0x105f8e660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x106617a80" loc="49:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x106617a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x106617e00"/>
        <function-ref name="setEvent" scoped="" ref="0x106616020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x1066161b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x106616340"/>
        <function-ref name="fired" scoped="" ref="0x1066164d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x1065cf190" loc="47:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x1065cf190"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x1065cf510"/>
        <function-ref name="setClockSource" scoped="" ref="0x1065cf6a0"/>
        <function-ref name="enableEvents" scoped="" ref="0x1065cf830"/>
        <function-ref name="get" scoped="" ref="0x1065cf9c0"/>
        <function-ref name="disableEvents" scoped="" ref="0x1065cfb50"/>
        <function-ref name="clearOverflow" scoped="" ref="0x1065cfce0"/>
        <function-ref name="getMode" scoped="" ref="0x1065cfe70"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x106618030"/>
        <function-ref name="overflow" scoped="" ref="0x1066181c0"/>
        <function-ref name="setMode" scoped="" ref="0x106618350"/>
        <function-ref name="setInputDivider" scoped="" ref="0x1066184e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x1065d3020" loc="46:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x1065d3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x105cbd640"/>
            <typename><typedef-ref name="T32khz" ref="0x105cbd9b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x1053d1520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x1065d1870"/>
        <function-ref name="fired" scoped="" ref="0x1065d2840"/>
        <function-ref name="startAt" scoped="" ref="0x1065d1220"/>
        <function-ref name="isRunning" scoped="" ref="0x1065d2d00"/>
        <function-ref name="getAlarm" scoped="" ref="0x1065d1d30"/>
        <function-ref name="start" scoped="" ref="0x1065d3e30"/>
        <function-ref name="stop" scoped="" ref="0x1065d2380"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x1065d4660" loc="45:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x1065d4660"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x1065d49e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x106618770" loc="48:../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x106618770"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x106618af0"/>
        <function-ref name="getControl" scoped="" ref="0x106618c80"/>
        <function-ref name="enableEvents" scoped="" ref="0x106618e10"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x106617020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x1066171b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x106617340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x1066174d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x106617660"/>
        <function-ref name="setControl" scoped="" ref="0x1066177f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x1060008c0" loc="43:../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <component-ref qname="CounterMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x1060008c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x105ae8e60"/>
            <typename><typedef-ref name="TMilli" ref="0x105cbd200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x1053d1920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x105fd3700"/>
        <function-ref name="clearOverflow" scoped="" ref="0x105fd20d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x105fd3bc0"/>
        <function-ref name="overflow" scoped="" ref="0x105fd2590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Counter32khz" ref="0x105fff8e0" loc="43:../../tos/chips/msp430/timer/Msp430Counter32khzC.nc">
      <component-ref qname="Msp430Counter32khzC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Counter32khz" scoped="" ref="0x105fff8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x105cbd640"/>
            <typename><typedef-ref name="T32khz" ref="0x105cbd9b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x1053d1520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x105ffc780"/>
        <function-ref name="clearOverflow" scoped="" ref="0x105ffa150"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x105ffcc40"/>
        <function-ref name="overflow" scoped="" ref="0x105ffa610"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x10601bc50" loc="45:../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x10601bc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x10601a020"/>
        <function-ref name="setClockSource" scoped="" ref="0x10601a1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x10601a340"/>
        <function-ref name="get" scoped="" ref="0x10601a4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x10601a660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x10601a7f0"/>
        <function-ref name="getMode" scoped="" ref="0x10601a980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x10601ab10"/>
        <function-ref name="overflow" scoped="" ref="0x10601aca0"/>
        <function-ref name="setMode" scoped="" ref="0x10601ae30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x106019020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x105ff8b80" loc="44:../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x105ff8b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x105cbd640"/>
            <typename><typedef-ref name="T32khz" ref="0x105cbd9b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x1053d1520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x105ff79b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x10601b360"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x105ff7e70"/>
        <function-ref name="overflow" scoped="" ref="0x10601b820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x10602a0f0" loc="63:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CounterFrom" scoped="" ref="0x10602a0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x105cbd640"/>
            <typename><typedef-ref name="T32khz" ref="0x105cbd9b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x1053d1520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x106029020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x1060299a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x1060294e0"/>
        <function-ref name="overflow" scoped="" ref="0x106029e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x106016cf0" loc="62:../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x106016cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x105ae8e60"/>
            <typename><typedef-ref name="TMilli" ref="0x105cbd200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x1053d1920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x10602db60"/>
        <function-ref name="clearOverflow" scoped="" ref="0x10602b550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x10602b090"/>
        <function-ref name="overflow" scoped="" ref="0x10602ba10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x1065ea890" loc="61:../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x1065ea890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x105ae8e60"/>
            <typename><typedef-ref name="TMilli" ref="0x105cbd200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x1053d1920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x1065e70d0"/>
        <function-ref name="fired" scoped="" ref="0x1065e80d0"/>
        <function-ref name="startAt" scoped="" ref="0x1065e8a50"/>
        <function-ref name="isRunning" scoped="" ref="0x1065e8590"/>
        <function-ref name="getAlarm" scoped="" ref="0x1065e7590"/>
        <function-ref name="start" scoped="" ref="0x1065e96e0"/>
        <function-ref name="stop" scoped="" ref="0x1065e9bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x1065e30a0" loc="73:../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x1065e30a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x105cbd640"/>
            <typename><typedef-ref name="T32khz" ref="0x105cbd9b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x1053d1520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x1065e1b30"/>
        <function-ref name="fired" scoped="" ref="0x1065e29f0"/>
        <function-ref name="startAt" scoped="" ref="0x1065e14e0"/>
        <function-ref name="isRunning" scoped="" ref="0x1065e1020"/>
        <function-ref name="getAlarm" scoped="" ref="0x1065df020"/>
        <function-ref name="start" scoped="" ref="0x1065e2020"/>
        <function-ref name="stop" scoped="" ref="0x1065e2530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x1065e7c00" loc="68:../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x1065e7c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x105ae8e60"/>
            <typename><typedef-ref name="TMilli" ref="0x105cbd200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x1053d1920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x1065e5a80"/>
        <function-ref name="clearOverflow" scoped="" ref="0x1065e44e0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x1065e4020"/>
        <function-ref name="overflow" scoped="" ref="0x1065e49a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x1060869c0" loc="74:../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="fired" scoped="" ref="0x1060869c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x106086d40"/>
        <function-ref name="runTask" scoped="" ref="0x106084020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x106089850" loc="49:../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x106089850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x105ae8e60"/>
            <typename><typedef-ref name="TMilli" ref="0x105cbd200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x1053d1920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x106086090"/>
        <function-ref name="fired" scoped="" ref="0x106087090"/>
        <function-ref name="startAt" scoped="" ref="0x106087a10"/>
        <function-ref name="isRunning" scoped="" ref="0x106087550"/>
        <function-ref name="getAlarm" scoped="" ref="0x106086550"/>
        <function-ref name="start" scoped="" ref="0x1060886a0"/>
        <function-ref name="stop" scoped="" ref="0x106088bb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x10608e2f0" loc="48:../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x10608e2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x105ae8e60"/>
            <typename><typedef-ref name="TMilli" ref="0x105cbd200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x10608b870"/>
        <function-ref name="fired" scoped="" ref="0x10608de40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x10608cc00"/>
        <function-ref name="isOneShot" scoped="" ref="0x10608c780"/>
        <function-ref name="getdt" scoped="" ref="0x1060891e0"/>
        <function-ref name="gett0" scoped="" ref="0x10608bcf0"/>
        <function-ref name="isRunning" scoped="" ref="0x10608c300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x10608d020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x10608b260"/>
        <function-ref name="startOneShot" scoped="" ref="0x10608d4f0"/>
        <function-ref name="stop" scoped="" ref="0x10608d9c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x1060d3a00" loc="71:../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="updateFromTimer" scoped="" ref="0x1060d3a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x1060d3d80"/>
        <function-ref name="runTask" scoped="" ref="0x106108020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x1060d8640" loc="49:../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerFrom" scoped="" ref="0x1060d8640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x105ae8e60"/>
            <typename><typedef-ref name="TMilli" ref="0x105cbd200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x1060d4c40"/>
        <function-ref name="fired" scoped="" ref="0x1060d61e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x1060d4020"/>
        <function-ref name="isOneShot" scoped="" ref="0x1060d6ae0"/>
        <function-ref name="getdt" scoped="" ref="0x1060d3590"/>
        <function-ref name="gett0" scoped="" ref="0x1060d3110"/>
        <function-ref name="isRunning" scoped="" ref="0x1060d6660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x1060d7390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x1060d4630"/>
        <function-ref name="startOneShot" scoped="" ref="0x1060d7860"/>
        <function-ref name="stop" scoped="" ref="0x1060d7d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x1060de150" loc="48:../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x1060de150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x105ae8e60"/>
            <typename><typedef-ref name="TMilli" ref="0x105cbd200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x1053d1160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x1060da700"/>
        <function-ref name="fired" scoped="" ref="0x1060ddc30"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x1060dba50"/>
        <function-ref name="isOneShot" scoped="" ref="0x1060db5b0"/>
        <function-ref name="getdt" scoped="" ref="0x1060d8090"/>
        <function-ref name="gett0" scoped="" ref="0x1060daba0"/>
        <function-ref name="isRunning" scoped="" ref="0x1060db110"/>
        <function-ref name="startPeriodic" scoped="" ref="0x1060ded60"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x1060da0d0"/>
        <function-ref name="startOneShot" scoped="" ref="0x1060dd2a0"/>
        <function-ref name="stop" scoped="" ref="0x1060dd790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x106106790" loc="48:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x106106790"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x105ae8e60"/>
            <typename><typedef-ref name="TMilli" ref="0x105cbd200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x1061053f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x106105a60" loc="49:../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x106105a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x105ae8e60"/>
            <typename><typedef-ref name="TMilli" ref="0x105cbd200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x1053d1920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x1060fb890"/>
        <function-ref name="clearOverflow" scoped="" ref="0x1060f9260"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x1060fbd50"/>
        <function-ref name="overflow" scoped="" ref="0x1060f9720"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Init" loc="51:../../tos/interfaces/Init.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x105ae7a10" loc="62:../../tos/interfaces/Init.nc">
        <documentation loc="53:../../tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x105664980"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:../../tos/interfaces/Boot.nc">
      <documentation loc="42:../../tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x105ae55d0" loc="60:../../tos/interfaces/Boot.nc">
        <documentation loc="51:../../tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430ClockInit" loc="38:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="defaultInitTimerB" ref="0x105b2e840" loc="48:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerB" ref="0x105b12b00" loc="43:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitTimerA" ref="0x105b2e120" loc="47:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerA" ref="0x105b12420" loc="42:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultSetupDcoCalibrate" ref="0x105b112b0" loc="45:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="setupDcoCalibrate" ref="0x105b14600" loc="40:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initClocks" ref="0x105b14ce0" loc="41:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitClocks" ref="0x105b119d0" loc="46:../../tos/chips/msp430/timer/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:../../tos/interfaces/McuPowerOverride.nc">
      <documentation loc="35:../../tos/interfaces/McuPowerOverride.nc">
        <short>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state.</short>
        <long>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state. This is sometimes necessary,&#10; e.g., if a very low power state has a long wakeup latency that will&#10; violate application timing requirements. TEP 112 describes how&#10; TinyOS incorporates this information when the Scheduler tells&#10; the MCU to enter a low power state.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microconroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x1059e4070" loc="62:../../tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:../../tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x105716670"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerControl" loc="40:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="setControlAsCapture" ref="0x105b7a020" loc="55:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <documentation loc="49:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
          <short> &#10; Sets the timer in capture mode.</short>
          <long> &#10; Sets the timer in capture mode.&#10; @param cm configures the capture to occur on none, rising, falling or rising_and_falling edges&#10; Msp430Timer.h has convenience definitions:&#10; MSP430TIMER_CM_NONE, MSP430TIMER_CM_RISING, MSP430TIMER_CM_FALLING, MSP430TIMER_CM_BOTH&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x1053d1160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x105b7bcc0" loc="55:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x1053d1160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControl" ref="0x105b7e390" loc="42:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x105b265a0"/>
            <typename><typedef-ref name="msp430_compare_control_t" ref="0x105b24440"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x105b7a890" loc="57:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="areEventsEnabled" ref="0x105b797b0" loc="59:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x105661090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlAsCompare" ref="0x105b7b560" loc="47:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x105b79020" loc="58:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x105b7eb30" loc="43:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x105661090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearPendingInterrupt" ref="0x105b7d350" loc="44:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x105b7dda0" loc="46:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x105b265a0"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x105b24440"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x105b7db20" loc="46:../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x105b265a0"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x105b24440"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Capture" loc="39:../../tos/chips/msp430/timer/Msp430Capture.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430Capture.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x105b8d0e0" loc="44:../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="41:../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Reads the value of the last capture event in TxCCRx&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x1053d1520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSynchronous" ref="0x105b8a630" loc="79:../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="70:../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set whether the capture should occur synchronously or asynchronously.</short>
          <long>&#10; Set whether the capture should occur synchronously or asynchronously.&#10; TinyOS default is synchronous captures.&#10; WARNING: if the capture signal is asynchronous to the timer clock,&#10;          it could case a race condition (see Timer documentation&#10;          in MSP430F1xx user guide)&#10; @param synchronous TRUE to synchronize the timer capture with the&#10;        next timer clock instead of occurring asynchronously.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x105661090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="synchronous" ref="0x105b8a3b0" loc="79:../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x105661090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x105b892a0" loc="86:../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="81:../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Signalled when an event is captured.</short>
          <long>&#10; Signalled when an event is captured.&#10;&#10; @param time The time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x1053d1520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x105b89020" loc="86:../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x1053d1520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x105b8bbe0" loc="68:../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="65:../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Clear the capture overflow flag for when multiple captures occur&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x105b8b3e0" loc="63:../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="58:../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Determine if a capture overflow is pending.</short>
          <long>&#10; Determine if a capture overflow is pending.&#10;&#10; @return TRUE if the capture register has overflowed&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x105661090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEdge" ref="0x105b8da90" loc="56:../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="46:../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set the edge that the capture should occur&#10;&#10; </short>
          <long>&#10; Set the edge that the capture should occur&#10;&#10; @param cm Capture Mode for edge capture.&#10; enums exist for:&#10;   MSP430TIMER_CM_NONE is no capture.&#10;   MSP430TIMER_CM_RISING is rising edge capture.&#10;   MSP430TIMER_CM_FALLING is a falling edge capture.&#10;   MSP430TIMER_CM_BOTH captures on both rising and falling edges.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x1053d1160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x105b8d810" loc="56:../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x1053d1160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Compare" loc="38:../../tos/chips/msp430/timer/Msp430Compare.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430Compare.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x105b743e0" loc="40:../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x1053d1520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEvent" ref="0x105b74d60" loc="41:../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x1053d1520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x105b74ae0" loc="41:../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x1053d1520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromPrev" ref="0x105b72790" loc="42:../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x1053d1520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x105b72510" loc="42:../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x1053d1520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromNow" ref="0x105b712a0" loc="43:../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x1053d1520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x105b71020" loc="43:../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x1053d1520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x105b71990" loc="45:../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Timer" loc="43:../../tos/chips/msp430/timer/Msp430Timer.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x105b64810" loc="52:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x105b612a0" loc="55:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x1053d1520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="clockSource" ref="0x105b61020" loc="55:../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x1053d1520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x105b63020" loc="53:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x105b6aaa0" loc="45:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x1053d1520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x105b63760" loc="54:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x105b669b0" loc="47:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x105b64120" loc="51:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x105b66270" loc="46:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x105661090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x105b650e0" loc="48:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMode" ref="0x105b659f0" loc="50:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x105b65770" loc="50:../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInputDivider" ref="0x105b61cb0" loc="56:../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x1053d1520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="inputDivider" ref="0x105b61a30" loc="56:../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x1053d1520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerEvent" loc="37:../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
      <documentation loc="33:../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x105ba31f0" loc="39:../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <interfacedef-ref qname="Msp430TimerEvent"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="74:../../tos/interfaces/McuSleep.nc">
      <documentation loc="63:../../tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @date   Oct 26, 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="sleep" ref="0x105abb670" loc="76:../../tos/interfaces/McuSleep.nc">
        <documentation loc="75:../../tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:../../tos/interfaces/McuPowerState.nc">
      <documentation loc="35:../../tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x10576d910" loc="52:../../tos/interfaces/McuPowerState.nc">
        <documentation loc="47:../../tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:../../tos/interfaces/Scheduler.nc">
      <documentation loc="42:../../tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x10565d020" loc="57:../../tos/interfaces/Scheduler.nc">
        <documentation loc="54:../../tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x105668020" loc="72:../../tos/interfaces/Scheduler.nc">
        <documentation loc="67:../../tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x10565d770" loc="65:../../tos/interfaces/Scheduler.nc">
        <documentation loc="59:../../tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x105661090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:../../tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x10566f020" loc="67:../../tos/interfaces/TaskBasic.nc">
        <documentation loc="57:../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x105664980"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x10566f870" loc="75:../../tos/interfaces/TaskBasic.nc">
        <documentation loc="69:../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:../../tos/lib/timer/Timer.nc">
      <documentation loc="36:../../tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x105cdf350" loc="53:../../tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x105cdf350"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x105cd71f0" loc="136:../../tos/lib/timer/Timer.nc">
        <documentation loc="132:../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x1053d1920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x105cdca60" loc="83:../../tos/lib/timer/Timer.nc">
        <documentation loc="80:../../tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x105cda820" loc="114:../../tos/lib/timer/Timer.nc">
        <documentation loc="100:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x1053d1920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x1053d1920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x105cda250" loc="114:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x1053d1920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x105cda590" loc="114:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x1053d1920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x105cdba60" loc="98:../../tos/lib/timer/Timer.nc">
        <documentation loc="94:../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x105661090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x105cd6270" loc="151:../../tos/lib/timer/Timer.nc">
        <documentation loc="146:../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x1053d1920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x105cd7980" loc="144:../../tos/lib/timer/Timer.nc">
        <documentation loc="138:../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x1053d1920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x105cdb270" loc="92:../../tos/lib/timer/Timer.nc">
        <documentation loc="86:../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x105661090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x105cdd020" loc="64:../../tos/lib/timer/Timer.nc">
        <documentation loc="56:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x1053d1920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x105cdfc40" loc="64:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x1053d1920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x105cd9820" loc="129:../../tos/lib/timer/Timer.nc">
        <documentation loc="116:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x1053d1920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x1053d1920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x105cd9250" loc="129:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x1053d1920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x105cd9590" loc="129:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x1053d1920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x105cddae0" loc="73:../../tos/lib/timer/Timer.nc">
        <documentation loc="66:../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x1053d1920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x105cdd860" loc="73:../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x1053d1920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x105cdc350" loc="78:../../tos/lib/timer/Timer.nc">
        <documentation loc="75:../../tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="51:../../tos/interfaces/Leds.nc">
      <documentation loc="33:../../tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x105ccd7b0" loc="61:../../tos/interfaces/Leds.nc">
        <documentation loc="58:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x105cf1020" loc="67:../../tos/interfaces/Leds.nc">
        <documentation loc="63:../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x105cf1800" loc="72:../../tos/interfaces/Leds.nc">
        <documentation loc="69:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x105cf07d0" loc="83:../../tos/interfaces/Leds.nc">
        <documentation loc="79:../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x105cee020" loc="100:../../tos/interfaces/Leds.nc">
        <documentation loc="96:../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x105cee830" loc="117:../../tos/interfaces/Leds.nc">
        <documentation loc="103:../../tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x1053d1160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x105cf0020" loc="77:../../tos/interfaces/Leds.nc">
        <documentation loc="74:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x105ced3f0" loc="134:../../tos/interfaces/Leds.nc">
        <documentation loc="120:../../tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x1053d1160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x105ced170" loc="134:../../tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x1053d1160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x105ccd020" loc="56:../../tos/interfaces/Leds.nc">
        <documentation loc="53:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x105cef020" loc="89:../../tos/interfaces/Leds.nc">
        <documentation loc="86:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x105cef7b0" loc="94:../../tos/interfaces/Leds.nc">
        <documentation loc="91:../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:../../tos/interfaces/GeneralIO.nc">
      <documentation loc="34:../../tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x105d01020" loc="44:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x105d01750" loc="45:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x105661090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x105d020e0" loc="42:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x105cff5e0" loc="47:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x105661090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x105d027e0" loc="43:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x105661090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x105d01e70" loc="46:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x105d032b0" loc="40:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x105d03980" loc="41:../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430GeneralIO" loc="43:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
      <documentation loc="34:../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x105d22020" loc="78:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="75:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to input.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x105d22770" loc="80:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x105661090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setResistor" ref="0x105d1d2e0" loc="110:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="103:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin pullup / pull down resistor mode.</short>
          <long>&#10; Set pin pullup / pull down resistor mode.&#10; @param mode One of the MSP430_PORT_RESISTOR_* values&#10; @return EINVAL if invalid mode or pin does not support resistor configuration;&#10; FAIL if pin is not an input;&#10; SUCCESS if pin supports resistor configuration, is an input, and mode is valid&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x105664980"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x1053d1160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x105d1d060" loc="110:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x1053d1160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x105d24770" loc="58:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="55:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Toggle pin status.</short>
          <long>&#10; Toggle pin status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x105d20780" loc="87:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x105661090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getResistor" ref="0x105d1dbd0" loc="117:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="112:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the pin pullup / pulldown resistor mode.</short>
          <long>&#10; Get the pin pullup / pulldown resistor mode.&#10;&#10; @return one of the MSP430_PORT_RESISTOR_* values&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x1053d1160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x105d20020" loc="85:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="82:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to output.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x105d23820" loc="73:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="68:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Read pin value.</short>
          <long>&#10; Read pin value.&#10;&#10; @return TRUE if pin is high, FALSE otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x105661090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectIOFunc" ref="0x105d1e020" loc="99:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="96:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for I/O functionality.</short>
          <long>&#10; Set pin for I/O functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRaw" ref="0x105d23020" loc="66:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="60:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the port status that contains the pin.</short>
          <long>&#10; Get the port status that contains the pin.&#10;&#10; @return Status of the port that contains the given pin. The x'th&#10; pin on the port will be represented in the x'th bit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x1053d1160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x105d278c0" loc="48:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="45:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to high.</short>
          <long>&#10; Set pin to high.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectModuleFunc" ref="0x105d1f020" loc="92:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="89:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for module specific functionality.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isIOFunc" ref="0x105d1e7c0" loc="101:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x105661090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isModuleFunc" ref="0x105d1f7b0" loc="94:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x105661090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x105d24020" loc="53:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="50:../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to low.</short>
          <long>&#10; Set pin to low.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:../../tos/lib/timer/LocalTime.nc">
      <documentation loc="36:../../tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x105f84c40" loc="53:../../tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x105f84c40"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x105f815a0" loc="61:../../tos/lib/timer/LocalTime.nc">
        <documentation loc="55:../../tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x1053d1920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:../../tos/lib/timer/Alarm.nc">
      <documentation loc="36:../../tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x105f7b5b0" loc="56:../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x105f7b5b0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x105f7b7f0" loc="56:../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x105f7b7f0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x105f76390" loc="109:../../tos/lib/timer/Alarm.nc">
        <documentation loc="105:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x105f7b7f0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x105f793b0" loc="78:../../tos/lib/timer/Alarm.nc">
        <documentation loc="75:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x105f789d0" loc="103:../../tos/lib/timer/Alarm.nc">
        <documentation loc="90:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x105f7b7f0"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x105f7b7f0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x105f78400" loc="103:../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x105f7b7f0"/></type-var>
          </variable>
          <variable name="dt" ref="0x105f78740" loc="103:../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x105f7b7f0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x105f79b90" loc="88:../../tos/lib/timer/Alarm.nc">
        <documentation loc="81:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x105661090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x105f76b80" loc="116:../../tos/lib/timer/Alarm.nc">
        <documentation loc="111:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x105f7b7f0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x105f7a390" loc="66:../../tos/lib/timer/Alarm.nc">
        <documentation loc="59:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x105f7b7f0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x105f7a110" loc="66:../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x105f7b7f0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x105f7abc0" loc="73:../../tos/lib/timer/Alarm.nc">
        <documentation loc="68:../../tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:../../tos/lib/timer/Counter.nc">
      <documentation loc="36:../../tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x105fd6df0" loc="57:../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x105fd6df0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x106003070" loc="57:../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x106003070"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x106003990" loc="64:../../tos/lib/timer/Counter.nc">
        <documentation loc="59:../../tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x106003070"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x106002ad0" loc="76:../../tos/lib/timer/Counter.nc">
        <documentation loc="73:../../tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x106002270" loc="71:../../tos/lib/timer/Counter.nc">
        <documentation loc="66:../../tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x105661090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x106000270" loc="82:../../tos/lib/timer/Counter.nc">
        <documentation loc="78:../../tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
